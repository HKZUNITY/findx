'use strict';

//配置的基类
class ConfigBase {
    constructor(excelData) {
        this.ELEMENTARR = [];
        this.ELEMENTMAP = new Map();
        this.KEYMAP = new Map();
        let headerLine = 2; //表头的行数
        this.ELEMENTARR = new Array(excelData.length - headerLine);
        for (let i = 0; i < this.ELEMENTARR.length; i++) {
            this.ELEMENTARR[i] = {};
        }
        let column = excelData[0].length; //列数
        for (let j = 0; j < column; j++) { //遍历各列
            let name = excelData[0][j];
            let tags = excelData[1][j].split('|');
            if (tags.includes(ConfigBase.TAG_CHILDLANGUAGE))
                continue;
            let jOffect = 0; //列偏移量
            if (tags.includes(ConfigBase.TAG_MAINLANGUAGE)) {
                let index = j + ConfigBase.languageIndex;
                let targetTags = excelData[1][index].split('|');
                if (index < column && targetTags.includes(ConfigBase.TAG_CHILDLANGUAGE)) {
                    jOffect = ConfigBase.languageIndex;
                }
            }
            let hasTag_Key = tags.includes(ConfigBase.TAG_KEY);
            let hasTag_Language = tags.includes(ConfigBase.TAG_LANGUAGE);
            for (let i = 0; i < this.ELEMENTARR.length; i++) {
                let ele = this.ELEMENTARR[i];
                let value = excelData[i + headerLine][j + jOffect];
                if (j == 0) { //ID
                    this.ELEMENTMAP.set(value, ele);
                }
                else {
                    if (hasTag_Key) {
                        this.KEYMAP.set(value, excelData[i + headerLine][0]);
                    }
                    if (hasTag_Language) {
                        if (ConfigBase.getLanguage != null) {
                            value = ConfigBase.getLanguage(value);
                        }
                        else {
                            value = "unknow";
                        }
                    }
                }
                ele[name] = value;
            }
        }
    }
    //设置获取语言的方法
    static initLanguage(languageIndex, getLanguageFun) {
        ConfigBase.languageIndex = languageIndex;
        ConfigBase.getLanguage = getLanguageFun;
        if (ConfigBase.languageIndex < 0) {
            ConfigBase.languageIndex = ConfigBase.getSystemLanguageIndex();
        }
    }
    //获取系统语言索引
    static getSystemLanguageIndex() {
        let language = LocaleUtil.getDefaultLocale().toString().toLowerCase();
        if (!!language.match("en")) {
            return 0;
        }
        if (!!language.match("zh")) {
            return 1;
        }
        if (!!language.match("ja")) {
            return 2;
        }
        if (!!language.match("de")) {
            return 3;
        }
        return 0;
    }
    /**
    * 根据id获取一个元素
    * @param id id|key
    * @returns Element
    */
    getElement(id) {
        let ele = this.ELEMENTMAP.get(Number(id)) || this.ELEMENTMAP.get(this.KEYMAP.get(id));
        if (ele == null) {
            console.warn(this.constructor.name + "配置表中找不到元素 id:" + id);
        }
        return ele;
    }
    /**
    * 根据字段名和字段值查找一个元素
    * @param fieldName 字段名
    * @param fieldValue 字段值
    * @returns 第一个找到的Element
    */
    findElement(fieldName, fieldValue) {
        for (let i = 0; i < this.ELEMENTARR.length; i++) {
            if (this.ELEMENTARR[i][fieldName] == fieldValue) {
                return this.ELEMENTARR[i];
            }
        }
    }
    /**
    * 根据字段名和字段值查找一组元素
    * @param fieldName 字段名
    * @param fieldValue 字段值
    * @returns 所有符合要求的Element
    */
    findElements(fieldName, fieldValue) {
        let arr = [];
        for (let i = 0; i < this.ELEMENTARR.length; i++) {
            if (this.ELEMENTARR[i][fieldName] == fieldValue) {
                arr.push(this.ELEMENTARR[i]);
            }
        }
        return arr;
    }
    /**获取所有元素*/
    getAllElement() {
        return this.ELEMENTARR;
    }
}
ConfigBase.TAG_KEY = 'Key'; //读取键(除了ID之外的别名，带key的字段必须是string类型)
ConfigBase.TAG_LANGUAGE = 'Language'; //关联语言表的id或key(如果有这个tag，导表工具要把数据生成为string类型，因为会自动进行值的转换)
ConfigBase.TAG_MAINLANGUAGE = 'MainLanguage'; //主语言tag
ConfigBase.TAG_CHILDLANGUAGE = 'ChildLanguage'; //子语言tag
ConfigBase.languageIndex = 0;

var foreign28 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    ConfigBase: ConfigBase
});

const EXCELDATA$m = [["id", "Grade", "Judge", "NextId", "Name", "AMdetail", "TragetNum", "RewardType", "RewardNum"], ["", "", "", "", "", "", "", "", ""], [1, 5, 1, 0, "富可敌国", "得到144个宝箱", 144, 1, 50], [2, 4, 2, 0, "最强斗帝", "成为斗帝,达到100级", 100, 2, 10000], [3, 4, 20, 0, "最强斗圣", "成为斗圣，达到90级", 90, 2, 9000], [4, 4, 21, 0, "最强斗尊", "成为斗尊，达到80级", 80, 2, 8000], [5, 4, 22, 0, "最强斗宗", "成为斗宗，达到70级", 70, 2, 7000], [6, 3, 23, 0, "最强斗皇", "成为斗皇，达到60级", 60, 2, 6000], [7, 3, 24, 0, "最强斗王", "成为斗王，达到50级", 50, 2, 5000], [8, 3, 25, 0, "最强斗灵", "成为斗灵，达到40级", 40, 2, 4000], [9, 2, 26, 0, "最强大斗师", "成为大斗师，达到30级", 30, 2, 3000], [10, 2, 27, 0, "最强斗师", "成为斗师，达到20级", 20, 2, 2000], [11, 1, 28, 0, "最强斗者", "成为斗者，达到10级", 10, 2, 1000], [12, 5, 29, 0, "最强斗帝之帝", "大陆最强，达到999级，无敌！", 999, 2, 99999], [13, 1, 5, 14, "杀戮师", "成为杀戮之师，需要击杀10个敌人", 10, 3, 100], [14, 2, 5, 15, "杀戮王", "成为杀戮之王，需要击杀50个敌人", 50, 3, 500], [15, 3, 5, 16, "杀戮皇", "成为杀戮之皇，需要击杀100个敌人", 100, 3, 1000], [16, 4, 5, 17, "杀戮圣", "成为杀戮之圣，需要击杀200个敌人", 200, 3, 2000], [17, 5, 5, 0, "杀戮帝", "成为杀戮之帝，需要击杀999个敌人", 999, 3, 9999], [18, 1, 6, 19, "跳高师", "成为跳高之师，需要累计跳跃高度达到50000米", 50000, 1, 10], [19, 2, 6, 20, "跳高王", "成为跳高之王，需要累计跳跃高度达到100000米", 100000, 1, 20], [20, 3, 6, 21, "跳高皇", "成为跳高之皇，，需要累计跳跃高度达到200000米", 200000, 1, 30], [21, 4, 6, 22, "跳高圣", "成为跳高之圣，需要累计跳跃高度达到500000米", 500000, 1, 40], [22, 5, 6, 0, "跳高帝", "成为跳高之帝，需要累计跳跃高度达到1000000米", 1000000, 1, 50], [23, 1, 8, 24, "倒霉师", "成为倒霉之师，需要被电击或被击飞或被发射10次", 10, 1, 1], [24, 2, 8, 25, "倒霉王", "成为倒霉之王，需要被电击或被击飞或被发射50次", 50, 1, 2], [25, 3, 8, 26, "倒霉皇", "成为倒霉之皇，需要被电击或被击飞或被发射100次", 100, 1, 3], [26, 4, 8, 27, "倒霉圣", "成为倒霉之圣，需要被电击或被击飞或被发射500次", 500, 1, 4], [27, 5, 8, 0, "倒霉帝", "成为倒霉之帝，需要被电击或被击飞或被发射1000次", 1000, 1, 5], [28, 1, 10, 29, "舞师", "成为舞师，需要跳舞10次", 10, 1, 1], [29, 2, 10, 30, "舞王", "成为舞王，需要跳舞30次", 30, 1, 2], [30, 3, 10, 31, "舞皇", "成为舞皇，需要跳舞90次", 90, 1, 3], [31, 4, 10, 32, "舞圣", "成为舞圣，需要跳舞200次", 200, 1, 4], [32, 5, 10, 0, "舞帝", "成为舞帝，需要跳舞500次", 500, 1, 5], [33, 1, 11, 34, "坐师", "成为坐师，需要坐下10次", 10, 1, 1], [34, 2, 11, 35, "坐王", "成为坐王，需要坐下50次", 50, 1, 2], [35, 3, 11, 36, "坐皇", "成为坐皇，需要坐下100次", 100, 1, 3], [36, 4, 11, 37, "坐圣", "成为坐圣，需要坐下300次", 300, 1, 4], [37, 5, 11, 0, "坐帝", "成为坐帝，需要坐下999次", 999, 1, 5], [38, 1, 12, 39, "武器之师", "成为武器之师，需要更换10次武器", 10, 3, 100], [39, 2, 12, 40, "武器之王", "成为武器之王，需要更换50次武器", 50, 3, 200], [40, 3, 12, 41, "武器之皇", "成为武器之皇，需要更换150次武器", 150, 3, 300], [41, 4, 12, 42, "武器之圣", "成为武器之圣，需要更换500次武器", 500, 3, 400], [42, 5, 12, 0, "武器之帝", "成为武器之帝，需要更换999次武器", 999, 3, 500], [43, 1, 13, 44, "换装之师", "成为换装之师，需要换装10次", 10, 1, 1], [44, 2, 13, 45, "换装之王", "成为换装之王，需要换装50次", 50, 1, 2], [45, 3, 13, 46, "换装之皇", "成为换装之皇，需要换装150次", 150, 1, 3], [46, 4, 13, 47, "换装之圣", "成为换装之圣，需要换装500次", 500, 1, 4], [47, 5, 13, 0, "换装之帝", "成为换装之帝，需要换装999次", 999, 1, 5], [48, 1, 14, 49, "飞行之师", "成为飞行之师，需要更换10次飞行翅膀", 10, 1, 1], [49, 2, 14, 50, "飞行之王", "成为飞行之王，需要更换50次飞行翅膀", 50, 1, 2], [50, 3, 14, 41, "飞行之皇", "成为飞行之皇，需要更换150次飞行翅膀", 150, 1, 3], [51, 4, 14, 52, "飞行之圣", "成为飞行之圣，需要更换500次飞行翅膀", 500, 1, 4], [52, 5, 14, 0, "飞行之帝", "成为飞行之帝，需要更换999次飞行翅膀", 999, 1, 5], [53, 1, 15, 54, "特效之师", "成为特效之师，需要更换10次拖尾特效", 10, 1, 1], [54, 2, 15, 55, "特效之王", "成为特效之王，需要更换50次拖尾特效", 50, 1, 2], [55, 3, 15, 56, "特效之皇", "成为特效之皇，需要更换150次拖尾特效", 150, 1, 3], [56, 4, 15, 57, "特效之圣", "成为特效之圣，需要更换500次拖尾特效", 500, 1, 4], [57, 5, 15, 0, "特效之帝", "成为特效之帝，需要更换999次拖尾特效", 999, 1, 5], [58, 1, 16, 59, "音乐之师", "成为音乐之师，需要切换10次背景音乐", 10, 1, 1], [59, 2, 16, 60, "音乐之王", "成为音乐之王，需要切换50次背景音乐", 50, 1, 2], [60, 3, 16, 61, "音乐之皇", "成为音乐之皇，需要切换150次背景音乐", 150, 1, 3], [61, 4, 16, 62, "音乐之圣", "成为音乐之圣，需要切换500次背景音乐", 500, 1, 4], [62, 5, 16, 0, "音乐之帝", "成为音乐之帝，需要切换999次背景音乐", 999, 1, 5], [63, 1, 17, 64, "抽奖之师", "成为抽奖之师，需要抽奖10次", 10, 1, 1], [64, 2, 17, 65, "抽奖之王", "成为抽奖之王，需要抽奖50次", 50, 1, 2], [65, 3, 17, 66, "抽奖之皇", "成为抽奖之皇，需要抽奖150次", 150, 1, 3], [66, 4, 17, 67, "抽奖之圣", "成为抽奖之圣，需要抽奖500次", 500, 1, 4], [67, 5, 17, 0, "抽奖之帝", "成为抽奖之帝，需要抽奖999次", 999, 1, 5], [68, 1, 18, 69, "寻宝之师", "成为寻宝之师，需要使用藏宝图10次", 10, 1, 1], [69, 2, 18, 70, "寻宝之王", "成为寻宝之王，需要使用藏宝图50次", 50, 1, 2], [70, 3, 18, 71, "寻宝之皇", "成为寻宝之皇，需要使用藏宝图150次", 150, 1, 3], [71, 4, 18, 72, "寻宝之圣", "成为寻宝之圣，需要使用藏宝图500次", 500, 1, 4], [72, 5, 18, 0, "寻宝之帝", "成为寻宝之帝，需要使用藏宝图999次", 999, 1, 5]];
class AchievementsConfig extends ConfigBase {
    constructor() {
        super(EXCELDATA$m);
    }
}

var foreign22 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    AchievementsConfig: AchievementsConfig
});

const EXCELDATA$l = [["id", "Guid", "Annotation"], ["", "", ""], [1, "131828", "全局UI点击音效"], [2, "169133", "喷泉水声"], [3, "120683", "坐UI图标"], [4, "4175,86983", "坐姿"], [5, "133403", "Off"], [6, "133445", "On"], [7, "118699", "bad guy", "背景音乐"], [8, "128884", "不知道叫啥"], [9, "128888", "也不知道叫啥"], [10, "117220", "金轮"], [11, "117222", "我会活下去"], [12, "118697", "Let Me Love You"], [13, "118698", "STAY"], [14, "118700", "Running up That Hill"], [15, "118701", "Love To Hate Me"], [16, "118702", "TOMBOY"], [17, "118703", "Shut Down"], [18, "118704", "Celestial"], [19, "118712", "As It Was"], [20, "118706", "Good Morning"], [21, "118707", "Alone"], [22, "118709", "Chanderiler"], [23, "118711", "Don't Wanna Know"], [24, "118716", "Mood"], [25, "120389", "震荡音乐icon"], [26, "122230", "坐姿"], [27, "122227", "坐姿"], [28, "126331", "坐姿"], [29, "99088", "跳舞图标"], [30, "14692,35388,29715,132787,122458,122453,122454,88544,126045,126579,14701,29733", "Dance"], [31, "29725,29748,88448,88449,88450,88541,88544,122676,122677,122678,122679,122680,122681,122682,122683,122684,122745,122746", "Dance"], [32, "29756,46293,46293,108421,53004,116994,108424,52965,175607", "动画"], [33, "25514", "换装特效"], [34, "47427", "升级音效"], [35, "160502", "升级特效"], [36, "103066,102933,122181,122949,103059,122946,103073,103079,103077,122952,31728,103064,122959,29043,31734,103061,122955,122956,103069,122961,122179,37632,150590,150629,131907,105301,150628,108327,150589,150630,150563,150579,150578,150604,150562,150552,150577,150591,150567,150613,150606,150631,150616,84912,29718,96578,29747,29723,29764,29767,85957,115466,117376,117382,162129,162136,122491,85945,135894,84942,84949,84931,84956,84932,105211,120065,123287,116459,123286,101410,101409,101411,31260,47870,47421,107533,130641,107541,150929,150927,150930,7750,150919,151737,151739,151741,150932,151736,150933,47418,47414", "武器资源加载"], [37, "175671", "问号"], [39, "42803,42804,42805,42806,42807,42808,42809,42810,42811,42812,42813,42814,42815,42816,42817,42818,42819,42820,42821,42822,42823,42824,42825,42826,42827,42828,42829,42830,42831,42832,145902,145903,145904,145907,145909,145910,145911,145913,145905,145906,145908,145912,136957,136958,136959,136960,136961,136962,136963,136964,136965,136966,177589,178438,174326,145165,83140,174366,174339,174341,174342,174360,174375,174353,174371,174331,174327,174379,174376,145168,174338,174330,174348,174382,174347,145170,174373,174380,178220", "翅膀"], [40, "88822,7982,151527,145511,88796,128516,24979,145502,145500,145506,145495,7982,145510,145498,145504,145505,145493,145507,145499,145508,145497,145492,88824,158202,145509,145503,178220,158616,158613,174364,178010,158622,158621,174337,148824,148825,148826,148827,148828,148829,148830,148831,148832,148833,148834,148835,148836,148837,148838,148839,148840,148844,148845", "拖尾"], [41, "146327", "传送特效"], [42, "179768,179769,179770,179771,179772,179773,179774,179777,179779,179780,179782,179783,179784,179786,179787,179788,179789,179792,179793,179794,179795,179797,179798,179800,179802,179804,179805,179806,179807,179808,179809,179812,179813,179814,179671,179672,179678,179680,179685,179686,179688,179689,179690,179703,179707,179709,179711,179716,179718,179719,179720,179721,179724,179725,179726,179730,179735,179737,179738,179740,179742,179748,179749,179751,179753,179754,179758,179761,179763,179766,179670,179675,179676,179682,179684,179691,179692,179693,179696,179697,179698,179699,179700,179702,179704,179706,179708,179710,179712,179713,179717,179722,179723,179729,179732,179734,179736,179739,179741,179743,179744,179745,179746,179747,179752,179759,179762,179765,179775,179776,179778,179781,179785,179790,179791,179796,179799,179801,179803,179810,179811,179673,179674,179677,179679,179681,179683,179687,179694,179695,179701,179705,179714,179715,179727,179728,179731,179733,179750,179755,179756,179757,179760,179764", "收集物icon"], [43, "20910,20915,20959,21008,21013,21006,141901,141896", "宝箱"], [44, "162013", "寻路特效"], [45, "27396", "目标点特效"], [46, "142750", "属性加点特效"], [47, "169725,169718,169720,169724,169719,169717", "Guide-Ion"], [48, "147010,151159,151184,151465,151795,151812,151835,151837,151886,151887,152166,152186,153511,153514,153512,156363,156952,176737", "宠物"], [49, "95623,108338,59832", "昼夜"], [50, "46298", "站立动画"], [51, "181992,181984,181990,181993,181982,181979,181994,181995,181981,181980,181983,181986,181996,181985,181989,181987,181988,181991", "宠物Icon"], [52, "137566,131832", "抽奖音效"], [53, "150691,101208,121734", "jump"]];
class AssetsConfig extends ConfigBase {
    constructor() {
        super(EXCELDATA$l);
    }
}

var foreign23 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    AssetsConfig: AssetsConfig
});

const EXCELDATA$k = [["ID", "Lv", "BlockingVolumeGuid", "TriggerGuid", "WorldUIGuid", "Des"], ["", "", "", "", "", ""], [1, 0, "3BF5751E", "04C75B00", "32BAE8AA", "1级以及上可进入"], [2, 50, "143D30C7", "1A891F24", "03F22219", "50级以及上可进入"], [3, 80, "230F37DB", "0A3B2669", "24DDACDE", "80级以及上可进入"], [4, 150, "05D43D85", "3081D2EF", "2BA7A00D", "150级以及上可进入"], [5, 200, "3FB96E1D", "09CE9A28", "06F7BEE7", "200级以及上可进入"]];
class BlockingVolumeConfig extends ConfigBase {
    constructor() {
        super(EXCELDATA$k);
    }
}

var foreign24 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    BlockingVolumeConfig: BlockingVolumeConfig
});

const EXCELDATA$j = [["id", "ClothType", "IsIAA", "ClothGuid"], ["", "", "", ""], [1, 6, 1, "137849"], [2, 6, 1, "141618"], [3, 6, 1, "142899"], [4, 6, 1, "142153"], [5, 6, 1, "142272"], [6, 6, 1, "142292"], [7, 6, 1, "141498"], [8, 6, 1, "143229"], [9, 6, 1, "142903"], [10, 6, 1, "142293"], [11, 6, 1, "142262"], [12, 6, 1, "142888"], [13, 6, 1, "142894"], [14, 6, 1, "142907"], [15, 6, 1, "142294"], [16, 6, 1, "142897"], [17, 6, 1, "143236"], [18, 6, 1, "181562", "兜帽男"], [19, 6, 1, "143400", "双马尾女"], [20, 6, 1, "142292", "男战士"], [21, 6, 1, "142272", "机甲少女"], [22, 6, 1, "142293", "男骑士"], [23, 6, 1, "142255", "纳米机甲女性"], [24, 6, 1, "219915", "赛博少年"], [25, 6, 1, "226379", "赛博少年"], [26, 6, 1, "219912", "赛博少女"], [27, 6, 1, "226386", "赛博少女"], [28, 6, 1, "266641", "一定锅少年"], [29, 6, 1, "267183", "求神少年"], [30, 6, 1, "264622", "一定锅少女"], [31, 6, 1, "266861", "求神少女"], [32, 6, 1, "142302", "宝石铠甲男"], [33, 6, 1, "142303", "铠甲男战士"], [34, 6, 1, "142396", "黑人男纳米机甲"], [35, 6, 1, "142397", "白人男纳米机甲"], [36, 6, 1, "142398", "白银骑士"], [37, 6, 1, "142906", "鹰战士"], [38, 6, 1, "142895", "战士"], [39, 6, 1, "142886", "毒液怪人"], [40, 6, 1, "142905", "蚁侠士"], [41, 6, 1, "142898", "最强队长"], [42, 6, 1, "142885", "超帅侠"], [43, 6, 1, "142900", "奇异战士"], [44, 6, 1, "142901", "闪电怪"], [45, 6, 1, "142887", "恶灵骷髅"], [46, 6, 1, "142888", "铁人"], [47, 6, 1, "222475", "风衣女"], [48, 6, 1, "219916", "汉服少女"], [49, 6, 1, "266860", "时尚少女"], [50, 6, 1, "226382", "潮流少女"], [51, 6, 1, "222476", "古代书生"]];
class ClothesConfig extends ConfigBase {
    constructor() {
        super(EXCELDATA$j);
    }
}

var foreign25 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    ClothesConfig: ClothesConfig
});

const EXCELDATA$i = [["id", "jsons", "rightWeaponGuid", "leftWeaponGuid", "hitAnimation", "hitEffect", "hitDamage", "IsIAA", "WeaponName", "StandbyAnimation"], ["", "", "", "", "", "", "", "", "", ""], [1, "{\"charFightIdelAniId\":\"\",\"infos\":[{\"type\":\"1\",\"guid\":\"121650\",\"duration\":\"900\",\"hitLength\":\"300\",\"frontRockLength\":\"600\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"4\",\"guid\":\"12374\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"0\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0|0|0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"3\",\"guid\":\"\",\"duration\":\"200\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"200\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"50\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"2\",\"guid\":\"85152\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"350\",\"slotIndex\":\"-1\",\"stopTime\":\"400\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"180\",\"0\",\"0\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"50\",\"skillLength\":\"120\",\"skillWidth\":\"220\",\"moveSpeed\":\"300\"},{\"type\":\"1\",\"guid\":\"121652\",\"duration\":\"900\",\"hitLength\":\"300\",\"frontRockLength\":\"600\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"4\",\"guid\":\"12374\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"0\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0|0|0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"3\",\"guid\":\"\",\"duration\":\"200\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"200\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"50\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"2\",\"guid\":\"85152\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"250\",\"slotIndex\":\"-1\",\"stopTime\":\"400\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"-30\",\"0\",\"0\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"120\",\"skillLength\":\"120\",\"skillWidth\":\"160\",\"moveSpeed\":\"300\"},{\"type\":\"1\",\"guid\":\"121639\",\"duration\":\"1300\",\"hitLength\":\"600\",\"frontRockLength\":\"800\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"4\",\"guid\":\"12374\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"0\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0|0|0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"3\",\"guid\":\"\",\"duration\":\"180\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"80\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"2\",\"guid\":\"85152\",\"duration\":\"\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"350\",\"slotIndex\":\"-1\",\"stopTime\":\"600\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"90\",\"0\",\"0\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"300\",\"skillLength\":\"120\",\"skillWidth\":\"120\",\"moveSpeed\":\"300\"}]}", "118140", null, "121409", "117224", 10, 1, "悟空法杖", "117391"], [2, "{\n    \"charFightIdelAniId\": \"\",\n    \"infos\": [\n        {\n            \"type\": \"1\",\n            \"guid\": \"122486\",\n            \"duration\": \"550\",\n            \"hitLength\": \"400\",\n            \"frontRockLength\": \"700\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"4\",\n            \"guid\": \"47421\",\n            \"duration\": \"1000\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"400\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0|0|0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"2\",\n            \"guid\": \"84949\",\n            \"duration\": \"1000\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"400\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"700\",\n            \"offsetPos\": [\n                \"0\",\n                \"10\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"45\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"1\",\n                \"1\",\n                \"1\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"5\",\n            \"guid\": \"\",\n            \"duration\": \"1000\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"400\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"120\",\n            \"skillLength\": \"175\",\n            \"skillWidth\": \"170\",\n            \"moveSpeed\": \"300\"\n        }\n    ]\n}", "122953", null, "121409", "117224", 10, 1, "赛博斩刀", "117391"], [3, "{\"charFightIdelAniId\":\"\",\"infos\":[{\"type\":\"1\",\"guid\":\"85125\",\"duration\":\"600\",\"hitLength\":\"300\",\"frontRockLength\":\"400\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"4\",\"guid\":\"47870\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"0\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0|0|0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"3\",\"guid\":\"\",\"duration\":\"200\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"200\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"50\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"2\",\"guid\":\"84952\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"350\",\"slotIndex\":\"-1\",\"stopTime\":\"400\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"180\",\"30\",\"70\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"0\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"100\",\"skillLength\":\"120\",\"skillWidth\":\"220\",\"moveSpeed\":\"300\"},{\"type\":\"1\",\"guid\":\"20267\",\"duration\":\"600\",\"hitLength\":\"300\",\"frontRockLength\":\"400\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"4\",\"guid\":\"47870\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"0\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0|0|0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"3\",\"guid\":\"\",\"duration\":\"200\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"200\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"50\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"2\",\"guid\":\"84952\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"250\",\"slotIndex\":\"-1\",\"stopTime\":\"400\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"-90\",\"20\",\"0\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"0\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"150\",\"skillLength\":\"150\",\"skillWidth\":\"120\",\"moveSpeed\":\"300\"}]}", "103073", null, "121409", "117224", 10, 1, "黄金海王镰刀", "117391"], [4, "{\n    \"charFightIdelAniId\": \"\",\n    \"infos\": [\n        {\n            \"type\": \"1\",\n            \"guid\": \"121413\",\n            \"duration\": \"2000\",\n            \"hitLength\": \"500\",\n            \"frontRockLength\": \"500\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"600\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"0\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"2\",\n            \"guid\": \"224109\",\n            \"duration\": \"1000\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"300\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"400\",\n            \"offsetPos\": [\n                \"50\",\n                \"0\",\n                \"30\"\n            ],\n            \"offsetRotation\": [\n                \"180\",\n                \"0\",\n                \"90\"\n            ],\n            \"offsetScale\": [\n                \"1.5\",\n                \"1.5\",\n                \"1.5\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"5\",\n            \"guid\": \"\",\n            \"duration\": \"1000\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"100\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"80\",\n            \"skillLength\": \"700\",\n            \"skillWidth\": \"100\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"4\",\n            \"guid\": \"75351\",\n            \"duration\": \"\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"150\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"0\",\n            \"moveDir\": \"1\",\n            \"moveDistance\": \"\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0|0|0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"100\"\n        },\n        {\n            \"type\": \"1\",\n            \"guid\": \"121654\",\n            \"duration\": \"750\",\n            \"hitLength\": \"500\",\n            \"frontRockLength\": \"600\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"100\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"2\",\n            \"guid\": \"224109\",\n            \"duration\": \"1000\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"450\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"400\",\n            \"offsetPos\": [\n                \"90\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"180\",\n                \"0\",\n                \"90\"\n            ],\n            \"offsetScale\": [\n                \"1.2\",\n                \"1.2\",\n                \"1.2\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"4\",\n            \"guid\": \"75351\",\n            \"duration\": \"\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"300\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"0\",\n            \"moveDir\": \"1\",\n            \"moveDistance\": \"\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0|0|0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"100\"\n        },\n        {\n            \"type\": \"3\",\n            \"guid\": \"\",\n            \"duration\": \"200\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"300\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"0\",\n            \"moveDir\": \"1\",\n            \"moveDistance\": \"50\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"5\",\n            \"guid\": \"\",\n            \"duration\": \"1000\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"100\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"120\",\n            \"skillLength\": \"700\",\n            \"skillWidth\": \"100\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"1\",\n            \"guid\": \"121416\",\n            \"duration\": \"800\",\n            \"hitLength\": \"400\",\n            \"frontRockLength\": \"500\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"100\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"0\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"3\",\n            \"guid\": \"\",\n            \"duration\": \"80\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"200\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"0\",\n            \"moveDir\": \"1\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"2\",\n            \"guid\": \"224109\",\n            \"duration\": \"1000\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"450\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"400\",\n            \"offsetPos\": [\n                \"60\",\n                \"0\",\n                \"70\"\n            ],\n            \"offsetRotation\": [\n                \"180\",\n                \"0\",\n                \"90\"\n            ],\n            \"offsetScale\": [\n                \"1.35\",\n                \"1.35\",\n                \"1.35\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"4\",\n            \"guid\": \"75351\",\n            \"duration\": \"\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"300\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"0\",\n            \"moveDir\": \"1\",\n            \"moveDistance\": \"\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0|0|0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"5\",\n            \"guid\": \"\",\n            \"duration\": \"1000\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"100\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"200\",\n            \"skillLength\": \"700\",\n            \"skillWidth\": \"100\",\n            \"moveSpeed\": \"300\"\n        }\n    ]\n}", "122720", "122720", "121409", "135892", 10, 1, "激光炮", "117391"], [5, "{\"charFightIdelAniId\":\"117391\",\"infos\":[{\"type\":\"1\",\"guid\":\"117402\",\"duration\":\"500\",\"hitLength\":\"100\",\"frontRockLength\":\"300\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"108555\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"500\",\"offsetPos\":[\"80\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"1.5\",\"1.5\",\"1.5\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"60\",\"skillLength\":\"100\",\"skillWidth\":\"60\"},{\"type\":\"1\",\"guid\":\"117400\",\"duration\":\"500\",\"hitLength\":\"250\",\"frontRockLength\":\"300\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"108558\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"0\",\"slotIndex\":\"-1\",\"stopTime\":\"600\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"-130\",\"0\",\"0\"],\"offsetScale\":[\"1.5\",\"1.5\",\"1.5\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"80\",\"skillLength\":\"80\",\"skillWidth\":\"80\"},{\"type\":\"1\",\"guid\":\"108416\",\"duration\":\"1800\",\"hitLength\":\"500\",\"frontRockLength\":\"800\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"108556\",\"duration\":\"\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"500\",\"slotIndex\":\"-1\",\"stopTime\":\"600\",\"offsetPos\":[\"80\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"-90\"],\"offsetScale\":[\"1.5\",\"1.5\",\"1.5\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"3\",\"guid\":\"\",\"duration\":\"50\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"450\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"50\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"60\",\"skillLength\":\"130\",\"skillWidth\":\"60\"},{\"type\":\"1\",\"guid\":\"108417\",\"duration\":\"1100\",\"hitLength\":\"550\",\"frontRockLength\":\"800\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"85166\",\"duration\":\"\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"300\",\"slotIndex\":\"-1\",\"stopTime\":\"600\",\"offsetPos\":[\"100\",\"0\",\"-50\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"A8FF8AFF\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"85166\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"450\",\"slotIndex\":\"-1\",\"stopTime\":\"600\",\"offsetPos\":[\"80\",\"0\",\"60\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"A8FF8AFF\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"30\",\"skillRadius\":\"0\",\"skillHeight\":\"120\",\"skillLength\":\"140\",\"skillWidth\":\"120\"},{\"type\":\"1\",\"guid\":\"108418\",\"duration\":\"2300\",\"hitLength\":\"700\",\"frontRockLength\":\"1000\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"108557\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"500\",\"slotIndex\":\"-1\",\"stopTime\":\"1200\",\"offsetPos\":[\"30\",\"0\",\"-80\"],\"offsetRotation\":[\"0\",\"0\",\"-90\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"108557\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"550\",\"slotIndex\":\"-1\",\"stopTime\":\"1200\",\"offsetPos\":[\"30\",\"0\",\"-80\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"108557\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"600\",\"slotIndex\":\"-1\",\"stopTime\":\"1200\",\"offsetPos\":[\"30\",\"0\",\"-80\"],\"offsetRotation\":[\"0\",\"0\",\"90\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"108557\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"650\",\"slotIndex\":\"-1\",\"stopTime\":\"1200\",\"offsetPos\":[\"30\",\"0\",\"-80\"],\"offsetRotation\":[\"0\",\"0\",\"180\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"123626\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"500\",\"slotIndex\":\"-1\",\"stopTime\":\"1500\",\"offsetPos\":[\"0\",\"0\",\"-70\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"450\",\"skillLength\":\"500\",\"skillWidth\":\"120\"}]}", "122716", "122716", "121409", "27421", 10, 1, "天神枪", "117391"], [6, "{\"charFightIdelAniId\":\"\",\"infos\":[{\"type\":\"1\",\"guid\":\"121652\",\"duration\":\"900\",\"hitLength\":\"300\",\"frontRockLength\":\"600\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"3\",\"guid\":\"\",\"duration\":\"200\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"200\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"50\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"2\",\"guid\":\"126922\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"250\",\"slotIndex\":\"-1\",\"stopTime\":\"400\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"-30\",\"0\",\"0\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"120\",\"skillLength\":\"120\",\"skillWidth\":\"160\",\"moveSpeed\":\"300\"},{\"type\":\"4\",\"guid\":\"47870\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"0\",\"slotIndex\":\"-1\",\"stopTime\":\"0\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"0\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0|0|0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"100\"},{\"type\":\"4\",\"guid\":\"145579\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"150\",\"slotIndex\":\"-1\",\"stopTime\":\"0\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"0\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0|0|0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"100\"},{\"type\":\"1\",\"guid\":\"121639\",\"duration\":\"1300\",\"hitLength\":\"600\",\"frontRockLength\":\"800\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"3\",\"guid\":\"\",\"duration\":\"180\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"80\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"300\",\"skillLength\":\"500\",\"skillWidth\":\"120\",\"moveSpeed\":\"300\"},{\"type\":\"2\",\"guid\":\"126922\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"350\",\"slotIndex\":\"-1\",\"stopTime\":\"400\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"90\",\"0\",\"0\"],\"offsetScale\":[\"1.2\",\"1.2\",\"1.2\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"2\",\"guid\":\"135892\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"450\",\"slotIndex\":\"-1\",\"stopTime\":\"600\",\"offsetPos\":[\"120\",\"0\",\"-85\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"2\",\"guid\":\"135892\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"500\",\"slotIndex\":\"-1\",\"stopTime\":\"600\",\"offsetPos\":[\"240\",\"0\",\"-85\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"2\",\"guid\":\"135892\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"550\",\"slotIndex\":\"-1\",\"stopTime\":\"600\",\"offsetPos\":[\"360\",\"0\",\"-85\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"2\",\"guid\":\"135892\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"600\",\"slotIndex\":\"-1\",\"stopTime\":\"600\",\"offsetPos\":[\"480\",\"0\",\"-85\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"1\",\"guid\":\"121644\",\"duration\":\"1300\",\"hitLength\":\"400\",\"frontRockLength\":\"800\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"4\",\"guid\":\"75351\",\"duration\":\"\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"0\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"0\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0|0|0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"100\"},{\"type\":\"2\",\"guid\":\"135891\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"300\",\"slotIndex\":\"-1\",\"stopTime\":\"800\",\"offsetPos\":[\"120\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"-90\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"200\",\"skillLength\":\"300\",\"skillWidth\":\"200\",\"moveSpeed\":\"300\"}]}", "118147", "118147", "121409", "135892", 10, 1, "假雷神之锤", "121658"], [7, "{\"charFightIdelAniId\":\"\",\"infos\":[{\"type\":\"1\",\"guid\":\"121647\",\"duration\":\"800\",\"hitLength\":\"300\",\"frontRockLength\":\"500\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"2\",\"guid\":\"124432\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"230\",\"slotIndex\":\"-1\",\"stopTime\":\"500\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"-10\",\"-120\"],\"offsetScale\":[\"0.8\",\"0.8\",\"0.8\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"10\",\"skillLength\":\"150\",\"skillWidth\":\"160\",\"moveSpeed\":\"300\"},{\"type\":\"4\",\"guid\":\"47870\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"0\",\"slotIndex\":\"-1\",\"stopTime\":\"0\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"0\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0|0|0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"100\"},{\"type\":\"1\",\"guid\":\"121641\",\"duration\":\"600\",\"hitLength\":\"300\",\"frontRockLength\":\"500\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"2\",\"guid\":\"124433\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"1200\",\"offsetPos\":[\"-30\",\"0\",\"-20\"],\"offsetRotation\":[\"240\",\"-45\",\"-278\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"150\",\"skillLength\":\"160\",\"skillWidth\":\"140\",\"moveSpeed\":\"300\"},{\"type\":\"4\",\"guid\":\"75372\",\"duration\":\"\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"0\",\"slotIndex\":\"-1\",\"stopTime\":\"0\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"0\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0|0|0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"100\"},{\"type\":\"1\",\"guid\":\"121597\",\"duration\":\"2300\",\"hitLength\":\"1000\",\"frontRockLength\":\"1800\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"3\",\"guid\":\"\",\"duration\":\"300\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"300\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"200\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"2\",\"guid\":\"124434\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"900\",\"slotIndex\":\"-1\",\"stopTime\":\"2000\",\"offsetPos\":[\"50\",\"0\",\"-80\"],\"offsetRotation\":[\"0\",\"0\",\"-90\"],\"offsetScale\":[\"0.8\",\"0.8\",\"0.8\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"0\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0|0|0\",\"skillRadius\":\"0\",\"skillHeight\":\"150\",\"skillLength\":\"800\",\"skillWidth\":\"140\",\"moveSpeed\":\"300\"},{\"type\":\"4\",\"guid\":\"122569\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"700\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0|0|0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"}]}", "142965", "142965", "121409", "117224", 10, 1, "毒液刺", "121648"], [8, "{\"charFightIdelAniId\":\"\",\"infos\":[{\"type\":\"1\",\"guid\":\"121592\",\"duration\":\"750\",\"hitLength\":\"450\",\"frontRockLength\":\"500\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"2\",\"guid\":\"126922\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"400\",\"slotIndex\":\"-1\",\"stopTime\":\"400\",\"offsetPos\":[\"50\",\"0\",\"0\"],\"offsetRotation\":[\"160\",\"0\",\"0\"],\"offsetScale\":[\"1.2\",\"1.2\",\"1.2\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"4\",\"guid\":\"12374\",\"duration\":\"\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"0\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0|0|0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"100\"},{\"type\":\"3\",\"guid\":\"\",\"duration\":\"200\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"300\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"50\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"120\",\"skillLength\":\"200\",\"skillWidth\":\"200\",\"moveSpeed\":\"300\"},{\"type\":\"1\",\"guid\":\"121600\",\"duration\":\"800\",\"hitLength\":\"150\",\"frontRockLength\":\"250\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"3\",\"guid\":\"\",\"duration\":\"80\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"200\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"2\",\"guid\":\"126922\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"300\",\"slotIndex\":\"-1\",\"stopTime\":\"400\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"30\",\"0\",\"0\"],\"offsetScale\":[\"1.35\",\"1.35\",\"1.35\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"4\",\"guid\":\"12374\",\"duration\":\"\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"0\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0|0|0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"200\",\"skillLength\":\"250\",\"skillWidth\":\"200\",\"moveSpeed\":\"300\"},{\"type\":\"1\",\"guid\":\"121599\",\"duration\":\"800\",\"hitLength\":\"250\",\"frontRockLength\":\"300\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"600\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"2\",\"guid\":\"126922\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"300\",\"slotIndex\":\"-1\",\"stopTime\":\"400\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"180\",\"0\",\"0\"],\"offsetScale\":[\"1.5\",\"1.5\",\"1.5\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"4\",\"guid\":\"12374\",\"duration\":\"\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"0\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0|0|0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"100\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"80\",\"skillLength\":\"200\",\"skillWidth\":\"300\",\"moveSpeed\":\"300\"}]}", "168953", "168953", "121409", "89089", 10, 1, "灭霸法球", "117391"], [9, "{\"charFightIdelAniId\":\"121557\",\"infos\":[{\"type\":\"1\",\"guid\":\"121575\",\"duration\":\"900\",\"hitLength\":\"500\",\"frontRockLength\":\"600\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"135890\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"450\",\"slotIndex\":\"-1\",\"stopTime\":\"400\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"160\",\"10\",\"20\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"30\",\"skillRadius\":\"0\",\"skillHeight\":\"120\",\"skillLength\":\"100\",\"skillWidth\":\"200\"},{\"type\":\"1\",\"guid\":\"121574\",\"duration\":\"800\",\"hitLength\":\"400\",\"frontRockLength\":\"500\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"600\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"3\",\"guid\":\"\",\"duration\":\"100\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"200\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"50\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"135890\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"300\",\"slotIndex\":\"-1\",\"stopTime\":\"400\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"30\",\"skillRadius\":\"0\",\"skillHeight\":\"120\",\"skillLength\":\"100\",\"skillWidth\":\"200\"},{\"type\":\"1\",\"guid\":\"121573\",\"duration\":\"800\",\"hitLength\":\"400\",\"frontRockLength\":\"500\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"3\",\"guid\":\"\",\"duration\":\"150\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"200\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"135890\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"300\",\"slotIndex\":\"-1\",\"stopTime\":\"400\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"130\",\"0\",\"0\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"30\",\"skillRadius\":\"0\",\"skillHeight\":\"120\",\"skillLength\":\"80\",\"skillWidth\":\"200\"},{\"type\":\"1\",\"guid\":\"121572\",\"duration\":\"1200\",\"hitLength\":\"350\",\"frontRockLength\":\"600\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"135889\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"300\",\"slotIndex\":\"-1\",\"stopTime\":\"1200\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"-150\",\"skillRadius\":\"0\",\"skillHeight\":\"100\",\"skillLength\":\"300\",\"skillWidth\":\"300\"},{\"type\":\"1\",\"guid\":\"121571\",\"duration\":\"1500\",\"hitLength\":\"500\",\"frontRockLength\":\"800\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"3\",\"guid\":\"\",\"duration\":\"200\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"320\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"160\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"135894\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"500\",\"slotIndex\":\"-1\",\"stopTime\":\"800\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"-90\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"200\",\"skillLength\":\"450\",\"skillWidth\":\"200\"}]}", "116457", "116457", "121409", "135892", 10, 1, "螺旋丸", "121557"], [10, "{\"charFightIdelAniId\":\"\",\"infos\":[{\"type\":\"1\",\"guid\":\"117371\",\"duration\":\"500\",\"hitLength\":\"100\",\"frontRockLength\":\"300\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"2\",\"guid\":\"123288\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"500\",\"offsetPos\":[\"30\",\"0\",\"-30\"],\"offsetRotation\":[\"0\",\"-20\",\"-90\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"\",\"skillAngle\":\"45\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"60\",\"skillLength\":\"180\",\"skillWidth\":\"240\",\"moveSpeed\":\"300\"},{\"type\":\"4\",\"guid\":\"135750\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"0\",\"slotIndex\":\"-1\",\"stopTime\":\"0\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0|0|0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"1\",\"guid\":\"117366\",\"duration\":\"1000\",\"hitLength\":\"300\",\"frontRockLength\":\"500\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"3\",\"guid\":\"\",\"duration\":\"100\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"200\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"80\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"2\",\"guid\":\"123288\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"400\",\"slotIndex\":\"-1\",\"stopTime\":\"500\",\"offsetPos\":[\"30\",\"0\",\"15\"],\"offsetRotation\":[\"187\",\"20\",\"110\"],\"offsetScale\":[\"1.2\",\"1.2\",\"1.2\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"40\",\"skillRadius\":\"0\",\"skillHeight\":\"120\",\"skillLength\":\"180\",\"skillWidth\":\"240\",\"moveSpeed\":\"300\"},{\"type\":\"4\",\"guid\":\"135750\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"300\",\"slotIndex\":\"-1\",\"stopTime\":\"0\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0|0|0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"1\",\"guid\":\"117375\",\"duration\":\"1300\",\"hitLength\":\"300\",\"frontRockLength\":\"500\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"3\",\"guid\":\"\",\"duration\":\"50\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"20\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"2\",\"guid\":\"123288\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"150\",\"slotIndex\":\"-1\",\"stopTime\":\"400\",\"offsetPos\":[\"30\",\"0\",\"15\"],\"offsetRotation\":[\"-15\",\"27\",\"-122\"],\"offsetScale\":[\"1.25\",\"1.25\",\"1.25\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"200\",\"skillLength\":\"180\",\"skillWidth\":\"240\",\"moveSpeed\":\"300\"},{\"type\":\"4\",\"guid\":\"135750\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"0\",\"slotIndex\":\"-1\",\"stopTime\":\"0\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0|0|0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"1\",\"guid\":\"117376\",\"duration\":\"1500\",\"hitLength\":\"600\",\"frontRockLength\":\"850\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"3\",\"guid\":\"\",\"duration\":\"200\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"80\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"2\",\"guid\":\"123286\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"400\",\"slotIndex\":\"-1\",\"stopTime\":\"500\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"-180\",\"15\",\"-270\"],\"offsetScale\":[\"1.5\",\"1.5\",\"1.5\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"2\",\"guid\":\"123286\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"600\",\"slotIndex\":\"-1\",\"stopTime\":\"800\",\"offsetPos\":[\"30\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"-90\"],\"offsetScale\":[\"1.6\",\"1.6\",\"1.6\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"4\",\"guid\":\"135750\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"400\",\"slotIndex\":\"-1\",\"stopTime\":\"0\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0|0|0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"4\",\"guid\":\"135750\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"150\",\"slotIndex\":\"-1\",\"stopTime\":\"0\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0|0|0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"120\",\"skillLength\":\"250\",\"skillWidth\":\"400\",\"moveSpeed\":\"300\"},{\"type\":\"3\",\"guid\":\"\",\"duration\":\"200\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"150\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"}]}", "31179", "31179", "121409", "135892", 10, 1, "双剑华斩", "117403"], [11, "{\"charFightIdelAniId\":\"\",\"infos\":[{\"type\":\"1\",\"guid\":\"111103\",\"duration\":\"700\",\"hitLength\":\"300\",\"frontRockLength\":\"500\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"3\",\"guid\":\"\",\"duration\":\"50\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"0\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"30\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"4\",\"guid\":\"12374\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"0\",\"slotIndex\":\"-1\",\"stopTime\":\"0\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"0\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0|0|0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"100\"},{\"type\":\"2\",\"guid\":\"105325\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"220\",\"slotIndex\":\"-1\",\"stopTime\":\"400\",\"offsetPos\":[\"30\",\"0\",\"0\"],\"offsetRotation\":[\"150\",\"12\",\"20\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"88E5FFFF\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"4\",\"guid\":\"12374\",\"duration\":\"\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"0\",\"slotIndex\":\"-1\",\"stopTime\":\"0\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"0\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0|0|0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"100\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"80\",\"skillLength\":\"110\",\"skillWidth\":\"120\",\"moveSpeed\":\"300\"},{\"type\":\"1\",\"guid\":\"111101\",\"duration\":\"1300\",\"hitLength\":\"300\",\"frontRockLength\":\"400\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"4\",\"guid\":\"12374\",\"duration\":\"\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"0\",\"slotIndex\":\"-1\",\"stopTime\":\"0\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"0\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0|0|0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"100\"},{\"type\":\"3\",\"guid\":\"\",\"duration\":\"100\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"200\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"60\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"-80\",\"skillRadius\":\"0\",\"skillHeight\":\"250\",\"skillLength\":\"260\",\"skillWidth\":\"20\",\"moveSpeed\":\"300\"},{\"type\":\"2\",\"guid\":\"105325\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"250\",\"slotIndex\":\"-1\",\"stopTime\":\"500\",\"offsetPos\":[\"20\",\"0\",\"0\"],\"offsetRotation\":[\"-107\",\"55\",\"-14\"],\"offsetScale\":[\"1.1\",\"1.1\",\"1.1\"],\"colorHex\":\"88E5FFFF\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"2\",\"guid\":\"105325\",\"duration\":\"\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"350\",\"slotIndex\":\"-1\",\"stopTime\":\"500\",\"offsetPos\":[\"20\",\"20\",\"0\"],\"offsetRotation\":[\"-254\",\"44\",\"-168\"],\"offsetScale\":[\"1.3\",\"1.3\",\"1.3\"],\"colorHex\":\"88E5FFFF\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"2\",\"guid\":\"105325\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"450\",\"slotIndex\":\"-1\",\"stopTime\":\"400\",\"offsetPos\":[\"20\",\"-30\",\"0\"],\"offsetRotation\":[\"-249\",\"-56\",\"-196\"],\"offsetScale\":[\"1.15\",\"1.15\",\"1.15\"],\"colorHex\":\"88E5FFFF\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"2\",\"guid\":\"105325\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"480\",\"slotIndex\":\"-1\",\"stopTime\":\"100\",\"offsetPos\":[\"20\",\"20\",\"0\"],\"offsetRotation\":[\"-101\",\"-17\",\"-355\"],\"offsetScale\":[\"1.2\",\"1.2\",\"1.2\"],\"colorHex\":\"88E5FFFF\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"2\",\"guid\":\"105325\",\"duration\":\"\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"500\",\"slotIndex\":\"-1\",\"stopTime\":\"500\",\"offsetPos\":[\"30\",\"0\",\"0\"],\"offsetRotation\":[\"-101\",\"-8\",\"-358\"],\"offsetScale\":[\"1.5\",\"1.5\",\"1.5\"],\"colorHex\":\"88E5FFFF\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"1\",\"guid\":\"111093\",\"duration\":\"1700\",\"hitLength\":\"500\",\"frontRockLength\":\"800\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"3\",\"guid\":\"\",\"duration\":\"300\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"300\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"2\",\"guid\":\"116459\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"600\",\"slotIndex\":\"-1\",\"stopTime\":\"1200\",\"offsetPos\":[\"0\",\"0\",\"-60\"],\"offsetRotation\":[\"0\",\"0\",\"-180\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"88E5FFFF\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"4\",\"guid\":\"12374\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"350\",\"slotIndex\":\"-1\",\"stopTime\":\"0\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0|0|0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"}]}", "118148", null, "121409", "27422", 10, 1, "洛基法杖", "117391"], [12, "{\n    \"charFightIdelAniId\": \"117380\",\n    \"infos\": [\n        {\n            \"type\": \"1\",\n            \"guid\": \"117399\",\n            \"duration\": \"1200\",\n            \"hitLength\": \"300\",\n            \"frontRockLength\": \"500\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"100\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\"\n        },\n        {\n            \"type\": \"2\",\n            \"guid\": \"120066\",\n            \"duration\": \"1000\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"150\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"500\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"1\",\n                \"1\",\n                \"1\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\"\n        },\n        {\n            \"type\": \"3\",\n            \"guid\": \"\",\n            \"duration\": \"50\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"200\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"0\",\n            \"moveDir\": \"1\",\n            \"moveDistance\": \"50\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\"\n        },\n        {\n            \"type\": \"5\",\n            \"guid\": \"\",\n            \"duration\": \"\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"300\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"0\",\n            \"moveDir\": \"1\",\n            \"moveDistance\": \"\",\n            \"skillAngle\": \"45\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"60\",\n            \"skillLength\": \"180\",\n            \"skillWidth\": \"240\"\n        },\n        {\n            \"type\": \"1\",\n            \"guid\": \"117398\",\n            \"duration\": \"1400\",\n            \"hitLength\": \"300\",\n            \"frontRockLength\": \"600\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"100\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\"\n        },\n        {\n            \"type\": \"2\",\n            \"guid\": \"120066\",\n            \"duration\": \"1000\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"150\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"500\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"160\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"1\",\n                \"1\",\n                \"1\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\"\n        },\n        {\n            \"type\": \"3\",\n            \"guid\": \"\",\n            \"duration\": \"50\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"100\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"0\",\n            \"moveDir\": \"1\",\n            \"moveDistance\": \"50\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\"\n        },\n        {\n            \"type\": \"5\",\n            \"guid\": \"\",\n            \"duration\": \"1000\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"300\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"40\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"120\",\n            \"skillLength\": \"180\",\n            \"skillWidth\": \"240\"\n        },\n        {\n            \"type\": \"1\",\n            \"guid\": \"117397\",\n            \"duration\": \"2100\",\n            \"hitLength\": \"300\",\n            \"frontRockLength\": \"800\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"100\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\"\n        },\n        {\n            \"type\": \"3\",\n            \"guid\": \"\",\n            \"duration\": \"500\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"150\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"0\",\n            \"moveDir\": \"1\",\n            \"moveDistance\": \"300\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\"\n        },\n        {\n            \"type\": \"2\",\n            \"guid\": \"120063\",\n            \"duration\": \"1000\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"150\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"600\",\n            \"offsetPos\": [\n                \"120\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"-90\"\n            ],\n            \"offsetScale\": [\n                \"1\",\n                \"1\",\n                \"1\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\"\n        },\n        {\n            \"type\": \"2\",\n            \"guid\": \"120062\",\n            \"duration\": \"1000\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"350\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"800\",\n            \"offsetPos\": [\n                \"200\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"1.3\",\n                \"1.3\",\n                \"1.3\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\"\n        },\n        {\n            \"type\": \"5\",\n            \"guid\": \"\",\n            \"duration\": \"1000\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"300\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"250\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"200\",\n            \"skillLength\": \"180\",\n            \"skillWidth\": \"240\"\n        },\n        {\n            \"type\": \"1\",\n            \"guid\": \"117396\",\n            \"duration\": \"2000\",\n            \"hitLength\": \"500\",\n            \"frontRockLength\": \"1200\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"100\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\"\n        },\n        {\n            \"type\": \"2\",\n            \"guid\": \"120065\",\n            \"duration\": \"1000\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"300\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"1800\",\n            \"offsetPos\": [\n                \"60\",\n                \"0\",\n                \"100\"\n            ],\n            \"offsetRotation\": [\n                \"90\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"1\",\n                \"1\",\n                \"1\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\"\n        },\n        {\n            \"type\": \"3\",\n            \"guid\": \"\",\n            \"duration\": \"300\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"100\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"0\",\n            \"moveDir\": \"1\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\"\n        },\n        {\n            \"type\": \"5\",\n            \"guid\": \"\",\n            \"duration\": \"1000\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"500\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"-150\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"200\",\n            \"skillLength\": \"300\",\n            \"skillWidth\": \"100\"\n        },\n        {\n            \"type\": \"1\",\n            \"guid\": \"117394\",\n            \"duration\": \"1600\",\n            \"hitLength\": \"300\",\n            \"frontRockLength\": \"500\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"100\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\"\n        },\n        {\n            \"type\": \"3\",\n            \"guid\": \"\",\n            \"duration\": \"200\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"100\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"0\",\n            \"moveDir\": \"1\",\n            \"moveDistance\": \"150\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\"\n        },\n        {\n            \"type\": \"2\",\n            \"guid\": \"120064\",\n            \"duration\": \"1000\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"100\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"1600\",\n            \"offsetPos\": [\n                \"120\",\n                \"0\",\n                \"-50\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"-90\"\n            ],\n            \"offsetScale\": [\n                \"1\",\n                \"1\",\n                \"1\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\"\n        },\n        {\n            \"type\": \"5\",\n            \"guid\": \"\",\n            \"duration\": \"1000\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"300\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"50\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"200\",\n            \"skillLength\": \"200\",\n            \"skillWidth\": \"200\"\n        }\n    ]\n}", "103061", null, "121409", "31122", 10, 1, "太阳神突刺斩", "117391"], [13, "{\"charFightIdelAniId\":\"117403\",\"infos\":[{\"type\":\"1\",\"guid\":\"117371\",\"duration\":\"500\",\"hitLength\":\"100\",\"frontRockLength\":\"300\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"123288\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"500\",\"offsetPos\":[\"30\",\"0\",\"-30\"],\"offsetRotation\":[\"0\",\"-20\",\"-90\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"\",\"skillAngle\":\"45\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"60\",\"skillLength\":\"180\",\"skillWidth\":\"240\"},{\"type\":\"1\",\"guid\":\"117366\",\"duration\":\"1000\",\"hitLength\":\"300\",\"frontRockLength\":\"500\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"3\",\"guid\":\"\",\"duration\":\"100\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"200\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"120\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"123288\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"400\",\"slotIndex\":\"-1\",\"stopTime\":\"500\",\"offsetPos\":[\"30\",\"0\",\"15\"],\"offsetRotation\":[\"187\",\"20\",\"110\"],\"offsetScale\":[\"1.2\",\"1.2\",\"1.2\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"40\",\"skillRadius\":\"0\",\"skillHeight\":\"120\",\"skillLength\":\"180\",\"skillWidth\":\"240\"},{\"type\":\"1\",\"guid\":\"117375\",\"duration\":\"1300\",\"hitLength\":\"300\",\"frontRockLength\":\"500\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"3\",\"guid\":\"\",\"duration\":\"50\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"20\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"123288\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"150\",\"slotIndex\":\"-1\",\"stopTime\":\"400\",\"offsetPos\":[\"30\",\"0\",\"15\"],\"offsetRotation\":[\"-15\",\"27\",\"-122\"],\"offsetScale\":[\"1.25\",\"1.25\",\"1.25\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"200\",\"skillLength\":\"180\",\"skillWidth\":\"240\"},{\"type\":\"1\",\"guid\":\"117376\",\"duration\":\"1500\",\"hitLength\":\"600\",\"frontRockLength\":\"850\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"3\",\"guid\":\"\",\"duration\":\"200\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"200\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"123286\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"400\",\"slotIndex\":\"-1\",\"stopTime\":\"500\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"-180\",\"15\",\"-270\"],\"offsetScale\":[\"1.5\",\"1.5\",\"1.5\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"123286\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"600\",\"slotIndex\":\"-1\",\"stopTime\":\"800\",\"offsetPos\":[\"30\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"-90\"],\"offsetScale\":[\"1.6\",\"1.6\",\"1.6\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"120\",\"skillLength\":\"250\",\"skillWidth\":\"400\"},{\"type\":\"1\",\"guid\":\"117382\",\"duration\":\"1800\",\"hitLength\":\"500\",\"frontRockLength\":\"1300\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"3\",\"guid\":\"\",\"duration\":\"200\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"150\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"300\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"123289\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"250\",\"slotIndex\":\"-1\",\"stopTime\":\"600\",\"offsetPos\":[\"280\",\"0\",\"-40\"],\"offsetRotation\":[\"0\",\"0\",\"-90\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"123287\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"300\",\"slotIndex\":\"-1\",\"stopTime\":\"2500\",\"offsetPos\":[\"180\",\"0\",\"-80\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"360\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"320\",\"skillHeight\":\"230\",\"skillLength\":\"0\",\"skillWidth\":\"0\"}]}", "122956", "122956", "121409", "27421", 10, 1, "死神斑爷剑", "117403"], [14, "{\"charFightIdelAniId\":\"111095\",\"infos\":[{\"type\":\"1\",\"guid\":\"111103\",\"duration\":\"700\",\"hitLength\":\"300\",\"frontRockLength\":\"500\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"3\",\"guid\":\"\",\"duration\":\"50\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"0\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"30\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"105325\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"220\",\"slotIndex\":\"-1\",\"stopTime\":\"400\",\"offsetPos\":[\"30\",\"0\",\"0\"],\"offsetRotation\":[\"150\",\"12\",\"20\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"88E5FFFF\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"80\",\"skillLength\":\"110\",\"skillWidth\":\"120\"},{\"type\":\"1\",\"guid\":\"111102\",\"duration\":\"600\",\"hitLength\":\"200\",\"frontRockLength\":\"300\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"80\",\"skillLength\":\"110\",\"skillWidth\":\"120\"},{\"type\":\"2\",\"guid\":\"105325\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"220\",\"slotIndex\":\"-1\",\"stopTime\":\"400\",\"offsetPos\":[\"20\",\"0\",\"0\"],\"offsetRotation\":[\"-15\",\"0\",\"0\"],\"offsetScale\":[\"1.3\",\"1.3\",\"1.3\"],\"colorHex\":\"88E5FFFF\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"1\",\"guid\":\"111101\",\"duration\":\"1300\",\"hitLength\":\"300\",\"frontRockLength\":\"400\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"3\",\"guid\":\"\",\"duration\":\"100\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"200\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"60\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"-80\",\"skillRadius\":\"0\",\"skillHeight\":\"250\",\"skillLength\":\"260\",\"skillWidth\":\"20\"},{\"type\":\"2\",\"guid\":\"105325\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"250\",\"slotIndex\":\"-1\",\"stopTime\":\"500\",\"offsetPos\":[\"20\",\"0\",\"0\"],\"offsetRotation\":[\"-107\",\"55\",\"-14\"],\"offsetScale\":[\"1.1\",\"1.1\",\"1.1\"],\"colorHex\":\"88E5FFFF\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"105325\",\"duration\":\"\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"350\",\"slotIndex\":\"-1\",\"stopTime\":\"500\",\"offsetPos\":[\"20\",\"20\",\"0\"],\"offsetRotation\":[\"-254\",\"44\",\"-168\"],\"offsetScale\":[\"1.3\",\"1.3\",\"1.3\"],\"colorHex\":\"88E5FFFF\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"105325\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"450\",\"slotIndex\":\"-1\",\"stopTime\":\"400\",\"offsetPos\":[\"20\",\"-30\",\"0\"],\"offsetRotation\":[\"-249\",\"-56\",\"-196\"],\"offsetScale\":[\"1.15\",\"1.15\",\"1.15\"],\"colorHex\":\"88E5FFFF\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"105325\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"480\",\"slotIndex\":\"-1\",\"stopTime\":\"100\",\"offsetPos\":[\"20\",\"20\",\"0\"],\"offsetRotation\":[\"-101\",\"-17\",\"-355\"],\"offsetScale\":[\"1.2\",\"1.2\",\"1.2\"],\"colorHex\":\"88E5FFFF\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"105325\",\"duration\":\"\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"500\",\"slotIndex\":\"-1\",\"stopTime\":\"500\",\"offsetPos\":[\"30\",\"0\",\"0\"],\"offsetRotation\":[\"-101\",\"-8\",\"-358\"],\"offsetScale\":[\"1.5\",\"1.5\",\"1.5\"],\"colorHex\":\"88E5FFFF\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"1\",\"guid\":\"111100\",\"duration\":\"1100\",\"hitLength\":\"300\",\"frontRockLength\":\"800\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"116455\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"300\",\"slotIndex\":\"-1\",\"stopTime\":\"600\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"-90\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"88E5FFFF\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"3\",\"guid\":\"\",\"duration\":\"300\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"200\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"50\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"1\",\"guid\":\"111093\",\"duration\":\"1700\",\"hitLength\":\"500\",\"frontRockLength\":\"800\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"3\",\"guid\":\"\",\"duration\":\"300\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"300\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"116459\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"600\",\"slotIndex\":\"-1\",\"stopTime\":\"1200\",\"offsetPos\":[\"0\",\"0\",\"-60\"],\"offsetRotation\":[\"0\",\"0\",\"-180\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"88E5FFFF\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"}]}", "122949", null, "121409", "27422", 10, 1, "纳米机甲剑", "111095"], [15, "{\"charFightIdelAniId\":\"121951\",\"infos\":[{\"type\":\"1\",\"guid\":\"121959\",\"duration\":\"800\",\"hitLength\":\"380\",\"frontRockLength\":\"400\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"2\",\"guid\":\"105195\",\"duration\":\"\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"200\",\"slotIndex\":\"-1\",\"stopTime\":\"800\",\"offsetPos\":[\"10\",\"0\",\"0\"],\"offsetRotation\":[\"40\",\"0\",\"0\"],\"offsetScale\":[\"0.8\",\"0.8\",\"0.8\"],\"colorHex\":\"BFFF5AFF\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"3\",\"guid\":\"\",\"duration\":\"200\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"50\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"30\",\"skillRadius\":\"0\",\"skillHeight\":\"120\",\"skillLength\":\"130\",\"skillWidth\":\"130\",\"moveSpeed\":\"300\"},{\"type\":\"4\",\"guid\":\"135750\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"0\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0|0|0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"1\",\"guid\":\"121966\",\"duration\":\"800\",\"hitLength\":\"400\",\"frontRockLength\":\"600\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"2\",\"guid\":\"105195\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"200\",\"slotIndex\":\"-1\",\"stopTime\":\"800\",\"offsetPos\":[\"60\",\"0\",\"0\"],\"offsetRotation\":[\"150\",\"0\",\"0\"],\"offsetScale\":[\"0.8\",\"0.8\",\"0.8\"],\"colorHex\":\"BFFF5AFF\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"30\",\"skillRadius\":\"0\",\"skillHeight\":\"120\",\"skillLength\":\"120\",\"skillWidth\":\"130\",\"moveSpeed\":\"300\"},{\"type\":\"3\",\"guid\":\"\",\"duration\":\"200\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"200\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"50\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"4\",\"guid\":\"135750\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"180\",\"slotIndex\":\"-1\",\"stopTime\":\"0\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0|0|0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"1\",\"guid\":\"121965\",\"duration\":\"900\",\"hitLength\":\"300\",\"frontRockLength\":\"500\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"2\",\"guid\":\"105195\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"50\",\"slotIndex\":\"-1\",\"stopTime\":\"800\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"50\",\"0\",\"0\"],\"offsetScale\":[\"0.9\",\"0.9\",\"0.9\"],\"colorHex\":\"BFFF5AFF\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"2\",\"guid\":\"105195\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"50\",\"slotIndex\":\"-1\",\"stopTime\":\"500\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"150\",\"0\",\"0\"],\"offsetScale\":[\"1.2\",\"1.2\",\"1.2\"],\"colorHex\":\"A6FF39FF\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"30\",\"skillRadius\":\"0\",\"skillHeight\":\"200\",\"skillLength\":\"150\",\"skillWidth\":\"200\",\"moveSpeed\":\"300\"},{\"type\":\"4\",\"guid\":\"135750\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"0\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0|0|0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"1\",\"guid\":\"121963\",\"duration\":\"1000\",\"hitLength\":\"450\",\"frontRockLength\":\"600\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"2\",\"guid\":\"120062\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"350\",\"slotIndex\":\"-1\",\"stopTime\":\"800\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"180\",\"0\",\"0\"],\"offsetScale\":[\"1.3\",\"1.3\",\"1.3\"],\"colorHex\":\"A6FF39FF\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"50\",\"skillRadius\":\"0\",\"skillHeight\":\"30\",\"skillLength\":\"150\",\"skillWidth\":\"300\",\"moveSpeed\":\"300\"},{\"type\":\"4\",\"guid\":\"135749\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"200\",\"slotIndex\":\"-1\",\"stopTime\":\"0\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0|0|0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"1\",\"guid\":\"121962\",\"duration\":\"1400\",\"hitLength\":\"600\",\"frontRockLength\":\"1000\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"3\",\"guid\":\"\",\"duration\":\"200\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"300\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"80\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"2\",\"guid\":\"131516\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"400\",\"slotIndex\":\"-1\",\"stopTime\":\"1200\",\"offsetPos\":[\"100\",\"0\",\"-80\"],\"offsetRotation\":[\"0\",\"0\",\"-90\"],\"offsetScale\":[\"0.5\",\"1\",\"1\"],\"colorHex\":\"7DFF37FF\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"30\",\"skillRadius\":\"0\",\"skillHeight\":\"350\",\"skillLength\":\"650\",\"skillWidth\":\"50\",\"moveSpeed\":\"300\"},{\"type\":\"4\",\"guid\":\"135749\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"250\",\"slotIndex\":\"-1\",\"stopTime\":\"0\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0|0|0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"1\",\"guid\":\"121967\",\"duration\":\"2400\",\"hitLength\":\"1000\",\"frontRockLength\":\"2200\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"3\",\"guid\":\"\",\"duration\":\"400\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"400\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"200\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"2\",\"guid\":\"120066\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"400\",\"slotIndex\":\"-1\",\"stopTime\":\"600\",\"offsetPos\":[\"0\",\"20\",\"30\"],\"offsetRotation\":[\"90\",\"90\",\"0\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"A8FF58FF\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"2\",\"guid\":\"120066\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"500\",\"slotIndex\":\"-1\",\"stopTime\":\"600\",\"offsetPos\":[\"0\",\"0\",\"30\"],\"offsetRotation\":[\"90\",\"-30\",\"0\"],\"offsetScale\":[\"1.2\",\"1.2\",\"1.2\"],\"colorHex\":\"A8FF58FF\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"2\",\"guid\":\"120066\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"600\",\"slotIndex\":\"-1\",\"stopTime\":\"600\",\"offsetPos\":[\"0\",\"-20\",\"30\"],\"offsetRotation\":[\"90\",\"-160\",\"0\"],\"offsetScale\":[\"1.3\",\"1.3\",\"1.3\"],\"colorHex\":\"A8FF58FF\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"2\",\"guid\":\"120062\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"800\",\"slotIndex\":\"-1\",\"stopTime\":\"600\",\"offsetPos\":[\"30\",\"0\",\"30\"],\"offsetRotation\":[\"90\",\"60\",\"0\"],\"offsetScale\":[\"1.5\",\"1.5\",\"1.5\"],\"colorHex\":\"A8FF58FF\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"2\",\"guid\":\"120066\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"900\",\"slotIndex\":\"-1\",\"stopTime\":\"600\",\"offsetPos\":[\"150\",\"0\",\"30\"],\"offsetRotation\":[\"90\",\"30\",\"0\"],\"offsetScale\":[\"1.8\",\"1.8\",\"1.8\"],\"colorHex\":\"A8FF58FF\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"400\",\"skillLength\":\"350\",\"skillWidth\":\"50\",\"moveSpeed\":\"300\"},{\"type\":\"4\",\"guid\":\"135749\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"900\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0|0|0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"}]}", "122952", "122952", "121409", "31122", 10, 1, "双剑死侍", "121951"], [16, "{\"charFightIdelAniId\":\"121951\",\"infos\":[{\"type\":\"1\",\"guid\":\"121959\",\"duration\":\"800\",\"hitLength\":\"380\",\"frontRockLength\":\"400\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"2\",\"guid\":\"105195\",\"duration\":\"\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"200\",\"slotIndex\":\"-1\",\"stopTime\":\"800\",\"offsetPos\":[\"10\",\"0\",\"0\"],\"offsetRotation\":[\"40\",\"0\",\"0\"],\"offsetScale\":[\"0.8\",\"0.8\",\"0.8\"],\"colorHex\":\"BFFF5AFF\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"3\",\"guid\":\"\",\"duration\":\"200\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"50\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"30\",\"skillRadius\":\"0\",\"skillHeight\":\"120\",\"skillLength\":\"130\",\"skillWidth\":\"130\",\"moveSpeed\":\"300\"},{\"type\":\"4\",\"guid\":\"135750\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"0\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0|0|0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"1\",\"guid\":\"121966\",\"duration\":\"800\",\"hitLength\":\"400\",\"frontRockLength\":\"600\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"2\",\"guid\":\"105195\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"200\",\"slotIndex\":\"-1\",\"stopTime\":\"800\",\"offsetPos\":[\"60\",\"0\",\"0\"],\"offsetRotation\":[\"150\",\"0\",\"0\"],\"offsetScale\":[\"0.8\",\"0.8\",\"0.8\"],\"colorHex\":\"BFFF5AFF\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"30\",\"skillRadius\":\"0\",\"skillHeight\":\"120\",\"skillLength\":\"120\",\"skillWidth\":\"130\",\"moveSpeed\":\"300\"},{\"type\":\"3\",\"guid\":\"\",\"duration\":\"200\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"200\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"50\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"4\",\"guid\":\"135750\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"180\",\"slotIndex\":\"-1\",\"stopTime\":\"0\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0|0|0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"1\",\"guid\":\"121965\",\"duration\":\"900\",\"hitLength\":\"300\",\"frontRockLength\":\"500\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"2\",\"guid\":\"105195\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"50\",\"slotIndex\":\"-1\",\"stopTime\":\"800\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"50\",\"0\",\"0\"],\"offsetScale\":[\"0.9\",\"0.9\",\"0.9\"],\"colorHex\":\"BFFF5AFF\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"2\",\"guid\":\"105195\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"50\",\"slotIndex\":\"-1\",\"stopTime\":\"500\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"150\",\"0\",\"0\"],\"offsetScale\":[\"1.2\",\"1.2\",\"1.2\"],\"colorHex\":\"A6FF39FF\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"30\",\"skillRadius\":\"0\",\"skillHeight\":\"200\",\"skillLength\":\"150\",\"skillWidth\":\"200\",\"moveSpeed\":\"300\"},{\"type\":\"4\",\"guid\":\"135750\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"0\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0|0|0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"1\",\"guid\":\"121963\",\"duration\":\"1000\",\"hitLength\":\"450\",\"frontRockLength\":\"600\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"2\",\"guid\":\"120062\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"350\",\"slotIndex\":\"-1\",\"stopTime\":\"800\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"180\",\"0\",\"0\"],\"offsetScale\":[\"1.3\",\"1.3\",\"1.3\"],\"colorHex\":\"A6FF39FF\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"50\",\"skillRadius\":\"0\",\"skillHeight\":\"30\",\"skillLength\":\"150\",\"skillWidth\":\"300\",\"moveSpeed\":\"300\"},{\"type\":\"4\",\"guid\":\"135749\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"200\",\"slotIndex\":\"-1\",\"stopTime\":\"0\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0|0|0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"1\",\"guid\":\"121962\",\"duration\":\"1400\",\"hitLength\":\"600\",\"frontRockLength\":\"1000\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"3\",\"guid\":\"\",\"duration\":\"200\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"300\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"80\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"2\",\"guid\":\"131516\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"400\",\"slotIndex\":\"-1\",\"stopTime\":\"1200\",\"offsetPos\":[\"100\",\"0\",\"-80\"],\"offsetRotation\":[\"0\",\"0\",\"-90\"],\"offsetScale\":[\"0.5\",\"1\",\"1\"],\"colorHex\":\"7DFF37FF\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"30\",\"skillRadius\":\"0\",\"skillHeight\":\"350\",\"skillLength\":\"650\",\"skillWidth\":\"50\",\"moveSpeed\":\"300\"},{\"type\":\"4\",\"guid\":\"135749\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"250\",\"slotIndex\":\"-1\",\"stopTime\":\"0\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0|0|0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"1\",\"guid\":\"121967\",\"duration\":\"2400\",\"hitLength\":\"1000\",\"frontRockLength\":\"2200\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"3\",\"guid\":\"\",\"duration\":\"400\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"400\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"200\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"2\",\"guid\":\"120066\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"400\",\"slotIndex\":\"-1\",\"stopTime\":\"600\",\"offsetPos\":[\"0\",\"20\",\"30\"],\"offsetRotation\":[\"90\",\"90\",\"0\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"A8FF58FF\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"2\",\"guid\":\"120066\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"500\",\"slotIndex\":\"-1\",\"stopTime\":\"600\",\"offsetPos\":[\"0\",\"0\",\"30\"],\"offsetRotation\":[\"90\",\"-30\",\"0\"],\"offsetScale\":[\"1.2\",\"1.2\",\"1.2\"],\"colorHex\":\"A8FF58FF\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"2\",\"guid\":\"120066\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"600\",\"slotIndex\":\"-1\",\"stopTime\":\"600\",\"offsetPos\":[\"0\",\"-20\",\"30\"],\"offsetRotation\":[\"90\",\"-160\",\"0\"],\"offsetScale\":[\"1.3\",\"1.3\",\"1.3\"],\"colorHex\":\"A8FF58FF\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"2\",\"guid\":\"120062\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"800\",\"slotIndex\":\"-1\",\"stopTime\":\"600\",\"offsetPos\":[\"30\",\"0\",\"30\"],\"offsetRotation\":[\"90\",\"60\",\"0\"],\"offsetScale\":[\"1.5\",\"1.5\",\"1.5\"],\"colorHex\":\"A8FF58FF\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"2\",\"guid\":\"120066\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"900\",\"slotIndex\":\"-1\",\"stopTime\":\"600\",\"offsetPos\":[\"150\",\"0\",\"30\"],\"offsetRotation\":[\"90\",\"30\",\"0\"],\"offsetScale\":[\"1.8\",\"1.8\",\"1.8\"],\"colorHex\":\"A8FF58FF\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"400\",\"skillLength\":\"350\",\"skillWidth\":\"50\",\"moveSpeed\":\"300\"},{\"type\":\"4\",\"guid\":\"135749\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"900\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0|0|0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"}]}", "122946", "122946", "121409", "31122", 10, 1, "紫斐镰刀变异版", "121951"], [17, "{\"charFightIdelAniId\":\"111092\",\"infos\":[{\"type\":\"1\",\"guid\":\"111094\",\"duration\":\"900\",\"hitLength\":\"550\",\"frontRockLength\":\"600\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"113917\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"450\",\"slotIndex\":\"-1\",\"stopTime\":\"500\",\"offsetPos\":[\"-30\",\"0\",\"0\"],\"offsetRotation\":[\"155\",\"13\",\"27\"],\"offsetScale\":[\"0.8\",\"0.8\",\"0.8\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"3\",\"guid\":\"\",\"duration\":\"150\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"300\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"30\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"80\",\"skillLength\":\"100\",\"skillWidth\":\"150\"},{\"type\":\"1\",\"guid\":\"111098\",\"duration\":\"900\",\"hitLength\":\"400\",\"frontRockLength\":\"600\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"113917\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"250\",\"slotIndex\":\"-1\",\"stopTime\":\"500\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"-10\"],\"offsetScale\":[\"0.8\",\"0.8\",\"0.8\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"3\",\"guid\":\"\",\"duration\":\"150\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"300\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"30\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"80\",\"skillLength\":\"100\",\"skillWidth\":\"150\"},{\"type\":\"1\",\"guid\":\"111099\",\"duration\":\"1900\",\"hitLength\":\"250\",\"frontRockLength\":\"300\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"113921\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"150\",\"slotIndex\":\"-1\",\"stopTime\":\"800\",\"offsetPos\":[\"0\",\"0\",\"-80\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"-180\",\"skillRadius\":\"0\",\"skillHeight\":\"80\",\"skillLength\":\"350\",\"skillWidth\":\"350\"},{\"type\":\"1\",\"guid\":\"111097\",\"duration\":\"1900\",\"hitLength\":\"700\",\"frontRockLength\":\"800\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"113920\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"600\",\"slotIndex\":\"-1\",\"stopTime\":\"1200\",\"offsetPos\":[\"-30\",\"0\",\"0\"],\"offsetRotation\":[\"35\",\"0\",\"0\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"200\",\"skillLength\":\"200\",\"skillWidth\":\"300\"}]}", "103061", null, "121409", "31122", 10, 1, "紫斐镰刀", "111092"], [18, "{\"charFightIdelAniId\":\"121658\",\"infos\":[{\"type\":\"1\",\"guid\":\"121650\",\"duration\":\"900\",\"hitLength\":\"300\",\"frontRockLength\":\"600\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"3\",\"guid\":\"\",\"duration\":\"200\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"200\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"50\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"126922\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"350\",\"slotIndex\":\"-1\",\"stopTime\":\"400\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"180\",\"0\",\"0\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"50\",\"skillLength\":\"120\",\"skillWidth\":\"220\"},{\"type\":\"1\",\"guid\":\"121652\",\"duration\":\"900\",\"hitLength\":\"300\",\"frontRockLength\":\"600\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"3\",\"guid\":\"\",\"duration\":\"200\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"200\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"50\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"126922\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"250\",\"slotIndex\":\"-1\",\"stopTime\":\"400\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"-30\",\"0\",\"0\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"120\",\"skillLength\":\"120\",\"skillWidth\":\"160\"},{\"type\":\"1\",\"guid\":\"121639\",\"duration\":\"1300\",\"hitLength\":\"600\",\"frontRockLength\":\"800\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"3\",\"guid\":\"\",\"duration\":\"180\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"80\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"300\",\"skillLength\":\"500\",\"skillWidth\":\"120\"},{\"type\":\"2\",\"guid\":\"126922\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"350\",\"slotIndex\":\"-1\",\"stopTime\":\"400\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"90\",\"0\",\"0\"],\"offsetScale\":[\"1.2\",\"1.2\",\"1.2\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"135892\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"450\",\"slotIndex\":\"-1\",\"stopTime\":\"600\",\"offsetPos\":[\"120\",\"0\",\"-85\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"135892\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"500\",\"slotIndex\":\"-1\",\"stopTime\":\"600\",\"offsetPos\":[\"240\",\"0\",\"-85\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"135892\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"550\",\"slotIndex\":\"-1\",\"stopTime\":\"600\",\"offsetPos\":[\"360\",\"0\",\"-85\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"135892\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"600\",\"slotIndex\":\"-1\",\"stopTime\":\"600\",\"offsetPos\":[\"480\",\"0\",\"-85\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"1\",\"guid\":\"121644\",\"duration\":\"1300\",\"hitLength\":\"400\",\"frontRockLength\":\"800\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"135891\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"300\",\"slotIndex\":\"-1\",\"stopTime\":\"800\",\"offsetPos\":[\"120\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"-90\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"200\",\"skillLength\":\"300\",\"skillWidth\":\"200\"},{\"type\":\"1\",\"guid\":\"121642\",\"duration\":\"1200\",\"hitLength\":\"400\",\"frontRockLength\":\"900\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"3\",\"guid\":\"\",\"duration\":\"200\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"200\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"135893\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"200\",\"slotIndex\":\"-1\",\"stopTime\":\"800\",\"offsetPos\":[\"60\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"-180\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"100\",\"skillLength\":\"200\",\"skillWidth\":\"300\"}]}", "118147", "118147", "121409", "135892", 10, 1, "真雷神之锤", "125369"], [19, "{\"charFightIdelAniId\":\"121648\",\"infos\":[{\"type\":\"1\",\"guid\":\"121647\",\"duration\":\"800\",\"hitLength\":\"300\",\"frontRockLength\":\"500\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"124432\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"230\",\"slotIndex\":\"-1\",\"stopTime\":\"500\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"-10\",\"-120\"],\"offsetScale\":[\"0.8\",\"0.8\",\"0.8\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"10\",\"skillLength\":\"110\",\"skillWidth\":\"160\"},{\"type\":\"1\",\"guid\":\"121645\",\"duration\":\"800\",\"hitLength\":\"300\",\"frontRockLength\":\"500\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"3\",\"guid\":\"\",\"duration\":\"50\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"80\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"124432\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"150\",\"slotIndex\":\"-1\",\"stopTime\":\"500\",\"offsetPos\":[\"-5\",\"0\",\"0\"],\"offsetRotation\":[\"203\",\"25\",\"-224\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"150\",\"skillLength\":\"120\",\"skillWidth\":\"100\"},{\"type\":\"1\",\"guid\":\"121643\",\"duration\":\"850\",\"hitLength\":\"300\",\"frontRockLength\":\"500\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"3\",\"guid\":\"\",\"duration\":\"50\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"30\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"124432\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"300\",\"slotIndex\":\"-1\",\"stopTime\":\"500\",\"offsetPos\":[\"-30\",\"0\",\"0\"],\"offsetRotation\":[\"-20\",\"-50\",\"-60\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"150\",\"skillLength\":\"100\",\"skillWidth\":\"100\"},{\"type\":\"1\",\"guid\":\"121641\",\"duration\":\"600\",\"hitLength\":\"300\",\"frontRockLength\":\"500\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"124433\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"1200\",\"offsetPos\":[\"-30\",\"0\",\"-20\"],\"offsetRotation\":[\"240\",\"-45\",\"-278\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"150\",\"skillLength\":\"120\",\"skillWidth\":\"140\"},{\"type\":\"1\",\"guid\":\"121651\",\"duration\":\"2300\",\"hitLength\":\"1000\",\"frontRockLength\":\"1800\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"3\",\"guid\":\"\",\"duration\":\"300\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"300\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"200\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"124434\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"900\",\"slotIndex\":\"-1\",\"stopTime\":\"2000\",\"offsetPos\":[\"50\",\"0\",\"-80\"],\"offsetRotation\":[\"0\",\"0\",\"-90\"],\"offsetScale\":[\"0.8\",\"0.8\",\"0.8\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"124431\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"1500\",\"slotIndex\":\"-1\",\"stopTime\":\"1500\",\"offsetPos\":[\"70\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"-90\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"100\",\"skillLength\":\"600\",\"skillWidth\":\"150\"}]}", "27693", null, "121409", "117224", 10, 1, "黑洞", "125369"], [20, "{\"charFightIdelAniId\":\"121608\",\"infos\":[{\"type\":\"1\",\"guid\":\"121594\",\"duration\":\"500\",\"hitLength\":\"180\",\"frontRockLength\":\"200\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"125705\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"200\",\"slotIndex\":\"-1\",\"stopTime\":\"500\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"30\",\"skillLength\":\"135\",\"skillWidth\":\"250\"},{\"type\":\"1\",\"guid\":\"121595\",\"duration\":\"700\",\"hitLength\":\"300\",\"frontRockLength\":\"400\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"125705\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"200\",\"slotIndex\":\"-1\",\"stopTime\":\"500\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"150\",\"0\",\"0\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"150\",\"skillLength\":\"150\",\"skillWidth\":\"200\"},{\"type\":\"1\",\"guid\":\"121591\",\"duration\":\"800\",\"hitLength\":\"300\",\"frontRockLength\":\"500\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"125706\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"800\",\"offsetPos\":[\"0\",\"0\",\"-80\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"-200\",\"skillRadius\":\"0\",\"skillHeight\":\"80\",\"skillLength\":\"400\",\"skillWidth\":\"400\"},{\"type\":\"1\",\"guid\":\"121593\",\"duration\":\"1700\",\"hitLength\":\"300\",\"frontRockLength\":\"500\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"3\",\"guid\":\"\",\"duration\":\"200\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"1\",\"moveDistance\":\"150\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"125705\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"300\",\"slotIndex\":\"-1\",\"stopTime\":\"1200\",\"offsetPos\":[\"30\",\"0\",\"30\"],\"offsetRotation\":[\"90\",\"0\",\"0\"],\"offsetScale\":[\"1.5\",\"1.5\",\"1.5\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"350\",\"skillLength\":\"240\",\"skillWidth\":\"100\"},{\"type\":\"1\",\"guid\":\"121598\",\"duration\":\"2000\",\"hitLength\":\"300\",\"frontRockLength\":\"500\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"3\",\"guid\":\"\",\"duration\":\"100\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"200\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"120\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"125704\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"300\",\"slotIndex\":\"-1\",\"stopTime\":\"1200\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"-90\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"150\",\"skillLength\":\"360\",\"skillWidth\":\"120\"},{\"type\":\"1\",\"guid\":\"121606\",\"duration\":\"2000\",\"hitLength\":\"1000\",\"frontRockLength\":\"1500\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"3\",\"guid\":\"\",\"duration\":\"200\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"400\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"300\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"125707\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"900\",\"slotIndex\":\"-1\",\"stopTime\":\"1000\",\"offsetPos\":[\"0\",\"0\",\"-80\"],\"offsetRotation\":[\"0\",\"0\",\"-90\"],\"offsetScale\":[\"1.2\",\"1.2\",\"1.2\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"600\",\"skillLength\":\"200\",\"skillWidth\":\"300\"}]}", "29057", "29057", "121409", "151551", 10, 1, "金刚狼爪", "121608"], [21, "{\"charFightIdelAniId\":\"\",\"infos\":[{\"type\":\"1\",\"guid\":\"121592\",\"duration\":\"750\",\"hitLength\":\"450\",\"frontRockLength\":\"500\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"2\",\"guid\":\"126922\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"400\",\"slotIndex\":\"-1\",\"stopTime\":\"400\",\"offsetPos\":[\"50\",\"0\",\"0\"],\"offsetRotation\":[\"160\",\"0\",\"0\"],\"offsetScale\":[\"1.2\",\"1.2\",\"1.2\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"3\",\"guid\":\"\",\"duration\":\"200\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"300\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"50\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"120\",\"skillLength\":\"200\",\"skillWidth\":\"200\",\"moveSpeed\":\"300\"},{\"type\":\"4\",\"guid\":\"12374\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"0\",\"slotIndex\":\"-1\",\"stopTime\":\"0\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"0\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0|0|0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"100\"},{\"type\":\"1\",\"guid\":\"121599\",\"duration\":\"800\",\"hitLength\":\"250\",\"frontRockLength\":\"300\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"600\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"2\",\"guid\":\"126922\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"300\",\"slotIndex\":\"-1\",\"stopTime\":\"400\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"180\",\"0\",\"0\"],\"offsetScale\":[\"1.5\",\"1.5\",\"1.5\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"80\",\"skillLength\":\"200\",\"skillWidth\":\"300\",\"moveSpeed\":\"300\"},{\"type\":\"4\",\"guid\":\"12374\",\"duration\":\"\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"0\",\"slotIndex\":\"-1\",\"stopTime\":\"0\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"0\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0|0|0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"100\"},{\"type\":\"1\",\"guid\":\"121597\",\"duration\":\"1400\",\"hitLength\":\"600\",\"frontRockLength\":\"650\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"600\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"3\",\"guid\":\"\",\"duration\":\"80\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"500\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"50\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"2\",\"guid\":\"126925\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"600\",\"slotIndex\":\"-1\",\"stopTime\":\"1200\",\"offsetPos\":[\"80\",\"0\",\"-125\"],\"offsetRotation\":[\"0\",\"0\",\"-90\"],\"offsetScale\":[\"1.5\",\"1.5\",\"1.5\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"50\",\"skillRadius\":\"0\",\"skillHeight\":\"250\",\"skillLength\":\"600\",\"skillWidth\":\"50\",\"moveSpeed\":\"300\"},{\"type\":\"4\",\"guid\":\"130793\",\"duration\":\"\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"650\",\"slotIndex\":\"-1\",\"stopTime\":\"0\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"0\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0|0|0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"100\"},{\"type\":\"1\",\"guid\":\"121596\",\"duration\":\"1600\",\"hitLength\":\"800\",\"frontRockLength\":\"1000\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"3\",\"guid\":\"\",\"duration\":\"400\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"300\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"500\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"2\",\"guid\":\"126924\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"800\",\"slotIndex\":\"-1\",\"stopTime\":\"1600\",\"offsetPos\":[\"10\",\"0\",\"-125\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"-200\",\"skillRadius\":\"0\",\"skillHeight\":\"120\",\"skillLength\":\"400\",\"skillWidth\":\"400\",\"moveSpeed\":\"300\"},{\"type\":\"4\",\"guid\":\"122569\",\"duration\":\"\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"720\",\"slotIndex\":\"-1\",\"stopTime\":\"0\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"0\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0|0|0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"100\"}]}", "103077", "103077", "121409", "89089", 10, 1, "黄金裂地刀", "121610"], [22, "{\"charFightIdelAniId\":\"121610\",\"infos\":[{\"type\":\"1\",\"guid\":\"121592\",\"duration\":\"750\",\"hitLength\":\"450\",\"frontRockLength\":\"500\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"126922\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"400\",\"slotIndex\":\"-1\",\"stopTime\":\"400\",\"offsetPos\":[\"50\",\"0\",\"0\"],\"offsetRotation\":[\"160\",\"0\",\"0\"],\"offsetScale\":[\"1.2\",\"1.2\",\"1.2\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"3\",\"guid\":\"\",\"duration\":\"200\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"300\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"50\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"120\",\"skillLength\":\"200\",\"skillWidth\":\"200\"},{\"type\":\"1\",\"guid\":\"121600\",\"duration\":\"800\",\"hitLength\":\"150\",\"frontRockLength\":\"250\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"3\",\"guid\":\"\",\"duration\":\"80\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"200\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"126922\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"300\",\"slotIndex\":\"-1\",\"stopTime\":\"400\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"30\",\"0\",\"0\"],\"offsetScale\":[\"1.35\",\"1.35\",\"1.35\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"200\",\"skillLength\":\"250\",\"skillWidth\":\"200\"},{\"type\":\"1\",\"guid\":\"121599\",\"duration\":\"800\",\"hitLength\":\"250\",\"frontRockLength\":\"300\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"600\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"126922\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"300\",\"slotIndex\":\"-1\",\"stopTime\":\"400\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"180\",\"0\",\"0\"],\"offsetScale\":[\"1.5\",\"1.5\",\"1.5\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"80\",\"skillLength\":\"200\",\"skillWidth\":\"300\"},{\"type\":\"1\",\"guid\":\"121597\",\"duration\":\"1400\",\"hitLength\":\"600\",\"frontRockLength\":\"650\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"600\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"3\",\"guid\":\"\",\"duration\":\"80\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"500\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"50\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"126925\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"600\",\"slotIndex\":\"-1\",\"stopTime\":\"1200\",\"offsetPos\":[\"80\",\"0\",\"-125\"],\"offsetRotation\":[\"0\",\"0\",\"-90\"],\"offsetScale\":[\"1.5\",\"1.5\",\"1.5\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"50\",\"skillRadius\":\"0\",\"skillHeight\":\"250\",\"skillLength\":\"600\",\"skillWidth\":\"50\"},{\"type\":\"1\",\"guid\":\"121596\",\"duration\":\"1600\",\"hitLength\":\"800\",\"frontRockLength\":\"1000\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"3\",\"guid\":\"\",\"duration\":\"400\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"300\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"500\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"126924\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"800\",\"slotIndex\":\"-1\",\"stopTime\":\"1600\",\"offsetPos\":[\"10\",\"0\",\"-125\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"-200\",\"skillRadius\":\"0\",\"skillHeight\":\"120\",\"skillLength\":\"400\",\"skillWidth\":\"400\"},{\"type\":\"1\",\"guid\":\"121609\",\"duration\":\"2700\",\"hitLength\":\"800\",\"frontRockLength\":\"1500\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"126923\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"700\",\"slotIndex\":\"-1\",\"stopTime\":\"1600\",\"offsetPos\":[\"180\",\"0\",\"-123\"],\"offsetRotation\":[\"0\",\"0\",\"-90\"],\"offsetScale\":[\"1.5\",\"1.5\",\"1.5\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"113900\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"150\",\"slotIndex\":\"-1\",\"stopTime\":\"500\",\"offsetPos\":[\"40\",\"0\",\"-50\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"2.5\",\"2.5\",\"2.5\"],\"colorHex\":\"FF5198FF\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"50\",\"skillRadius\":\"0\",\"skillHeight\":\"350\",\"skillLength\":\"600\",\"skillWidth\":\"200\"}]}", "334201", "334201", "121409", "89089", 10, 1, "真裂地刀", "121610"], [23, "{\"charFightIdelAniId\":\"108371\",\"infos\":[{\"type\":\"1\",\"guid\":\"108373\",\"duration\":\"650\",\"hitLength\":\"300\",\"frontRockLength\":\"400\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"70\",\"skillLength\":\"100\",\"skillWidth\":\"100\"},{\"type\":\"2\",\"guid\":\"121784\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"200\",\"slotIndex\":\"-1\",\"stopTime\":\"400\",\"offsetPos\":[\"20\",\"0\",\"0\"],\"offsetRotation\":[\"-200\",\"0\",\"-180\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"3\",\"guid\":\"\",\"duration\":\"100\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"30\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"20\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"1\",\"guid\":\"108375\",\"duration\":\"700\",\"hitLength\":\"300\",\"frontRockLength\":\"500\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"70\",\"skillLength\":\"100\",\"skillWidth\":\"100\"},{\"type\":\"3\",\"guid\":\"\",\"duration\":\"100\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"30\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"20\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"121784\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"250\",\"slotIndex\":\"-1\",\"stopTime\":\"400\",\"offsetPos\":[\"30\",\"0\",\"0\"],\"offsetRotation\":[\"40\",\"0\",\"-180\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"1\",\"guid\":\"108374\",\"duration\":\"700\",\"hitLength\":\"300\",\"frontRockLength\":\"500\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"80\",\"skillLength\":\"140\",\"skillWidth\":\"80\"},{\"type\":\"2\",\"guid\":\"121783\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"50\",\"slotIndex\":\"-1\",\"stopTime\":\"600\",\"offsetPos\":[\"30\",\"0\",\"10\"],\"offsetRotation\":[\"0\",\"0\",\"90\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"1\",\"guid\":\"108370\",\"duration\":\"1700\",\"hitLength\":\"300\",\"frontRockLength\":\"600\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"3\",\"guid\":\"\",\"duration\":\"200\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"150\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"150\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"80\",\"skillLength\":\"230\",\"skillWidth\":\"300\"},{\"type\":\"2\",\"guid\":\"121782\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"300\",\"slotIndex\":\"-1\",\"stopTime\":\"1200\",\"offsetPos\":[\"80\",\"0\",\"-85\"],\"offsetRotation\":[\"0\",\"0\",\"-90\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"1\",\"guid\":\"108372\",\"duration\":\"1380\",\"hitLength\":\"300\",\"frontRockLength\":\"500\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"3\",\"guid\":\"\",\"duration\":\"100\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"200\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"50\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"60\",\"skillRadius\":\"0\",\"skillHeight\":\"350\",\"skillLength\":\"160\",\"skillWidth\":\"160\"},{\"type\":\"2\",\"guid\":\"121785\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"400\",\"slotIndex\":\"-1\",\"stopTime\":\"2500\",\"offsetPos\":[\"140\",\"0\",\"-85\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"1.5\",\"1.5\",\"1.5\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"}]}", "222534", "222534", "121409", "27421", 10, 1, "机甲枪", "108371"], [24, "{\"charFightIdelAniId\":\"117340\",\"infos\":[{\"type\":\"1\",\"guid\":\"117337\",\"duration\":\"550\",\"hitLength\":\"200\",\"frontRockLength\":\"300\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"132628\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"200\",\"slotIndex\":\"-1\",\"stopTime\":\"800\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"-90\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"30\",\"skillRadius\":\"0\",\"skillHeight\":\"50\",\"skillLength\":\"120\",\"skillWidth\":\"200\"},{\"type\":\"1\",\"guid\":\"117338\",\"duration\":\"700\",\"hitLength\":\"200\",\"frontRockLength\":\"300\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"3\",\"guid\":\"\",\"duration\":\"100\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"50\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"132630\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"150\",\"slotIndex\":\"-1\",\"stopTime\":\"1200\",\"offsetPos\":[\"50\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"90\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"30\",\"skillRadius\":\"0\",\"skillHeight\":\"60\",\"skillLength\":\"180\",\"skillWidth\":\"60\"},{\"type\":\"1\",\"guid\":\"117335\",\"duration\":\"1200\",\"hitLength\":\"700\",\"frontRockLength\":\"800\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"3\",\"guid\":\"\",\"duration\":\"200\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"250\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"132629\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"600\",\"slotIndex\":\"-1\",\"stopTime\":\"1200\",\"offsetPos\":[\"-60\",\"0\",\"-80\"],\"offsetRotation\":[\"0\",\"0\",\"-90\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"132627\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"650\",\"slotIndex\":\"-1\",\"stopTime\":\"1200\",\"offsetPos\":[\"120\",\"0\",\"-76\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"40\",\"skillRadius\":\"0\",\"skillHeight\":\"120\",\"skillLength\":\"200\",\"skillWidth\":\"200\"},{\"type\":\"1\",\"guid\":\"117336\",\"duration\":\"1200\",\"hitLength\":\"500\",\"frontRockLength\":\"800\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"3\",\"guid\":\"\",\"duration\":\"200\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"350\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"200\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"132632\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"400\",\"slotIndex\":\"-1\",\"stopTime\":\"800\",\"offsetPos\":[\"120\",\"0\",\"-80\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"-100\",\"skillRadius\":\"0\",\"skillHeight\":\"200\",\"skillLength\":\"300\",\"skillWidth\":\"300\"},{\"type\":\"1\",\"guid\":\"117339\",\"duration\":\"1400\",\"hitLength\":\"1050\",\"frontRockLength\":\"1200\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"132860\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"800\",\"offsetPos\":[\"30\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"132631\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"1000\",\"slotIndex\":\"-1\",\"stopTime\":\"1200\",\"offsetPos\":[\"120\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"-90\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"200\",\"skillLength\":\"400\",\"skillWidth\":\"200\"},{\"type\":\"1\",\"guid\":\"117341\",\"duration\":\"1300\",\"hitLength\":\"600\",\"frontRockLength\":\"1000\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"3\",\"guid\":\"\",\"duration\":\"100\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"300\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"200\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"132875\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"450\",\"slotIndex\":\"-1\",\"stopTime\":\"1500\",\"offsetPos\":[\"0\",\"0\",\"-80\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"-200\",\"skillRadius\":\"0\",\"skillHeight\":\"300\",\"skillLength\":\"400\",\"skillWidth\":\"400\"}]}", "160360", "160360", "121409", "135892", 10, 1, "雏田法球", "117340"], [25, "{\"charFightIdelAniId\":\"122541\",\"infos\":[{\"type\":\"1\",\"guid\":\"122534\",\"duration\":\"700\",\"hitLength\":\"300\",\"frontRockLength\":\"400\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"3\",\"guid\":\"\",\"duration\":\"150\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"250\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\\r\\n1\",\"moveDistance\":\"50\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"129279\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"350\",\"slotIndex\":\"-1\",\"stopTime\":\"400\",\"offsetPos\":[\"-50\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"-90\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"80\",\"skillLength\":\"200\",\"skillWidth\":\"80\"},{\"type\":\"1\",\"guid\":\"122535\",\"duration\":\"700\",\"hitLength\":\"300\",\"frontRockLength\":\"400\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"3\",\"guid\":\"\",\"duration\":\"100\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"200\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\\r\\n0\",\"moveDir\":\"1\",\"moveDistance\":\"30\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"129283\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"250\",\"slotIndex\":\"-1\",\"stopTime\":\"400\",\"offsetPos\":[\"30\",\"0\",\"-110\"],\"offsetRotation\":[\"0\",\"0\",\"-90\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"150\",\"skillLength\":\"120\",\"skillWidth\":\"80\"},{\"type\":\"1\",\"guid\":\"122536\",\"duration\":\"800\",\"hitLength\":\"400\",\"frontRockLength\":\"600\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"129279\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"500\",\"slotIndex\":\"-1\",\"stopTime\":\"400\",\"offsetPos\":[\"0\",\"0\",\"10\"],\"offsetRotation\":[\"-30\",\"-40\",\"-80\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"100\",\"skillLength\":\"250\",\"skillWidth\":\"80\"},{\"type\":\"1\",\"guid\":\"122522\",\"duration\":\"900\",\"hitLength\":\"300\",\"frontRockLength\":\"500\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"3\",\"guid\":\"\",\"duration\":\"100\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"200\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"50\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"129282\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"300\",\"slotIndex\":\"-1\",\"stopTime\":\"800\",\"offsetPos\":[\"-10\",\"0\",\"-89\"],\"offsetRotation\":[\"0\",\"0\",\"-90\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"120\",\"skillLength\":\"500\",\"skillWidth\":\"100\"},{\"type\":\"1\",\"guid\":\"122523\",\"duration\":\"1600\",\"hitLength\":\"800\",\"frontRockLength\":\"1000\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"3\",\"guid\":\"\",\"duration\":\"400\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"250\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"200\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"129280\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"600\",\"slotIndex\":\"-1\",\"stopTime\":\"1200\",\"offsetPos\":[\"30\",\"0\",\"-80\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"-160\",\"skillRadius\":\"0\",\"skillHeight\":\"50\",\"skillLength\":\"350\",\"skillWidth\":\"350\"},{\"type\":\"1\",\"guid\":\"122548\",\"duration\":\"3000\",\"hitLength\":\"800\",\"frontRockLength\":\"2000\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"129278\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"600\",\"slotIndex\":\"-1\",\"stopTime\":\"1200\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"-90\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"129281\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"2000\",\"slotIndex\":\"-1\",\"stopTime\":\"1500\",\"offsetPos\":[\"-30\",\"0\",\"-80\"],\"offsetRotation\":[\"0\",\"0\",\"-90\"],\"offsetScale\":[\"1.2\",\"1.2\",\"1.2\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"150\",\"skillLength\":\"700\",\"skillWidth\":\"150\"}]}", "160357", "160357", "121409", "135892", 10, 1, "路飞二档", "122541"], [26, "{\"charFightIdelAniId\":\"125369\",\"infos\":[{\"type\":\"1\",\"guid\":\"117326\",\"duration\":\"500\",\"hitLength\":\"200\",\"frontRockLength\":\"250\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"121783\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"150\",\"slotIndex\":\"-1\",\"stopTime\":\"300\",\"offsetPos\":[\"60\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"90\"],\"offsetScale\":[\"0.5\",\"0.5\",\"0.5\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"3\",\"guid\":\"\",\"duration\":\"100\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"150\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"30\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"30\",\"skillRadius\":\"0\",\"skillHeight\":\"80\",\"skillLength\":\"80\",\"skillWidth\":\"80\"},{\"type\":\"1\",\"guid\":\"117328\",\"duration\":\"600\",\"hitLength\":\"300\",\"frontRockLength\":\"400\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"130639\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"300\",\"slotIndex\":\"-1\",\"stopTime\":\"300\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"30\",\"40\",\"-48\"],\"offsetScale\":[\"0.6\",\"0.6\",\"0.6\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"30\",\"skillRadius\":\"0\",\"skillHeight\":\"200\",\"skillLength\":\"100\",\"skillWidth\":\"80\"},{\"type\":\"1\",\"guid\":\"117327\",\"duration\":\"550\",\"hitLength\":\"200\",\"frontRockLength\":\"300\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"121785\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"150\",\"slotIndex\":\"-1\",\"stopTime\":\"800\",\"offsetPos\":[\"-30\",\"0\",\"-80\"],\"offsetRotation\":[\"0\",\"0\",\"-90\"],\"offsetScale\":[\"-1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"120\",\"skillLength\":\"200\",\"skillWidth\":\"450\"},{\"type\":\"1\",\"guid\":\"117316\",\"duration\":\"800\",\"hitLength\":\"200\",\"frontRockLength\":\"300\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"3\",\"guid\":\"\",\"duration\":\"100\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"200\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"130643\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"200\",\"slotIndex\":\"-1\",\"stopTime\":\"800\",\"offsetPos\":[\"120\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"-90\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"100\",\"skillRadius\":\"0\",\"skillHeight\":\"300\",\"skillLength\":\"120\",\"skillWidth\":\"120\"},{\"type\":\"1\",\"guid\":\"117315\",\"duration\":\"800\",\"hitLength\":\"500\",\"frontRockLength\":\"600\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"3\",\"guid\":\"\",\"duration\":\"200\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"200\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"200\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"130643\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"350\",\"slotIndex\":\"-1\",\"stopTime\":\"800\",\"offsetPos\":[\"-50\",\"0\",\"0\"],\"offsetRotation\":[\"-140\",\"0\",\"-270\"],\"offsetScale\":[\"1\",\"1.5\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"130642\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"500\",\"slotIndex\":\"-1\",\"stopTime\":\"1200\",\"offsetPos\":[\"120\",\"0\",\"-80\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"130642\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"600\",\"slotIndex\":\"-1\",\"stopTime\":\"1200\",\"offsetPos\":[\"250\",\"50\",\"-80\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"130642\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"700\",\"slotIndex\":\"-1\",\"stopTime\":\"1200\",\"offsetPos\":[\"380\",\"0\",\"-80\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"130642\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"800\",\"slotIndex\":\"-1\",\"stopTime\":\"1200\",\"offsetPos\":[\"500\",\"50\",\"-80s\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"50\",\"skillRadius\":\"0\",\"skillHeight\":\"400\",\"skillLength\":\"500\",\"skillWidth\":\"150\"},{\"type\":\"1\",\"guid\":\"117324\",\"duration\":\"1600\",\"hitLength\":\"1100\",\"frontRockLength\":\"1200\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"3\",\"guid\":\"\",\"duration\":\"300\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"1000\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"500\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"114161\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"150\",\"slotIndex\":\"-1\",\"stopTime\":\"700\",\"offsetPos\":[\"0\",\"0\",\"-75\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"1.5\",\"1.5\",\"1.5\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"130743\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"200\",\"slotIndex\":\"-1\",\"stopTime\":\"800\",\"offsetPos\":[\"0\",\"0\",\"-80\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"130640\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"1050\",\"slotIndex\":\"-1\",\"stopTime\":\"1500\",\"offsetPos\":[\"600\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"-90\"],\"offsetScale\":[\"1.2\",\"1.2\",\"1.2\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"-200\",\"skillRadius\":\"0\",\"skillHeight\":\"150\",\"skillLength\":\"550\",\"skillWidth\":\"150\"}]}", "31728", "31728", "121409", "135892", 10, 1, "佐助强化霜度剑", "125369"], [27, "{\n    \"charFightIdelAniId\": \"\",\n    \"infos\": [\n        {\n            \"type\": \"1\",\n            \"guid\": \"29726\",\n            \"duration\": \"1970\",\n            \"hitLength\": \"900\",\n            \"frontRockLength\": \"1900\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"2\",\n            \"guid\": \"163339\",\n            \"duration\": \"1000\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"900\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"1970\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"-95\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"-90\"\n            ],\n            \"offsetScale\": [\n                \"1\",\n                \"1\",\n                \"1\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"4\",\n            \"guid\": \"135752\",\n            \"duration\": \"1000\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"900\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0|0|0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"5\",\n            \"guid\": \"\",\n            \"duration\": \"0\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"0\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"0\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0|0|-100\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"120\",\n            \"skillLength\": \"1000\",\n            \"skillWidth\": \"120\",\n            \"moveSpeed\": \"300\"\n        }\n    ]\n}", "103068", null, "121409", "163337", 10, 1, "森林哨兵剑", "117391"], [28, "{\n    \"charFightIdelAniId\": \"\",\n    \"infos\": [\n        {\n            \"type\": \"1\",\n            \"guid\": \"162137\",\n            \"duration\": \"1500\",\n            \"hitLength\": \"0\",\n            \"frontRockLength\": \"1500\",\n            \"isCharge\": \"1\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"2\",\n            \"guid\": \"163346\",\n            \"duration\": \"1000\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"0\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"0\",\n            \"offsetPos\": [\n                \"-80\",\n                \"40\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"2\",\n                \"2\",\n                \"2\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"1\",\n            \"guid\": \"29728\",\n            \"duration\": \"2330\",\n            \"hitLength\": \"600\",\n            \"frontRockLength\": \"2330\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"2\",\n            \"guid\": \"163347\",\n            \"duration\": \"1000\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"600\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"2330\",\n            \"offsetPos\": [\n                \"100\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"1\",\n                \"1\",\n                \"1\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"5\",\n            \"guid\": \"\",\n            \"duration\": \"1000\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"600\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"100\",\n            \"skillLength\": \"1000\",\n            \"skillWidth\": \"100\",\n            \"moveSpeed\": \"300\"\n        }\n    ]\n}", "138213", null, "121409", "135892", 10, 1, "金枪鱼激光射线", "117391"], [29, "{\n    \"charFightIdelAniId\": \"\",\n    \"infos\": [\n        {\n            \"type\": \"1\",\n            \"guid\": \"162137\",\n            \"duration\": \"1500\",\n            \"hitLength\": \"0\",\n            \"frontRockLength\": \"1500\",\n            \"isCharge\": \"1\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"2\",\n            \"guid\": \"163348\",\n            \"duration\": \"1000\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"0\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"0\",\n            \"offsetPos\": [\n                \"-80\",\n                \"40\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"2\",\n                \"2\",\n                \"2\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"1\",\n            \"guid\": \"29728\",\n            \"duration\": \"2330\",\n            \"hitLength\": \"600\",\n            \"frontRockLength\": \"2330\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"2\",\n            \"guid\": \"163349\",\n            \"duration\": \"1000\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"600\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"2330\",\n            \"offsetPos\": [\n                \"100\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"1\",\n                \"1\",\n                \"1\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"5\",\n            \"guid\": \"\",\n            \"duration\": \"1000\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"600\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"100\",\n            \"skillLength\": \"1000\",\n            \"skillWidth\": \"100\",\n            \"moveSpeed\": \"300\"\n        }\n    ]\n}", "43702", null, "121409", "142950", 10, 1, "信号枪激光射线", "117391"], [30, "{\n    \"charFightIdelAniId\": \"\",\n    \"infos\": [\n        {\n            \"type\": \"1\",\n            \"guid\": \"117367\",\n            \"duration\": \"2230\",\n            \"hitLength\": \"1050\",\n            \"frontRockLength\": \"1600\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"2\",\n            \"guid\": \"164530\",\n            \"duration\": \"1000\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"1050\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"2230\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"-95\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"3\",\n                \"3\",\n                \"3\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"5\",\n            \"guid\": \"\",\n            \"duration\": \"0\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"0\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"360\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"200\",\n            \"skillHeight\": \"200\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"1\",\n            \"guid\": \"117407\",\n            \"duration\": \"2500\",\n            \"hitLength\": \"1050\",\n            \"frontRockLength\": \"2500\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"3\",\n            \"guid\": \"\",\n            \"duration\": \"300\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"450\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"0\",\n            \"moveDir\": \"1\",\n            \"moveDistance\": \"300\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"2\",\n            \"guid\": \"164529\",\n            \"duration\": \"1000\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"1050\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"2500\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"-95\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"3\",\n                \"3\",\n                \"3\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"5\",\n            \"guid\": \"\",\n            \"duration\": \"0\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"0\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"360\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"200\",\n            \"skillHeight\": \"200\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        }\n    ]\n}", "164529", "164529", "121409", "135892", 10, 1, "藤蔓突刺", "111092"], [31, "{\n    \"charFightIdelAniId\": \"\",\n    \"infos\": [\n        {\n            \"type\": \"1\",\n            \"guid\": \"117367\",\n            \"duration\": \"2230\",\n            \"hitLength\": \"1050\",\n            \"frontRockLength\": \"1600\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"2\",\n            \"guid\": \"164530\",\n            \"duration\": \"1000\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"1050\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"2230\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"-95\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"3\",\n                \"3\",\n                \"3\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"5\",\n            \"guid\": \"\",\n            \"duration\": \"0\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"0\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"360\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"200\",\n            \"skillHeight\": \"200\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"1\",\n            \"guid\": \"117407\",\n            \"duration\": \"2500\",\n            \"hitLength\": \"1050\",\n            \"frontRockLength\": \"2500\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"3\",\n            \"guid\": \"\",\n            \"duration\": \"300\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"450\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"0\",\n            \"moveDir\": \"1\",\n            \"moveDistance\": \"300\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"2\",\n            \"guid\": \"164528\",\n            \"duration\": \"1000\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"1050\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"2500\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"-95\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"3\",\n                \"3\",\n                \"3\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"5\",\n            \"guid\": \"\",\n            \"duration\": \"0\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"0\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"360\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"200\",\n            \"skillHeight\": \"200\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        }\n    ]\n}", "302686", "302686", "121409", "135892", 10, 1, "藤蔓缠绕", "117391"], [32, "{\n    \"charFightIdelAniId\": \"\",\n    \"infos\": [\n        {\n            \"type\": \"1\",\n            \"guid\": \"119910\",\n            \"duration\": \"3230\",\n            \"hitLength\": \"800\",\n            \"frontRockLength\": \"3230\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"2\",\n            \"guid\": \"168834\",\n            \"duration\": \"1000\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"800\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"3230\",\n            \"offsetPos\": [\n                \"400\",\n                \"0\",\n                \"-95\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"1\",\n                \"1\",\n                \"1\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"5\",\n            \"guid\": \"\",\n            \"duration\": \"0\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"0\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"200\",\n            \"skillLength\": \"1500\",\n            \"skillWidth\": \"50\",\n            \"moveSpeed\": \"300\"\n        }\n    ]\n}", "103061", null, "121409", "168828", 10, 1, "干柿鬼鲛斩", "117391"], [33, "{\n    \"charFightIdelAniId\": \"\",\n    \"infos\": [\n        {\n            \"type\": \"1\",\n            \"guid\": \"117361\",\n            \"duration\": \"830\",\n            \"hitLength\": \"250\",\n            \"frontRockLength\": \"500\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"2\",\n            \"guid\": \"168946\",\n            \"duration\": \"1000\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"250\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"830\",\n            \"offsetPos\": [\n                \"50\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"1\",\n                \"1\",\n                \"1\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"5\",\n            \"guid\": \"\",\n            \"duration\": \"0\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"0\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"-100\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"50\",\n            \"skillLength\": \"300\",\n            \"skillWidth\": \"200\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"1\",\n            \"guid\": \"117344\",\n            \"duration\": \"1070\",\n            \"hitLength\": \"400\",\n            \"frontRockLength\": \"800\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"2\",\n            \"guid\": \"168946\",\n            \"duration\": \"1000\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"400\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"1070\",\n            \"offsetPos\": [\n                \"50\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"1\",\n                \"1\",\n                \"1\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"5\",\n            \"guid\": \"\",\n            \"duration\": \"0\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"0\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"-100\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"50\",\n            \"skillLength\": \"300\",\n            \"skillWidth\": \"200\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"1\",\n            \"guid\": \"117363\",\n            \"duration\": \"830\",\n            \"hitLength\": \"300\",\n            \"frontRockLength\": \"600\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"2\",\n            \"guid\": \"168957\",\n            \"duration\": \"1000\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"300\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"830\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"-35\",\n                \"0\",\n                \"-90\"\n            ],\n            \"offsetScale\": [\n                \"1.5\",\n                \"1.5\",\n                \"1.5\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"5\",\n            \"guid\": \"\",\n            \"duration\": \"0\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"0\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"50\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"100\",\n            \"skillLength\": \"100\",\n            \"skillWidth\": \"50\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"1\",\n            \"guid\": \"117364\",\n            \"duration\": \"1000\",\n            \"hitLength\": \"250\",\n            \"frontRockLength\": \"500\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"2\",\n            \"guid\": \"168957\",\n            \"duration\": \"1000\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"250\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"1000\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"-90\"\n            ],\n            \"offsetScale\": [\n                \"1.5\",\n                \"1.5\",\n                \"1.5\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"5\",\n            \"guid\": \"\",\n            \"duration\": \"0\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"0\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"50\",\n            \"skillLength\": \"200\",\n            \"skillWidth\": \"50\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"1\",\n            \"guid\": \"117362\",\n            \"duration\": \"2400\",\n            \"hitLength\": \"1300\",\n            \"frontRockLength\": \"2400\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"3\",\n            \"guid\": \"\",\n            \"duration\": \"300\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"650\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"0\",\n            \"moveDir\": \"1\",\n            \"moveDistance\": \"300\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"2\",\n            \"guid\": \"168943\",\n            \"duration\": \"1000\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"1300\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"2400\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"-95\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"1\",\n                \"1\",\n                \"1\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"5\",\n            \"guid\": \"\",\n            \"duration\": \"0\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"0\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"300\",\n            \"skillAngle\": \"360\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"200\",\n            \"skillHeight\": \"200\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        }\n    ]\n}", "221099", "221099", "121409", "151551", 10, 1, "赛博女孩枪", "111092"], [34, "{\n    \"charFightIdelAniId\": \"\",\n    \"infos\": [\n        {\n            \"type\": \"1\",\n            \"guid\": \"29744\",\n            \"duration\": \"1730\",\n            \"hitLength\": \"600\",\n            \"frontRockLength\": \"1500\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"2\",\n            \"guid\": \"168824\",\n            \"duration\": \"1000\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"300\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"1730\",\n            \"offsetPos\": [\n                \"100\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"-135\"\n            ],\n            \"offsetScale\": [\n                \"1\",\n                \"1\",\n                \"1\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"4\",\n            \"guid\": \"135750\",\n            \"duration\": \"1000\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"300\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"0\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0|0|0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"2\",\n            \"guid\": \"168824\",\n            \"duration\": \"1000\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"600\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"1730\",\n            \"offsetPos\": [\n                \"100\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"-135\"\n            ],\n            \"offsetScale\": [\n                \"1\",\n                \"1\",\n                \"1\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"4\",\n            \"guid\": \"135750\",\n            \"duration\": \"1000\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"600\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"0\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0|0|0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"2\",\n            \"guid\": \"168824\",\n            \"duration\": \"1000\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"1200\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"1730\",\n            \"offsetPos\": [\n                \"100\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"-135\"\n            ],\n            \"offsetScale\": [\n                \"1\",\n                \"1\",\n                \"1\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"4\",\n            \"guid\": \"135750\",\n            \"duration\": \"1000\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"1200\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"0\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0|0|0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"5\",\n            \"guid\": \"\",\n            \"duration\": \"0\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"0\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"300\",\n            \"skillAngle\": \"360\",\n            \"skillOffsetDis\": \"100\",\n            \"skillRadius\": \"200\",\n            \"skillHeight\": \"200\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"1\",\n            \"guid\": \"115466\",\n            \"duration\": \"2000\",\n            \"hitLength\": \"1200\",\n            \"frontRockLength\": \"2000\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"2\",\n            \"guid\": \"168826\",\n            \"duration\": \"1000\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"200\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"2000\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"1\",\n                \"1\",\n                \"1\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"2\",\n            \"guid\": \"168827\",\n            \"duration\": \"1000\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"950\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"2000\",\n            \"offsetPos\": [\n                \"300\",\n                \"0\",\n                \"50\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"-20\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"1\",\n                \"1\",\n                \"1\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"4\",\n            \"guid\": \"135750\",\n            \"duration\": \"1000\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"950\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"0\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0|0|0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"2\",\n            \"guid\": \"168833\",\n            \"duration\": \"1000\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"1000\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"2000\",\n            \"offsetPos\": [\n                \"500\",\n                \"0\",\n                \"-95\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"2\",\n                \"2\",\n                \"2\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"5\",\n            \"guid\": \"\",\n            \"duration\": \"0\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"0\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"300\",\n            \"skillAngle\": \"360\",\n            \"skillOffsetDis\": \"500\",\n            \"skillRadius\": \"200\",\n            \"skillHeight\": \"200\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        }\n    ]\n}", "31712", null, "121409", "27422", 10, 1, "蝴蝶连击剑", "111092"], [35, "{\n    \"charFightIdelAniId\": \"\",\n    \"infos\": [\n        {\n            \"type\": \"1\",\n            \"guid\": \"162183\",\n            \"duration\": \"2130\",\n            \"hitLength\": \"800\",\n            \"frontRockLength\": \"2130\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"2\",\n            \"guid\": \"125705\",\n            \"duration\": \"1000\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"800\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"2130\",\n            \"offsetPos\": [\n                \"75\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"30\",\n                \"-180\",\n                \"180\"\n            ],\n            \"offsetScale\": [\n                \"3\",\n                \"3\",\n                \"3\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"5\",\n            \"guid\": \"\",\n            \"duration\": \"0\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"0\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"75\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"50\",\n            \"skillLength\": \"200\",\n            \"skillWidth\": \"200\",\n            \"moveSpeed\": \"300\"\n        }\n    ]\n}", "186516", null, "121409", "13418", 10, 1, "怪物爪子", "117391"], [36, "{\n    \"charFightIdelAniId\": \"\",\n    \"infos\": [\n        {\n            \"type\": \"1\",\n            \"guid\": \"162132\",\n            \"duration\": \"2070\",\n            \"hitLength\": \"250\",\n            \"frontRockLength\": \"500\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"2\",\n            \"guid\": \"124432\",\n            \"duration\": \"1000\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"250\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"2070\",\n            \"offsetPos\": [\n                \"75\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"-30\",\n                \"-90\"\n            ],\n            \"offsetScale\": [\n                \"1\",\n                \"1\",\n                \"1\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"5\",\n            \"guid\": \"\",\n            \"duration\": \"0\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"0\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"50\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"50\",\n            \"skillLength\": \"200\",\n            \"skillWidth\": \"200\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"1\",\n            \"guid\": \"162128\",\n            \"duration\": \"1730\",\n            \"hitLength\": \"250\",\n            \"frontRockLength\": \"500\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"2\",\n            \"guid\": \"124432\",\n            \"duration\": \"1000\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"250\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"2070\",\n            \"offsetPos\": [\n                \"75\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"180\",\n                \"-30\",\n                \"-270\"\n            ],\n            \"offsetScale\": [\n                \"1\",\n                \"1\",\n                \"1\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"5\",\n            \"guid\": \"\",\n            \"duration\": \"0\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"0\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"50\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"50\",\n            \"skillLength\": \"200\",\n            \"skillWidth\": \"200\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"1\",\n            \"guid\": \"162129\",\n            \"duration\": \"2670\",\n            \"hitLength\": \"800\",\n            \"frontRockLength\": \"2500\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"3\",\n            \"guid\": \"\",\n            \"duration\": \"300\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"300\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"0\",\n            \"moveDir\": \"1\",\n            \"moveDistance\": \"300\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"2\",\n            \"guid\": \"125706\",\n            \"duration\": \"1000\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"250\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"2670\",\n            \"offsetPos\": [\n                \"0\",\n                \"-50\",\n                \"100\"\n            ],\n            \"offsetRotation\": [\n                \"90\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"1\",\n                \"1\",\n                \"1\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"2\",\n            \"guid\": \"124432\",\n            \"duration\": \"1000\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"800\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"2670\",\n            \"offsetPos\": [\n                \"75\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"-30\",\n                \"-90\"\n            ],\n            \"offsetScale\": [\n                \"1\",\n                \"1\",\n                \"1\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"2\",\n            \"guid\": \"124432\",\n            \"duration\": \"1000\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"800\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"2670\",\n            \"offsetPos\": [\n                \"75\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"180\",\n                \"-30\",\n                \"-270\"\n            ],\n            \"offsetScale\": [\n                \"1\",\n                \"1\",\n                \"1\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"5\",\n            \"guid\": \"\",\n            \"duration\": \"0\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"0\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"100\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"200\",\n            \"skillLength\": \"200\",\n            \"skillWidth\": \"200\",\n            \"moveSpeed\": \"300\"\n        }\n    ]\n}", "300434", "300434", "121409", "13418", 10, 1, "断重剑", "117391"], [37, "{\n    \"charFightIdelAniId\": \"\",\n    \"infos\": [\n        {\n            \"type\": \"1\",\n            \"guid\": \"162128\",\n            \"duration\": \"1730\",\n            \"hitLength\": \"250\",\n            \"frontRockLength\": \"500\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"2\",\n            \"guid\": \"108558\",\n            \"duration\": \"1000\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"250\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"1730\",\n            \"offsetPos\": [\n                \"50\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"30\",\n                \"-180\",\n                \"180\"\n            ],\n            \"offsetScale\": [\n                \"1\",\n                \"1\",\n                \"1\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"5\",\n            \"guid\": \"\",\n            \"duration\": \"0\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"0\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"50\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"200\",\n            \"skillLength\": \"100\",\n            \"skillWidth\": \"50\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"1\",\n            \"guid\": \"117364\",\n            \"duration\": \"1000\",\n            \"hitLength\": \"250\",\n            \"frontRockLength\": \"500\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"2\",\n            \"guid\": \"108555\",\n            \"duration\": \"1000\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"250\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"1730\",\n            \"offsetPos\": [\n                \"150\",\n                \"25\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"1\",\n                \"1\",\n                \"1\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"5\",\n            \"guid\": \"\",\n            \"duration\": \"0\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"0\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"100\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"100\",\n            \"skillLength\": \"100\",\n            \"skillWidth\": \"100\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"1\",\n            \"guid\": \"117361\",\n            \"duration\": \"830\",\n            \"hitLength\": \"250\",\n            \"frontRockLength\": \"600\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"2\",\n            \"guid\": \"135893\",\n            \"duration\": \"1000\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"250\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"830\",\n            \"offsetPos\": [\n                \"50\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"30\",\n                \"0\",\n                \"225\"\n            ],\n            \"offsetScale\": [\n                \"1\",\n                \"1\",\n                \"1\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"5\",\n            \"guid\": \"\",\n            \"duration\": \"0\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"0\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"50\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"50\",\n            \"skillLength\": \"200\",\n            \"skillWidth\": \"200\",\n            \"moveSpeed\": \"300\"\n        }\n    ]\n}", "31730", null, "121409", "27421", 10, 1, "冰雪剑", "117391"], [38, "{\n    \"charFightIdelAniId\": \"\",\n    \"infos\": [\n        {\n            \"type\": \"1\",\n            \"guid\": \"117537\",\n            \"duration\": \"2500\",\n            \"hitLength\": \"1500\",\n            \"frontRockLength\": \"2400\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"2\",\n            \"guid\": \"123626\",\n            \"duration\": \"2000\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"100\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"1500\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"-95\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"1.5\",\n                \"1.5\",\n                \"1.5\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"2\",\n            \"guid\": \"160750\",\n            \"duration\": \"2000\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"100\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"1500\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"-95\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"1\",\n                \"1\",\n                \"1\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"2\",\n            \"guid\": \"163346\",\n            \"duration\": \"2000\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"300\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"650\",\n            \"offsetPos\": [\n                \"30\",\n                \"-30\",\n                \"100\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"2\",\n                \"2\",\n                \"2\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"2\",\n            \"guid\": \"160755\",\n            \"duration\": \"2000\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"1500\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"2400\",\n            \"offsetPos\": [\n                \"150\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"1\",\n                \"1\",\n                \"1\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"5\",\n            \"guid\": \"\",\n            \"duration\": \"0\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"0\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"150\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"100\",\n            \"skillLength\": \"2000\",\n            \"skillWidth\": \"100\",\n            \"moveSpeed\": \"300\"\n        }\n    ]\n}", "146763", null, "121409", "27421", 10, 1, "蓄力激光波", "117391"], [39, "{\n    \"charFightIdelAniId\": \"\",\n    \"infos\": [\n        {\n            \"type\": \"1\",\n            \"guid\": \"29714\",\n            \"duration\": \"1330\",\n            \"hitLength\": \"500\",\n            \"frontRockLength\": \"1000\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"2\",\n            \"guid\": \"120063\",\n            \"duration\": \"1000\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"500\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"1330\",\n            \"offsetPos\": [\n                \"330\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"-90\"\n            ],\n            \"offsetScale\": [\n                \"1\",\n                \"1\",\n                \"1\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"5\",\n            \"guid\": \"\",\n            \"duration\": \"0\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"0\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"100\",\n            \"skillLength\": \"400\",\n            \"skillWidth\": \"100\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"1\",\n            \"guid\": \"29730\",\n            \"duration\": \"2000\",\n            \"hitLength\": \"500\",\n            \"frontRockLength\": \"1500\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"2\",\n            \"guid\": \"108557\",\n            \"duration\": \"1000\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"500\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"2000\",\n            \"offsetPos\": [\n                \"60\",\n                \"0\",\n                \"-95\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"-90\"\n            ],\n            \"offsetScale\": [\n                \"1\",\n                \"1\",\n                \"1\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"5\",\n            \"guid\": \"\",\n            \"duration\": \"0\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"0\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"200\",\n            \"skillLength\": \"500\",\n            \"skillWidth\": \"50\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"1\",\n            \"guid\": \"29726\",\n            \"duration\": \"1970\",\n            \"hitLength\": \"700\",\n            \"frontRockLength\": \"1500\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"2\",\n            \"guid\": \"152557\",\n            \"duration\": \"1000\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"700\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"2000\",\n            \"offsetPos\": [\n                \"300\",\n                \"0\",\n                \"-95\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"1\",\n                \"1\",\n                \"1\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"5\",\n            \"guid\": \"\",\n            \"duration\": \"0\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"0\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"100\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"200\",\n            \"skillLength\": \"200\",\n            \"skillWidth\": \"200\",\n            \"moveSpeed\": \"300\"\n        }\n    ]\n}", "31712", null, "121409", "27421", 10, 1, "冰女剑", "111092"], [40, "{\n    \"charFightIdelAniId\": \"\",\n    \"infos\": [\n        {\n            \"type\": \"1\",\n            \"guid\": \"121592\",\n            \"duration\": \"1870\",\n            \"hitLength\": \"400\",\n            \"frontRockLength\": \"900\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"2\",\n            \"guid\": \"121784\",\n            \"duration\": \"1000\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"400\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"1870\",\n            \"offsetPos\": [\n                \"65\",\n                \"0\",\n                \"-30\"\n            ],\n            \"offsetRotation\": [\n                \"20\",\n                \"-200\",\n                \"-30\"\n            ],\n            \"offsetScale\": [\n                \"1\",\n                \"1\",\n                \"1\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"5\",\n            \"guid\": \"\",\n            \"duration\": \"0\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"0\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"50\",\n            \"skillLength\": \"200\",\n            \"skillWidth\": \"200\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"1\",\n            \"guid\": \"121600\",\n            \"duration\": \"1830\",\n            \"hitLength\": \"400\",\n            \"frontRockLength\": \"900\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"2\",\n            \"guid\": \"121784\",\n            \"duration\": \"1000\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"400\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"1830\",\n            \"offsetPos\": [\n                \"65\",\n                \"0\",\n                \"-30\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"20\",\n                \"-110\"\n            ],\n            \"offsetScale\": [\n                \"1\",\n                \"1\",\n                \"1\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"5\",\n            \"guid\": \"\",\n            \"duration\": \"0\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"0\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"50\",\n            \"skillLength\": \"200\",\n            \"skillWidth\": \"200\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"1\",\n            \"guid\": \"121596\",\n            \"duration\": \"2830\",\n            \"hitLength\": \"800\",\n            \"frontRockLength\": \"2500\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"3\",\n            \"guid\": \"\",\n            \"duration\": \"200\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"400\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"0\",\n            \"moveDir\": \"1\",\n            \"moveDistance\": \"200\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"2\",\n            \"guid\": \"126923\",\n            \"duration\": \"1000\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"800\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"2830\",\n            \"offsetPos\": [\n                \"200\",\n                \"0\",\n                \"-95\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"-90\"\n            ],\n            \"offsetScale\": [\n                \"1\",\n                \"1\",\n                \"1\"\n            ],\n            \"colorHex\": \"00FFFF\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"5\",\n            \"guid\": \"\",\n            \"duration\": \"0\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"0\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"100\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"200\",\n            \"skillLength\": \"400\",\n            \"skillWidth\": \"100\",\n            \"moveSpeed\": \"300\"\n        }\n    ]\n}", "103056", null, "121409", "27421", 10, 1, "地刺镰刀", "117391"]];
class ColdWeaponConfig extends ConfigBase {
    constructor() {
        super(EXCELDATA$i);
    }
}

var foreign26 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    ColdWeaponConfig: ColdWeaponConfig
});

const EXCELDATA$h = [["id", "CollectionType", "CollectionIcon", "TriggerGuid", "AddType", "AddValue", "Annotation"], ["", "", "", "", "", "", ""], [1, 1, "179768", "285DF37C", 3, 1, "黄阶低级斗技"], [2, 1, "179769", "0DD5FE2A", 3, 1, "黄阶低级斗技"], [3, 1, "179770", "33F56E6F", 3, 2, "黄阶中级斗技"], [4, 1, "179771", "01E93754", 3, 2, "黄阶中级斗技"], [5, 1, "179772", "3EA7A9EC", 3, 3, "黄阶高级斗技"], [6, 1, "179773", "198199E2", 3, 3, "黄阶高级斗技"], [7, 1, "179774", "064201C2", 3, 3, "黄阶高级斗技"], [8, 1, "179777", "0CCEADDE", 3, 4, "玄阶低级斗技"], [9, 1, "179779", "28F8699C", 3, 4, "玄阶低级斗技"], [10, 1, "179780", "20C2DB9C", 3, 4, "玄阶低级斗技"], [11, 1, "179782", "21CAF67B", 3, 5, "玄阶中级斗技"], [12, 1, "179783", "03BA529F", 3, 5, "玄阶中级斗技"], [13, 1, "179784", "2B2B9A2C", 3, 5, "玄阶中级斗技"], [14, 1, "179786", "3545803D", 3, 6, "玄阶高级斗技"], [15, 1, "179787", "17AF0132", 3, 6, "玄阶高级斗技"], [16, 1, "179788", "363422D1", 3, 6, "玄阶高级斗技"], [17, 1, "179789", "35EA3830", 3, 7, "地阶低级斗技"], [18, 1, "179792", "19F3948B", 3, 7, "地阶低级斗技"], [19, 1, "179793", "1FB98850", 3, 7, "地阶低级斗技"], [20, 1, "179794", "0D09205A", 3, 8, "地阶中级斗技"], [21, 1, "179795", "3F1E64A1", 3, 8, "地阶中级斗技"], [22, 1, "179797", "1DDE20B3", 3, 8, "地阶中级斗技"], [23, 1, "179798", "2FE7F231", 3, 9, "地阶高级斗技"], [24, 1, "179800", "06FF52B0", 3, 9, "地阶高级斗技"], [25, 1, "179802", "27F228EE", 3, 9, "地阶高级斗技"], [26, 1, "179804", "2065D006", 3, 10, "天阶低级斗技"], [27, 1, "179805", "09D10907", 3, 10, "天阶低级斗技"], [28, 1, "179806", "3C870CAE", 3, 10, "天阶低级斗技"], [29, 1, "179807", "16763EC2", 3, 11, "天阶中级斗技"], [30, 1, "179808", "3C5C244C", 3, 11, "天阶中级斗技"], [31, 1, "179809", "1828962A", 3, 11, "天阶中级斗技"], [32, 1, "179812", "2B93A988", 3, 12, "天阶高级斗技"], [33, 1, "179813", "2C4F02A9", 3, 12, "天阶高级斗技"], [34, 1, "179814", "3AFEF0F3", 3, 12, "天阶高级斗技"], [35, 2, "179671", "111680A3", 4, 5, "黄阶低级功法"], [36, 2, "179672", "0B9BAA44", 5, 5, "黄阶低级功法"], [37, 2, "179678", "0CAD2E91", 6, 1, "黄阶低级功法"], [38, 2, "179680", "35EB00F5", 4, 6, "黄阶中级功法"], [39, 2, "179685", "28A47DD8", 5, 6, "黄阶中级功法"], [40, 2, "179686", "18ED5A5A", 6, 2, "黄阶中级功法"], [41, 2, "179688", "0F0ECBB0", 4, 7, "黄阶高级功法"], [42, 2, "179689", "38509CF4", 5, 7, "黄阶高级功法"], [43, 2, "179690", "15A786FA", 6, 3, "黄阶高级功法"], [44, 2, "179703", "1D1DB43B", 4, 8, "玄阶低级功法"], [45, 2, "179707", "2628EFB3", 5, 8, "玄阶低级功法"], [46, 2, "179709", "3F9EB5FA", 6, 4, "玄阶低级功法"], [47, 2, "179711", "0545313F", 4, 9, "玄阶中级功法"], [48, 2, "179716", "07FAFE66", 5, 9, "玄阶中级功法"], [49, 2, "179718", "1D89E733", 6, 5, "玄阶中级功法"], [50, 2, "179719", "1B6A5377", 4, 10, "玄阶高级功法"], [51, 2, "179720", "33E692AF", 5, 10, "玄阶高级功法"], [52, 2, "179721", "349E381D", 6, 6, "玄阶高级功法"], [53, 2, "179724", "33F69CDD", 4, 11, "地阶低级功法"], [54, 2, "179725", "23DD066A", 5, 11, "地阶低级功法"], [55, 2, "179726", "0C9AA5AF", 6, 7, "地阶低级功法"], [56, 2, "179730", "1F3B21BE", 4, 12, "地阶中级功法"], [57, 2, "179735", "35C77F25", 5, 12, "地阶中级功法"], [58, 2, "179737", "3085A188", 6, 8, "地阶中级功法"], [59, 2, "179738", "35F4ADD8", 4, 13, "地阶高级功法"], [60, 2, "179740", "281AA48E", 5, 13, "地阶高级功法"], [61, 2, "179742", "10200A9A", 6, 9, "地阶高级功法"], [62, 2, "179748", "2E3D6486", 4, 14, "天阶低级功法"], [63, 2, "179749", "1B13DAED", 5, 14, "天阶低级功法"], [64, 2, "179751", "054F9D6F", 6, 10, "天阶低级功法"], [65, 2, "179753", "3AE24540", 4, 15, "天阶中级功法"], [66, 2, "179754", "3135AED7", 5, 15, "天阶中级功法"], [67, 2, "179758", "3602F6EF", 6, 11, "天阶中级功法"], [68, 2, "179761", "2DAC4EDA", 4, 16, "天阶高级功法"], [69, 2, "179763", "0096008C", 5, 16, "天阶高级功法"], [70, 2, "179766", "39C552D0", 6, 12, "天阶高级功法"], [71, 3, "179670", "234BD959", 2, 10, "一品丹药"], [72, 3, "179675", "0591CAA9", 2, 10, "一品丹药"], [73, 3, "179676", "0B00BD60", 2, 10, "一品丹药"], [74, 3, "179682", "2C2319F5", 2, 10, "一品丹药"], [75, 3, "179684", "36A4D1AB", 2, 10, "一品丹药"], [76, 3, "179691", "2FD1E9D0", 2, 20, "二品丹药"], [77, 3, "179692", "110047BF", 2, 20, "二品丹药"], [78, 3, "179693", "09373B77", 2, 20, "二品丹药"], [79, 3, "179696", "03650D03", 2, 20, "二品丹药"], [80, 3, "179697", "0838143E", 2, 30, "三品丹药"], [81, 3, "179698", "047E4107", 2, 30, "三品丹药"], [82, 3, "179699", "0BAAE79E", 2, 30, "三品丹药"], [83, 3, "179700", "3AE94585", 2, 30, "三品丹药"], [84, 3, "179702", "20BDD46A", 2, 40, "四品丹药"], [85, 3, "179704", "198D595E", 2, 40, "四品丹药"], [86, 3, "179706", "2E47E03B", 2, 40, "四品丹药"], [87, 3, "179708", "10FEF4BF", 2, 50, "五品丹药"], [88, 3, "179710", "064F583D", 2, 50, "五品丹药"], [89, 3, "179712", "07C1BDDB", 2, 50, "五品丹药"], [90, 3, "179713", "10CB23E1", 2, 60, "六品丹药"], [91, 3, "179717", "2063996E", 2, 60, "六品丹药"], [92, 3, "179722", "2A2858D8", 2, 60, "六品丹药"], [93, 3, "179723", "1D89E4A6", 2, 70, "七品丹药"], [94, 3, "179729", "33E1C705", 2, 70, "七品丹药"], [95, 3, "179732", "3A27B975", 2, 70, "七品丹药"], [96, 3, "179734", "1F4A3FD0", 1, 10, "一色丹雷八品丹药"], [97, 3, "179736", "2281D8B8", 1, 10, "一色丹雷八品丹药"], [98, 3, "179739", "18B3BAFB", 1, 20, "二色丹雷八品丹药"], [99, 3, "179741", "2E25C0A2", 1, 20, "二色丹雷八品丹药"], [100, 3, "179743", "1218B51F", 1, 30, "三色丹雷八品丹药"], [101, 3, "179744", "3AD533EC", 1, 30, "三色丹雷八品丹药"], [102, 3, "179745", "30D33098", 1, 40, "四色丹雷八品丹药"], [103, 3, "179746", "1BAC2614", 1, 40, "四色丹雷八品丹药"], [104, 3, "179747", "2A7ECE75", 1, 50, "五色丹雷八品丹药"], [105, 3, "179752", "2D8EFFF9", 1, 50, "五色丹雷八品丹药"], [106, 3, "179759", "126671C5", 1, 60, "六色丹雷八品丹药"], [107, 3, "179762", "3C097F44", 1, 60, "六色丹雷八品丹药"], [108, 3, "179765", "1A727B18", 1, 70, "七色丹雷八品丹药"], [109, 3, "179775", "2C3D9090", 1, 70, "七色丹雷八品丹药"], [110, 3, "179776", "3D6ABC42", 1, 80, "八色丹雷八品丹药"], [111, 3, "179778", "099E6C19", 1, 80, "八色丹雷八品丹药"], [112, 3, "179781", "31F9F3CA", 1, 90, "九色丹雷八品丹药"], [113, 3, "179785", "226F0AC0", 1, 90, "九色丹雷八品丹药"], [114, 3, "179790", "2BE21A71", 1, 92, "九品宝丹"], [115, 3, "179791", "31A48A77", 1, 92, "九品宝丹"], [116, 3, "179796", "2C658805", 1, 95, "九品玄丹"], [117, 3, "179799", "09F8380C", 1, 95, "九品玄丹"], [118, 3, "179801", "1F504AB9", 1, 98, "九品金丹"], [119, 3, "179803", "32F18F15", 1, 98, "九品金丹"], [120, 3, "179810", "0D3CF80A", 1, 100, "帝品丹药"], [121, 3, "179811", "0BAE81A2", 1, 100, "帝品丹药"], [122, 4, "179673", "3C5E04F5", 3, 13, "玄黄炎  异火榜排名第23"], [123, 4, "179674", "0AFF0049", 3, 14, "万兽灵火  异火榜排名第22"], [124, 4, "179677", "3E5FB5CF", 3, 15, "阴阳炎  异火榜排名第21"], [125, 4, "179679", "2FC8BDC6", 3, 16, "幽冥毒火  异火榜排名第20"], [126, 4, "179681", "32A84C8C", 3, 17, "青莲地心火  异火榜排名第19"], [127, 4, "179683", "1D5DB28D", 3, 18, "风怒龙炎  异火榜排名第18"], [128, 4, "179687", "2BF0119C", 3, 19, "火山石焰  异火榜排名第17"], [129, 4, "179694", "1151604C", 3, 20, "火云水炎  异火榜排名第16"], [130, 4, "179695", "257BEFC8", 3, 21, "海心炎  异火榜排名第15"], [131, 4, "179701", "3559024B", 3, 22, "陨落心炎  异火榜排名第14"], [132, 4, "179705", "1AE6413F", 3, 23, "龟灵地火  异火榜排名第13"], [133, 4, "179714", "20E58FA3", 3, 24, "九龙雷罡火  异火榜排名第12"], [134, 4, "179715", "30EB5A6E", 3, 25, "骨灵冷火  异火榜排名第11"], [135, 4, "179727", "3B436220", 3, 26, "九幽风炎  异火榜排名第10"], [136, 4, "179728", "12B5EC9F", 3, 27, "三千焱炎火  异火榜排名第9"], [137, 4, "179731", "2EB8484C", 3, 28, "红莲业火  异火榜排名第8"], [138, 4, "179733", "1F99A144", 3, 29, "九幽金祖火  异火榜排名第7"], [139, 4, "179750", "3E01C6EC", 3, 30, "八荒破灭焱  异火榜排名第6"], [140, 4, "179755", "17FEA97E", 3, 31, "生灵之焱  异火榜排名第5"], [141, 4, "179756", "295AB875", 3, 32, "金帝焚天炎  异火榜排名第4"], [142, 4, "179757", "3B7F51C6", 3, 33, "净莲妖火  异火榜排名第3"], [143, 4, "179760", "1EFEEEDB", 3, 34, "虚无吞炎  异火榜排名第2"], [144, 4, "179764", "37C8B801", 3, 35, "帝炎  异火榜排名第1"], [145, 1, "150590", "1171E7E0", 3, 1, "青铜镰刀"], [146, 1, "150629", "3DA76E00", 3, 2, "黑钢镰刀"], [147, 1, "131907", "20D47B7B", 3, 3, "海盗刀"], [148, 1, "105301", "2585E1C7", 3, 4, "激光剑"], [149, 1, "150628", "0E2D2CFC", 3, 5, "刀"], [150, 1, "108327", "0E2D2CFC", 3, 6, "镰刀"], [151, 1, "150589", "21FC468C", 3, 7, "金镰刀"], [152, 1, "150630", "38C27610", 3, 8, "翡翠镰刀"], [153, 1, "150563", "0071F1B5", 3, 9, "屠龙剑"], [154, 1, "150579", "0DA6DA8B", 3, 10, "青虹剑"], [155, 2, "150578", "0C189ECD", 3, 11, "龙泉剑"], [156, 2, "150604", "3BA0E843", 3, 12, "紫电剑"], [157, 2, "150562", "1449E650", 3, 13, "灵犀圣剑"], [158, 2, "150552", "2381555C", 3, 14, "白金剑"], [159, 2, "150577", "2F3396AF", 3, 15, "终极冰环剑"], [160, 2, "150591", "324783F2", 3, 16, "紫魔剑"], [161, 2, "150567", "0198C3F3", 3, 17, "天使剑"], [162, 2, "150613", "2E4D3AAC", 3, 18, "恶魔剑"], [163, 2, "150606", "10AA45F4", 3, 19, "紫虎剑"], [164, 2, "150631", "3E5C9F2A", 3, 20, "大砍刀"], [165, 2, "150616", "02C3C38E", 3, 21, "泣血刀"], [166, 1, "179794", "00C2C3A5", 3, 8, "地阶中级斗技"], [167, 2, "179795", "2C0E81D7", 3, 8, "地阶中级斗技"], [168, 3, "179797", "1D0F270D", 3, 8, "地阶中级斗技"], [169, 4, "179798", "0EE88E04", 3, 9, "地阶高级斗技"], [170, 4, "179800", "28E401FA", 3, 9, "地阶高级斗技"], [171, 1, "179802", "3A4AF380", 3, 9, "地阶高级斗技"], [172, 2, "179804", "02763B7B", 3, 10, "天阶低级斗技"], [173, 3, "179805", "2CA79CF9", 3, 10, "天阶低级斗技"], [174, 1, "179806", "05CE9DED", 3, 10, "天阶低级斗技"], [175, 2, "179807", "056C61DC", 3, 11, "天阶中级斗技"], [176, 3, "179808", "3D159CD8", 3, 11, "天阶中级斗技"], [177, 4, "179809", "009632B2", 3, 11, "天阶中级斗技"], [178, 1, "179812", "38AF566C", 3, 12, "天阶高级斗技"], [179, 2, "179813", "327D3DED", 3, 12, "天阶高级斗技"], [180, 3, "179814", "1D77BDF8", 3, 12, "天阶高级斗技"], [181, 4, "179690", "0A13E25F", 6, 3, "黄阶高级功法"], [182, 1, "179703", "34373A4A", 4, 8, "玄阶低级功法"], [183, 2, "179707", "2191B891", 5, 8, "玄阶低级功法"], [184, 3, "179709", "3AB10CA6", 6, 4, "玄阶低级功法"], [185, 3, "179711", "2A3028F9", 4, 9, "玄阶中级功法"], [186, 4, "179716", "1B9C1F4B", 5, 9, "玄阶中级功法"], [187, 1, "179718", "3947BDC1", 6, 5, "玄阶中级功法"], [188, 2, "179712", "1BB98238", 2, 50, "五品丹药"], [189, 3, "179713", "2CC4D7D9", 2, 60, "六品丹药"], [190, 4, "179717", "203452ED", 2, 60, "六品丹药"], [191, 1, "179722", "04205EF2", 2, 60, "六品丹药"], [192, 2, "179723", "0ADF92EE", 2, 70, "七品丹药"], [193, 3, "179729", "109AA003", 2, 70, "七品丹药"], [194, 4, "179732", "32BD7422", 2, 70, "七品丹药"], [195, 1, "179734", "3E7B0E44", 1, 10, "一色丹雷八品丹药"], [196, 2, "179736", "1C363B69", 1, 10, "一色丹雷八品丹药"], [197, 3, "179739", "0D803BC7", 1, 20, "二色丹雷八品丹药"], [198, 4, "179694", "37A0D610", 3, 20, "火云水炎  异火榜排名第16"], [199, 1, "179695", "0AEED1FB", 3, 21, "海心炎  异火榜排名第15"], [200, 2, "179701", "313DFC1C", 3, 22, "陨落心炎  异火榜排名第14"], [201, 3, "179705", "2065A53C", 3, 23, "龟灵地火  异火榜排名第13"], [202, 4, "179714", "356CE1E2", 3, 24, "九龙雷罡火  异火榜排名第12"], [203, 4, "179715", "1BEC447A", 3, 25, "骨灵冷火  异火榜排名第11"], [204, 2, "179727", "37BC1A71", 3, 26, "九幽风炎  异火榜排名第10"], [205, 3, "179728", "3153E2D6", 3, 27, "三千焱炎火  异火榜排名第9"], [206, 4, "179731", "0B7AAF8A", 3, 28, "红莲业火  异火榜排名第8"]];
class CollectionConfig extends ConfigBase {
    constructor() {
        super(EXCELDATA$h);
    }
}

var foreign27 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    CollectionConfig: CollectionConfig
});

const EXCELDATA$g = [["id", "TriggerGuid", "DanceGuid", "OffsetPos", "OffsetRot", "Annotation"], ["", "", "", "", "", ""], [1, "2082749D", ["14692", "35388", "29715", "132787"], new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), "弹钢琴"], [2, "20F1666C", ["14692", "35388", "29715", "132787"], new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), "弹钢琴"], [3, "27A8BE09", ["122458"], new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), "唱歌"], [4, "1B7FF724", ["88544"], new mw.Vector(-100, 100, -1), new mw.Vector(0, 0, 0), "舞蹈动画09"], [5, "0DE44E94", ["122453", "122454"], new mw.Vector(-200, 200, -1), new mw.Vector(0, 0, 0), "扭胯"], [6, "3C8304A2", ["126045"], new mw.Vector(-50, 50, -1), new mw.Vector(0, 0, 0), "拉丁舞"], [7, "266F032F", ["195754"], new mw.Vector(-200, 200, -1), new mw.Vector(0, 0, 0), "海草舞"], [8, "239A77EE", ["14701", "29733"], new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), "旋转跳舞"], [9, "0C126488", ["29725", "29748", "88448", "88449", "88450", "88541", "88544", "122676", "122677", "122678", "122679", "122680", "122681", "122682", "122683", "122684", "122745", "122746", ""], new mw.Vector(-200, 200, -1), new mw.Vector(0, 0, 0), "Dance"], [10, "1F0FB515", ["14701", "29733"], new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), "旋转跳舞"]];
class DanceConfig extends ConfigBase {
    constructor() {
        super(EXCELDATA$g);
    }
}

var foreign29 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    DanceConfig: DanceConfig
});

const EXCELDATA$f = [["id", "modelGuid"], ["", ""], [1, "038C03CF"], [2, "3EB9B465"], [3, "27072AB7"], [4, "2F6EED42"], [5, "17D1CE09"], [6, "2FD5297C"], [7, "1DDB8C9E"], [8, "341E8667"]];
class FlashlightConfig extends ConfigBase {
    constructor() {
        super(EXCELDATA$f);
    }
}

var foreign31 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    FlashlightConfig: FlashlightConfig
});

const EXCELDATA$e = [["ID", "Des", "PathStr", "Idles", "Moves", "MoveSpeed", "Die", "Attacks", "AttackTimePoints", "AttackOffsets", "AttackLengths", "AttackSizes", "Damages", "EffectIds", "EffectPosOffsets", "EffectRotOffsets", "EffectScales"], ["", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", ""], [1, "蛇女", ["3CA1D3DF"], ["318618"], ["318617"], 300, "318619", ["318616"], [0.35], [new mw.Vector(0, 50, 0)], [300], [new mw.Vector(50, 50, 100)], [100], ["125704"], [new mw.Vector(60, 0, 0)], [new mw.Vector(0, 0, -90)], [new mw.Vector(1, 0.8, 1)]], [2, "蜘蛛", ["3CA1D3DF"], ["336664", "336668"], ["336669"], 250, "336816", ["336673", "336670", "336672"], [1, 0.95, 1.2], [new mw.Vector(0, 50, 0), new mw.Vector(0, 50, 0), new mw.Vector(0, 50, 0)], [300, 300, 300], [new mw.Vector(50, 50, 100), new mw.Vector(50, 50, 100), new mw.Vector(50, 50, 100)], [100, 100, 100], ["384353", "101411", "297932"], [new mw.Vector(170, 0, -50), new mw.Vector(200, 0, -120), new mw.Vector(100, 0, -125)], [new mw.Vector(0, -60, 0), new mw.Vector(0, 30, 10), new mw.Vector(0, 0, 0)], [new mw.Vector(0.5, 0.5, 0.5), new mw.Vector(1, 1, 1), new mw.Vector(0.55, 1, 1)]], [3, "蜘蛛精", ["3CA1D3DF"], ["336664", "336668"], ["338467"], 250, "338468", ["338464", "338466"], [0.8, 0.8], [new mw.Vector(0, 50, 0), new mw.Vector(0, 50, 0)], [300, 300], [new mw.Vector(50, 50, 100), new mw.Vector(50, 50, 100)], [100, 100], ["297932", "101407"], [new mw.Vector(100, 0, -125), new mw.Vector(100, 0, -125)], [new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0)], [new mw.Vector(0.55, 1, 1), new mw.Vector(1, 1, 1)]], [4, "龙", ["3CA1D3DF"], ["160627", "250400", "250399", "160627"], ["160628"], 250, "-1", ["250094", "250095"], [1.6, 1.3], [new mw.Vector(0, 50, 0), new mw.Vector(0, 50, 0)], [300, 300], [new mw.Vector(50, 50, 100), new mw.Vector(50, 50, 100)], [100, 100], ["168947", "92843"], [new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0)], [new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0)], [new mw.Vector(1, 1, 1), new mw.Vector(1, 1, 1)]], [5, "丧尸", ["3CA1D3DF"], ["284991", "268599"], ["285740", "269161", "285826"], 150, "-1", ["285210"], [0.55], [new mw.Vector(0, 50, 0)], [300], [new mw.Vector(50, 50, 100)], [100], ["31260"], [new mw.Vector(5, 0, 0)], [new mw.Vector(0, -30, 180)], [new mw.Vector(1, 1, 1)]], [6, "角色", ["3CA1D3DF"], ["285445"], ["285336", "285372", "280652", "280671", "280723", "284685", "280699", "280780"], 150, "-1", ["219129", "280914", "280916"], [0.2, 0.4, 0.3], [new mw.Vector(0, 50, 0), new mw.Vector(0, 50, 0), new mw.Vector(0, 50, 0)], [300, 300, 300], [new mw.Vector(50, 50, 100), new mw.Vector(50, 50, 100), new mw.Vector(50, 50, 100)], [100, 100, 100], ["92838", "135894", "125704"], [new mw.Vector(250, 0, 0), new mw.Vector(140, 0, 0), new mw.Vector(0, 0, 0)], [new mw.Vector(0, 0, 0), new mw.Vector(0, 0, -90), new mw.Vector(0, 0, -90)], [new mw.Vector(0.5, 0.5, 0.5), new mw.Vector(0.5, 0.5, 0.5), new mw.Vector(1, 1, 1)]]];
class MonsterInfoConfig extends ConfigBase {
    constructor() {
        super(EXCELDATA$e);
    }
}

var foreign33 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    MonsterInfoConfig: MonsterInfoConfig
});

const EXCELDATA$d = [["id", "Guid", "Annotation"], ["", "", ""], [1, "118698", "STAY"], [2, "118699", "bad guy"], [3, "117222", "我会活下去"], [4, "118697", "Let Me Love You"], [5, "118700", "Running up That Hill"], [6, "118701", "Love To Hate Me"], [7, "118702", "TOMBOY"], [8, "118703", "Shut Down"], [9, "118704", "Celestial"], [10, "118712", "As It Was"], [11, "118706", "Good Morning"], [12, "118707", "Alone"], [13, "118709", "Chanderiler"], [14, "118711", "Don't Wanna Know"], [15, "118716", "Mood"], [16, "117220", "金轮"], [17, "128884", "不知道叫啥"], [18, "128888", "也不知道叫啥"]];
class MusicConfig extends ConfigBase {
    constructor() {
        super(EXCELDATA$d);
    }
}

var foreign34 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    MusicConfig: MusicConfig
});

const EXCELDATA$c = [["id", "NPCSitGuid", "NPCDanceGuid", "SitStance", "Annotation"], ["", "", "", "", ""], [1, "0F9D7025", null, "122230", "鸣人"], [2, "18F424B3", null, "122227", "雏田"], [3, "3AD865B6", null, "126331", "女魔法师"], [4, null, "0026F981", null, "赛博女孩"], [5, null, "1F5985F5", null, "舞女"], [6, null, "0069B9BD", null, "妮可罗宾"], [7, null, "294C8EC1", null, "贵族少女"], [8, null, "224C7FFF", null, "海洋王后"], [9, null, "3FDFC3E3", null, "酒吧女DJ"]];
class NPCSitDanceConfig extends ConfigBase {
    constructor() {
        super(EXCELDATA$c);
    }
}

var foreign35 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    NPCSitDanceConfig: NPCSitDanceConfig
});

const EXCELDATA$b = [["id", "PetGuid", "PetIcon", "Annotation"], ["", "", "", ""], [1, "147010", "181992", "破壳绿鸡仔"], [2, "151159", "181984", "粉色木乃伊蛋仔"], [3, "151184", "181990", "粉色婴儿"], [4, "151465", "181993", "红西红柿"], [5, "151795", "181982", "蓝狗狗"], [6, "151812", "181979", "蓝衣国王"], [7, "151835", "181994", "恶魔蛋仔"], [8, "151837", "181995", "绿熊猫蛋仔"], [9, "151886", "181981", "黄南瓜头"], [10, "151887", "181980", "粉兔子"], [11, "152166", "181983", "棕猫咪"], [12, "152186", "181986", "蓝裙公主"], [13, "153511", "181996", "巧克力冰"], [14, "153514", "181985", "天使"], [15, "153512", "181989", "紫斑马"], [16, "156363", "181987", "方仔"], [17, "156952", "181988", "高级岛小矮怪"], [18, "176737", "181991", "花嫁新娘 "]];
class PetConfig extends ConfigBase {
    constructor() {
        super(EXCELDATA$b);
    }
}

var foreign36 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    PetConfig: PetConfig
});

const EXCELDATA$a = [["id", "TriggerGuid", "ModelGuid", "InteractivityGuid"], ["", "", "", ""], [1, "36261CB3", "3EE381F1", "1EA2CBEE"], [2, "39C1B46E", "0744517E", "1B8B401A"], [3, "09976D98", "161388BE", "249A3E82"]];
class PlayerLauncherConfig extends ConfigBase {
    constructor() {
        super(EXCELDATA$a);
    }
}

var foreign37 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    PlayerLauncherConfig: PlayerLauncherConfig
});

const EXCELDATA$9 = [["id", "TriggerGuid"], ["", ""], [1, "3B95E285"], [2, "04C75B00"], [3, "1A891F24"], [4, "0A3B2669"], [5, "3081D2EF"], [6, "09CE9A28"]];
class PortalConfig extends ConfigBase {
    constructor() {
        super(EXCELDATA$9);
    }
}

var foreign38 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    PortalConfig: PortalConfig
});

const EXCELDATA$8 = [["id", "TriggerGuid"], ["", ""], [1, "2A9514EB"], [2, "039018FC"], [3, "1A3077C7"]];
class RotaryKnifeTriggerConfig extends ConfigBase {
    constructor() {
        super(EXCELDATA$8);
    }
}

var foreign39 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    RotaryKnifeTriggerConfig: RotaryKnifeTriggerConfig
});

const EXCELDATA$7 = [["id", "ModelGuid", "TriggerGuid"], ["", "", ""], [1, "16A6C06D", null], [2, "239D12BA", null]];
class ShakeConfig extends ConfigBase {
    constructor() {
        super(EXCELDATA$7);
    }
}

var foreign40 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    ShakeConfig: ShakeConfig
});

const EXCELDATA$6 = [["id", "TriggerGuid", "InteractivityGuid", "SitStance"], ["", "", "", ""], [1, "207424AD", "2C8D3594", "122227"], [2, "1F538DB4", "2CEFC488", "122230"], [3, "0EC2B980", "0C07734D", "122230"], [4, "1AB51812", "0F472A3C", "122227"], [5, "1EE7717B", "0A8FFEA7", "122227"], [6, "0801FCED", "1D677AD6", "122230"], [7, "125D076B", "15AF4932", "122227"], [8, "189E55D7", "014E6796", "126331"], [9, "058BADF7", "168F6398", "126331"], [10, "04D570D4", "35B27400", "126331"], [11, "01B1DDB4", "3AE7E5D2", "126331"], [12, "1C34D059", "340E0039", "122227"], [13, "1A8E9C59", "0960E03B", "122227"], [14, "14A69349", "3BCD303B", "122230"], [15, "0113DD37", "267131D4", "86983"], [16, "0810F7FB", "019ED9F7", "86983"], [17, "1FA69438", "1DAAB884", "86983"], [18, "2037E3BF", "15627078", "86983"], [19, "24C63293", "295E6051", "86983"], [20, "1C589471", "12664641", "122230"], [21, "179DBBC3", "3588A9BF", "122230"]];
class SitConfig extends ConfigBase {
    constructor() {
        super(EXCELDATA$6);
    }
}

var foreign41 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    SitConfig: SitConfig
});

const EXCELDATA$5 = [["id", "IsIAA", "TailGuid", "TailIcon", "TailOffset", "TailRotation", "TailScale", "Speed", "Annotation"], ["", "", "", "", "", "", "", "", ""], [1, 0, null, "178220", null, null, null, 0, null], [2, 1, "88822", "158616", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), 0, "彩虹拖尾"], [3, 1, "7982", "158613", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), 0, "火拖尾"], [4, 1, "151527", "174364", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), 0, "烟雾拖尾"], [5, 1, "145511", "178010", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), 0, "火焰拖尾"], [6, 1, "88796", "158622", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), 0, "流光拖尾"], [7, 1, "128516", "158621", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), 0, "光束拖尾"], [8, 1, "24979", "174337", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), 0, "彩虹星星拖尾"], [9, 1, "145502", "148824", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), 0, "香蕉"], [10, 1, "145500", "148825", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), 0, "骷髅拖尾"], [11, 1, "145506", "148826", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), 0, "星星"], [12, 1, "145495", "148827", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), 0, "糖果拖尾"], [13, 1, "7982", "148828", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), 0, "火拖尾"], [14, 1, "145510", "148829", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), 0, "钞票拖尾"], [15, 1, "145498", "148830", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), 0, "皇冠拖尾"], [16, 1, "145504", "148831", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), 0, "雪花拖尾"], [17, 1, "145505", "148832", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), 0, "2023拖尾"], [18, 1, "145493", "148833", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), 0, "足球拖尾"], [19, 1, "145507", "148834", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), 0, "爆竹拖尾"], [20, 1, "145499", "148835", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), 0, "爱心拖尾"], [21, 1, "145508", "148836", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), 0, "烟花拖尾"], [22, 1, "145497", "148837", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), 0, "奖杯拖尾"], [23, 1, "145492", "148838", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), 0, "螺丝钉拖尾"], [24, 1, "88824", "148839", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), 0, "彩虹拖尾"], [25, 1, "158202", "148840", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), 0, "云拖尾"], [26, 1, "145509", "148844", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), 0, "礼物拖尾"], [27, 1, "145503", "148845", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), 0, "雷电拖尾"]];
class TailConfig extends ConfigBase {
    constructor() {
        super(EXCELDATA$5);
    }
}

var foreign42 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    TailConfig: TailConfig
});

const EXCELDATA$4 = [["id", "TriggerGuid"], ["", ""], [1, "025E1C68"], [2, "2291618B"], [3, "33A566AE"], [4, "3BBFCFF0"], [5, "2A550CB9"], [6, "2051E67A"]];
class TelegraphPoleConfig extends ConfigBase {
    constructor() {
        super(EXCELDATA$4);
    }
}

var foreign43 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    TelegraphPoleConfig: TelegraphPoleConfig
});

const EXCELDATA$3 = [["id", "TriggerGuid", "ModelGuid"], ["", "", ""], [1, "392B0F44", "1CAC76F4"]];
class TrampolineConfig extends ConfigBase {
    constructor() {
        super(EXCELDATA$3);
    }
}

var foreign44 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    TrampolineConfig: TrampolineConfig
});

const EXCELDATA$2 = [["id", "IsIAA", "WingGuid", "WingIcon", "WingOffset", "WingRotation", "WingScale", "Speed", "Annotation"], ["", "", "", "", "", "", "", "", ""], [1, 0, null, "178220", null, null, null, 0, null], [2, 0, "42814", "145165", new mw.Vector(0, 0, 20), new mw.Vector(0, 0, 90), new mw.Vector(1, 1, 1), 800, null], [3, 1, "42823", "83140", new mw.Vector(0, 0, 7), new mw.Vector(0, 0, 90), new mw.Vector(1, 1, 1), 800, null], [4, 1, "145902", "174366", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 180), new mw.Vector(1, 1, 1), 800, null], [5, 1, "145903", "174339", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 180), new mw.Vector(1, 1, 1), 800, null], [6, 1, "145904", "174341", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 180), new mw.Vector(1, 1, 1), 800, null], [7, 1, "145907", "174342", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 90), new mw.Vector(1, 1, 1), 800, null], [8, 1, "145910", "174360", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 180), new mw.Vector(1, 1, 1), 800, null], [9, 1, "145911", "174375", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 90), new mw.Vector(1, 1, 1), 800, null], [10, 1, "145913", "174353", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 90), new mw.Vector(1, 1, 1), 800, null], [11, 1, "145905", "174371", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 90), new mw.Vector(1, 1, 1), 800, null], [12, 1, "145906", "174331", new mw.Vector(0, 0, -25), new mw.Vector(0, 0, 90), new mw.Vector(1, 1, 1), 800, null], [13, 1, "145908", "174327", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 90), new mw.Vector(1, 1, 1), 800, null], [14, 1, "145912", "174379", new mw.Vector(0, 0, 13), new mw.Vector(0, 0, 90), new mw.Vector(1, 1, 1), 800, null], [15, 1, "136957", "174376", new mw.Vector(0, 0, -15), new mw.Vector(0, 0, 180), new mw.Vector(1, 1, 1), 800, null], [16, 1, "136958", "145168", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 180), new mw.Vector(1, 1, 1), 800, null], [17, 1, "136959", "174338", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 180), new mw.Vector(1, 1, 1), 800, null], [18, 1, "136960", "174330", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 180), new mw.Vector(1, 1, 1), 800, null], [19, 1, "136961", "174348", new mw.Vector(0, 0, -5), new mw.Vector(0, 0, 180), new mw.Vector(1, 1, 1), 800, null], [20, 1, "136962", "174382", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 180), new mw.Vector(1, 1, 1), 800, null], [21, 1, "136963", "174347", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 180), new mw.Vector(1, 1, 1), 800, null], [22, 1, "136964", "145170", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 180), new mw.Vector(1, 1, 1), 800, null], [23, 1, "136965", "174373", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 180), new mw.Vector(1, 1, 1), 800, null], [24, 1, "136966", "174380", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 180), new mw.Vector(1, 1, 1), 800, null]];
class WingConfig extends ConfigBase {
    constructor() {
        super(EXCELDATA$2);
    }
}

var foreign46 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    WingConfig: WingConfig
});

class GameConfig {
    /**
    * 多语言设置
    * @param languageIndex 语言索引(-1为系统默认语言)
    * @param getLanguageFun 根据key获取语言内容的方法
    */
    static initLanguage(languageIndex, getLanguageFun) {
        ConfigBase.initLanguage(languageIndex, getLanguageFun);
        this.configMap.clear();
    }
    static getConfig(ConfigClass) {
        if (!this.configMap.has(ConfigClass.name)) {
            this.configMap.set(ConfigClass.name, new ConfigClass());
        }
        return this.configMap.get(ConfigClass.name);
    }
    static get Achievements() { return this.getConfig(AchievementsConfig); }
    ;
    static get Assets() { return this.getConfig(AssetsConfig); }
    ;
    static get BlockingVolume() { return this.getConfig(BlockingVolumeConfig); }
    ;
    static get Clothes() { return this.getConfig(ClothesConfig); }
    ;
    static get ColdWeapon() { return this.getConfig(ColdWeaponConfig); }
    ;
    static get Collection() { return this.getConfig(CollectionConfig); }
    ;
    static get Dance() { return this.getConfig(DanceConfig); }
    ;
    static get Flashlight() { return this.getConfig(FlashlightConfig); }
    ;
    static get MonsterInfo() { return this.getConfig(MonsterInfoConfig); }
    ;
    static get Music() { return this.getConfig(MusicConfig); }
    ;
    static get NPCSitDance() { return this.getConfig(NPCSitDanceConfig); }
    ;
    static get Pet() { return this.getConfig(PetConfig); }
    ;
    static get PlayerLauncher() { return this.getConfig(PlayerLauncherConfig); }
    ;
    static get Portal() { return this.getConfig(PortalConfig); }
    ;
    static get RotaryKnifeTrigger() { return this.getConfig(RotaryKnifeTriggerConfig); }
    ;
    static get Shake() { return this.getConfig(ShakeConfig); }
    ;
    static get Sit() { return this.getConfig(SitConfig); }
    ;
    static get Tail() { return this.getConfig(TailConfig); }
    ;
    static get TelegraphPole() { return this.getConfig(TelegraphPoleConfig); }
    ;
    static get Trampoline() { return this.getConfig(TrampolineConfig); }
    ;
    static get Wing() { return this.getConfig(WingConfig); }
    ;
}
GameConfig.configMap = new Map();

var foreign32 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    GameConfig: GameConfig
});

class GlobalData {
    ;
    ;
    ;
}
/**log级别"None": "0", "Log": "1", "Warn": "2", "Error": "3" */
GlobalData.logLevel = 0;
/**是否隐藏头顶UI */
GlobalData.isHideHeadUI = false;
/**是否开启IAA */
GlobalData.isOpenIAA = false;
/**是否开启测试 */
GlobalData.isOpenTest = false;
/**排行榜显示前6名玩家 */
GlobalData.rankingNumber = 18;
/**全局UI点击音效Guid */
GlobalData.uiClickSoundGuid = GameConfig.Assets.getElement(1).Guid;
/**水声 */
GlobalData.waterSoundGuid = GameConfig.Assets.getElement(2).Guid;
/**坐的图标 */
GlobalData.sitIconGuid = GameConfig.Assets.getElement(3).Guid;
/**关闭背景音乐图标Guid */
GlobalData.offMusicIconGuid = GameConfig.Assets.getElement(5).Guid;
/**打开背景音乐图标Guid */
GlobalData.onMusicIconGuid = GameConfig.Assets.getElement(6).Guid;
/**震荡的图标 */
GlobalData.shakeIconGuid = GameConfig.Assets.getElement(25).Guid;
/**跳舞的图标 */
GlobalData.danceIconGuid = GameConfig.Assets.getElement(29).Guid;
/**换装特效 */
GlobalData.changeClothEffectGuid = GameConfig.Assets.getElement(33).Guid;
/**升级音效 */
GlobalData.upgradeSoundGuid = GameConfig.Assets.getElement(34).Guid;
/**升级特效 */
GlobalData.upgradeEffectGuid = GameConfig.Assets.getElement(35).Guid;
/**传送特效 */
GlobalData.portalEffectGuid = GameConfig.Assets.getElement(41).Guid;
/**属性加点特效 */
GlobalData.playerAddEffectGuid = GameConfig.Assets.getElement(46).Guid;
/**出生点位置 */
GlobalData.homeLocs = [
    new mw.Vector(-2600, 1900, 200),
    new mw.Vector(-2700, 1800, 200),
    new mw.Vector(2600, 1600, 200),
    new mw.Vector(25, 1600, 200)
];
/**出生点的人物朝向 */
GlobalData.homeRots = [
    new mw.Rotation(0, 0, 0),
    new mw.Rotation(0, 0, 0),
    new mw.Rotation(0, 0, -180),
    new mw.Rotation(0, 0, -180)
];
/**传送位置 */
GlobalData.portalLocs = [
    new mw.Vector(-10779.29, 14817.72, 165.01),
    new mw.Vector(-11299.02, 15443.80, 122.82),
    new mw.Vector(-11980.34, 14851.36, 158.50),
    new mw.Vector(-11952.62, 14129.81, 184.51)
];
/**shop正常状态下颜色 */
GlobalData.nornalShopTypeBtnColor = new mw.LinearColor(1, 1, 1);
/**shop选中状态颜色 */
GlobalData.selectShopTypeBtnColor = new mw.LinearColor(1, 0, 0);
/**Cloth取消选中状态 */
GlobalData.cancleSelectClothColor = new mw.LinearColor(1, 1, 1);
/**Cloth选中状态 */
GlobalData.selectClothColor = new mw.LinearColor(1, 1, 0);
/**Weapon取消选中状态 */
GlobalData.cancleSelectWeaponColor = new mw.LinearColor(1, 0, 1);
/**Weapon选中状态 */
GlobalData.selectWeaponColor = new mw.LinearColor(0, 1, 0);
/**延迟点击标识 */
GlobalData.delayClick = true;
/**翅膀飞行时间 */
GlobalData.wingFlyTime = 10;
/**翅膀问号icon */
GlobalData.wingIconGuid = GameConfig.Assets.getElement(37).Guid;
/**collectItem Nornal Color */
GlobalData.collectionItemNormalColor = new mw.LinearColor(1, 1, 0);
/**collectItem Press Color */
GlobalData.collectionItemPressColor = new mw.LinearColor(0.7, 0.7, 0);
/**collectType Nornal Color */
GlobalData.collectionTypeNormalColor = new mw.LinearColor(1, 0, 0);
/**collectType Select Color */
GlobalData.collectionTypeSelectColor = new mw.LinearColor(0, 1, 0);
/**CollectionItem已拥有的颜色 */
GlobalData.collectionItemIconOwnColor = new mw.LinearColor(1, 1, 1);
/**CollectionItem没拥有的颜色 */
GlobalData.collectionItemIconNoOwnColor = new mw.LinearColor(0.05, 0.05, 0.05);
/**引导线特效Guid */
GlobalData.guideEffectGuid = GameConfig.Assets.getElement(44).Guid;
/**引导目标点特效Guid */
GlobalData.targetEffectGuid = GameConfig.Assets.getElement(45).Guid;
/**跳舞动画Guid1 */
GlobalData.danceGuid1 = GameConfig.Assets.getElement(30).Guid;
/**跳舞动画Guid2 */
GlobalData.danceGuid2 = GameConfig.Assets.getElement(31).Guid;
/**新手引导需要的Image */
GlobalData.roleImages = GameConfig.Assets.getElement(47).Guid;
/**容易 */
GlobalData.easyImageBgColor = [0, 255, 255, 255];
/**简单 */
GlobalData.simpleImageBgColor = [255, 255, 0, 255];
/**中等 */
GlobalData.mediumImageBgColor = [0, 0, 255, 255];
/**困难 */
GlobalData.difficultImageBgColor = [255, 0, 255, 255];
/**疯狂 */
GlobalData.crazyImageBgColor = [255, 0, 0, 255];
/**完成 */
GlobalData.completeImageBgColor = [0, 255, 0, 255];
/**item间隔 */
GlobalData.itemPositionInterval = 270;

var foreign48 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: GlobalData
});

class Console {
    /**普通日志 */
    static log(...data) {
        if (GlobalData.logLevel < 1)
            return;
        console.log(data);
    }
    /**警告日志 */
    static warn(...data) {
        if (GlobalData.logLevel < 2)
            return;
        console.warn(data);
    }
    /**报错日志 */
    static error(...data) {
        if (GlobalData.logLevel < 3)
            return;
        console.error(data);
    }
}

var foreign105 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: Console
});

class GeneralManager {
    vscodeChange() {
        let animation;
        animation.speed = 1; // 先通过vscodeF2替换为 rate 再替换为 speed
        let obj;
        obj.gameObjectId; // 先通过vscodeF2替换为 guid 再替换为 gameObjectId
        let camera;
        camera.worldTransform; // 先通过vscodeF2替换为 transform 再替换为 worldTransform
        let model;
        model.onTouch; // 先通过vscodeF2替换为 onEnter 再替换为 onTouch
        model.onTouchEnd; // 先通过vscodeF2替换为 onLeave 再替换为 onTouchEnd 
        let effect;
        effect.maskcolor; // 先通过vscodeF2替换为 color 再替换为 maskcolor
        effect.onFinish; // 先通过vscodeF2替换为 onFinished 再替换为 onFinish
        effect.timeLength; // 先通过vscodeF2替换为 particleLength 再替换为 timeLength
        let sound;
        sound.timePosition; // 先通过vscodeF2替换为 currentProgress 再替换为 timePosition
        sound.timeLength; // 先通过vscodeF2替换为 duration 再替换为 timeLength
        sound.timeLength; // 先通过vscodeF2替换为 timelength 再替换为 timeLength
        sound.isLoop; // 先通过vscodeF2替换为 loop 再替换为 isLoop
        let transform;
        transform.position; // 先通过vscodeF2替换为 location 再替换为 position
        class module extends ModuleC {
            get localPlayer() {
                return null;
            }
            get localPlayerId() {
                return null;
            }
        }
    }
    static async asyncRpcGetData(key) {
        let value = await DataStorage.asyncGetData(key);
        return value.data;
    }
    static async asyncRpcGetPlayer(playerId) {
        let player = Player.getPlayer(playerId);
        return Promise.resolve(player);
    }
    static rpcPlayEffectOnPlayer(source, target, slotType, loopCount, offset, rotation, scale) {
        let duration = undefined;
        if (loopCount < 0) {
            duration = -loopCount;
            loopCount = undefined;
        }
        return EffectService.playOnGameObject(source, target instanceof mw.Player ? target.character : target, {
            slotType: slotType,
            loopCount: loopCount,
            duration: duration,
            position: offset,
            rotation: rotation,
            scale: scale
        });
    }
    static rpcPlayEffectOnGameObject(source, target, loopCount, offset, rotation, scale) {
        let duration = undefined;
        if (loopCount < 0) {
            duration = -loopCount;
            loopCount = undefined;
        }
        return EffectService.playOnGameObject(source, target, {
            loopCount: loopCount,
            duration: duration,
            position: offset,
            rotation: rotation,
            scale: scale
        });
    }
    static rpcPlayEffectAtLocation(source, location, loopCount, rotation, scale) {
        let duration = undefined;
        if (loopCount < 0) {
            duration = -loopCount;
            loopCount = undefined;
        }
        return EffectService.playAtPosition(source, location, {
            loopCount: loopCount,
            duration: duration,
            rotation: rotation,
            scale: scale,
        });
    }
    static modifyShowAd(adsType, callback) {
        AdsService.showAd(adsType, isSuccess => {
            if (isSuccess) {
                callback(AdsState.Success);
                callback(AdsState.Close);
                callback(AdsState.Reward);
            }
            else {
                callback(AdsState.Fail);
            }
        });
    }
    static modiftEnterInteractiveState(inter, characterObj) {
        if (!(characterObj instanceof mw.Character)) {
            return Promise.resolve(false);
        }
        let reult = inter.enter(characterObj);
        if (!reult)
            return Promise.resolve(false);
        return new Promise((resolve, reject) => {
            let resultFun = () => {
                inter.onEnter.remove(resultFun);
                resolve(true);
            };
            inter.onEnter.add(resultFun);
        });
    }
    static modifyExitInteractiveState(inter, Location, stance) {
        let result = inter.leave(Location, null, stance);
        return Promise.resolve(result);
    }
    static modifyaddOutlineEffect(obj, OutlineColor, OutlineWidth, OutlineDepthOffset, OutlineClampValue, considerCameraPosition, outlineSilhouetteOnly) {
        if (obj instanceof mw.Model) {
            obj.setOutline(true, OutlineColor, OutlineWidth);
        }
    }
    static modifyRemoveOutlineEffect(obj) {
        if (obj instanceof mw.Model) {
            obj.setOutline(false);
        }
    }
    static modiftboxOverlap(startLocation, endLocation, width, height, drawDebug, objectsToIgnore, ignoreObjectsByType, self) {
        let halfSize = new Vector(1, width / 2, height / 2);
        let orientation = Vector.subtract(endLocation, startLocation).toRotation();
        let results = QueryUtil.boxTrace(startLocation, endLocation, halfSize, orientation, true, drawDebug, objectsToIgnore, ignoreObjectsByType, self);
        let objResults = new Array();
        for (let i = 0; i < results.length; i++) {
            let obj = results[i].gameObject;
            if (!obj)
                continue;
            if (objResults.indexOf(obj) == -1)
                objResults.push(obj);
        }
        return objResults;
    }
    static modifyboxOverlapInLevel(StartLocation, EndLocation, Width, Height, debug, IgnoreObjectsGuid, IgnoreByKind, Source) {
        let halfSize = new Vector(1, Width / 2, Height / 2);
        let orientation = Vector.subtract(EndLocation, StartLocation).toRotation();
        let results = QueryUtil.boxTrace(StartLocation, EndLocation, halfSize, orientation, true, debug, IgnoreObjectsGuid, IgnoreByKind, Source);
        let objResults = new Array();
        for (let i = 0; i < results.length; i++) {
            let obj = results[i].gameObject;
            if (!obj)
                continue;
            if (objResults.indexOf(obj) == -1)
                objResults.push(obj);
        }
        return objResults;
    }
    static modifyGetShootDir(chara, startPos, shootRange) {
        const camera = Camera.currentCamera;
        let start = Vector.zero;
        let end = Vector.zero;
        let dir = Vector.zero;
        if (startPos) {
            start = startPos;
        }
        if (camera) {
            end = camera.worldTransform.position.add(camera.worldTransform.getForwardVector().multiply(shootRange));
            const hits = QueryUtil.lineTrace(camera.worldTransform.position, end, false, true, [], false, false, chara);
            dir = end.subtract(start);
            if (hits.length > 0) {
                dir = hits[0].impactPoint.subtract(start);
            }
        }
        return dir.normalize();
    }
    static modifyProjectWorldLocationToWidgetPosition(player, worldLocation, outScreenPosition, isPlayerViewportRelative) {
        let result = InputUtil.projectWorldPositionToWidgetPosition(worldLocation, isPlayerViewportRelative);
        outScreenPosition.x = result.screenPosition.x;
        outScreenPosition.y = result.screenPosition.y;
        return result.result;
    }
    static setMaterialColor(model, Index, InColor) {
        let materialList = model.getMaterialInstance();
        materialList[Index].getAllVectorParameterName().forEach((v, i) => {
            materialList[Index].setVectorParameterValue(v, InColor);
        });
    }
    static getMaterialColor(model, Index) {
        let materialList = model.getMaterialInstance();
        if (!(materialList.length > 0)) {
            return;
        }
        let nameList = materialList[Index].getAllVectorParameterName();
        return nameList.length > 0 ? materialList[Index].getVectorParameterValue(nameList[0]) : new LinearColor(1, 1, 1, 1);
    }
}

var foreign53 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    GeneralManager: GeneralManager
});

let Tween$2 = class Tween extends mw.Tween {
};
class Utils {
    /**
      * 随机获取指定范围内的整数
      * @param Min 起始值
      * @param Max 最大值
      * @returns 随机整数[min, max]
      */
    static getRandomInteger(min, max) {
        let Range = max - min;
        let Rand = Math.random();
        return (min + Math.round(Rand * Range));
    }
    /**
     * 获取指定范围内的随机数, decimalNum指小数保留多少位
     * @param maxNum 最大值
     * @param minNum 最小值
     * @param decimalNum 保留几位数
     * @returns 随机数[min, max]
     */
    static getRandomDecimals(maxNum = 0, minNum = 0, decimalNum = 0) {
        let max = 0;
        let min = 0;
        minNum <= maxNum ? (min = minNum, max = maxNum) : (min = maxNum, max = minNum);
        switch (arguments.length) {
            case 1:
                return Math.floor(Math.random() * (max + 1));
            case 2:
                return Math.floor(Math.random() * (max - min + 1) + min);
            case 3:
                return Number((Math.random() * (max - min) + min).toFixed(decimalNum));
            default:
                return Math.random();
        }
    }
    /**
     * 获取贝塞尔曲线的点的集合
     * @param points 点的集合, 至少包含起点和终点
     * @param num 想要生成多少点
     * @returns
     */
    static getCurvePointsInNum(points, num) {
        let result = new Array();
        for (let i = 0; i < num; i++) {
            let t = i / (num - 1);
            let point = this.getKeyPoint(points, t);
            result.push(point);
        }
        return result;
    }
    static getKeyPoint(points, t) {
        if (points.length > 1) {
            let dirs = new Array();
            for (let i = 0; i < points.length - 1; i++) {
                dirs.push(new mw.Vector(points[i + 1].x - points[i].x, points[i + 1].y - points[i].y, points[i + 1].z - points[i].z));
            }
            let points2 = new Array();
            for (let j = 0; j < dirs.length; j++) {
                points2.push(new mw.Vector(points[j].x + dirs[j].x * t, points[j].y + dirs[j].y * t, points[j].z + dirs[j].z * t));
            }
            return this.getKeyPoint(points2, t);
        }
        else {
            return new mw.Vector(points[0].x, points[0].y, points[0].z);
        }
    }
    /**
     * 震荡函数
     * @param x
     * @param speed 震荡衰减/增益的速度
     * @param frequency 震荡的频率
     * @param amplitude 震荡的幅度
     * @returns
     */
    static shakeFunc(x, speed, frequency, amplitude) {
        return (Math.pow(speed, -x) * Math.sin(2 * frequency * Math.PI * x)) / amplitude;
    }
    /**
     * 获取三维向量的夹角(点乘 - dot product)
     * @param center 夹角中心点
     * @param start 起始点
     * @param end 结束点
     * @returns 返回夹角
     */
    static getTdAngle(center, start, end) {
        let x1 = start.x - center.x, y1 = start.y - center.y, z1 = start.z - center.z;
        let x2 = end.x - center.x, y2 = end.y - center.y, z2 = end.z - center.z;
        let vectorDot = x1 * x2 + y1 * y2 + z1 * z2;
        let vectorMold1 = Math.sqrt(Math.pow(x1, 2) + Math.pow(y1, 2) + Math.pow(z1, 2));
        let vectorMold2 = Math.sqrt(Math.pow(x2, 2) + Math.pow(y2, 2) + Math.pow(z2, 2));
        let cosAngle = vectorDot / (vectorMold1 * vectorMold2);
        let radian = Math.acos(cosAngle);
        return (180 / Math.PI * radian);
    }
    /**
    * 获取两个向量围成的面积（叉乘 - multiplication cross）
    * @param center 夹角中心点
    * @param start 起始点
    * @param end 结束点
    * @returns 面积
    */
    static getmsArea(center, start, end) {
        let x1 = start.x - center.x, y1 = start.y - center.y, z1 = start.z - center.z;
        let x2 = end.x - center.x, y2 = end.y - center.y, z2 = end.z - center.z;
        let vectorMultiplication = new mw.Vector(y1 * z2 - z1 * y2, z1 * x2 - x1 * z2, x1 * y2 - y1 * x2);
        Console.error("[叉乘 - vectorMultiplication]" + vectorMultiplication);
        let area = Math.sqrt(Math.pow(vectorMultiplication.x, 2) + Math.pow(vectorMultiplication.y, 2) + Math.pow(vectorMultiplication.z, 2));
        return area;
    }
    /**得到今天日期 */
    static getDay() {
        let day = "";
        day += new Date().getFullYear();
        day += (new Date().getMonth() + 1);
        day += new Date().getDate();
        return day;
    }
    /**今天是星期几 */
    static getWhatDay() {
        let whatDay = "7123456".charAt(new Date().getDay());
        Console.error("whatDay = [" + whatDay + "]");
        return whatDay;
    }
    /**
     * 随机从数组中取出num个数据
     * @param arr 数组
     * @param num 多少个
     * @returns 数组
     */
    static getRandomArr(arr, num) {
        let len = arr.length;
        for (let i = len - 1; i >= 0; --i) {
            let randomIndex = Math.floor(Math.random() * (i + 1));
            let itemIndex = arr[randomIndex];
            arr[randomIndex] = arr[i];
            arr[i] = itemIndex;
        }
        let arrList = [];
        for (let i = 0; i < num; ++i) {
            arrList.push(arr[i]);
        }
        return arrList;
    }
    /**随机两个不一样的颜色 */
    static randomColor() {
        let colors = [mw.LinearColor.red, mw.LinearColor.green, mw.LinearColor.blue,
            mw.LinearColor.yellow, new mw.LinearColor(1, 0, 1, 1), new mw.LinearColor(0, 1, 1, 1), mw.LinearColor.white];
        let fontColor = colors[this.getRandomInteger(0, colors.length - 1)];
        let outlineColor = colors[this.getRandomInteger(0, colors.length - 1)];
        while (fontColor.a == outlineColor.a && fontColor.r == outlineColor.r
            && fontColor.g == outlineColor.g && fontColor.b == outlineColor.b) {
            outlineColor = colors[this.getRandomInteger(0, colors.length - 1)];
            Console.error("颜色重复");
        }
        return [fontColor, outlineColor];
    }
    static circularRandomCoordinates(point, radius, centerZ) {
        const u = Math.random();
        const theta = Math.random() * 2 * Math.PI;
        const r = Math.sqrt(u);
        return new mw.Vector(point.x + r * Math.cos(theta) * radius, point.y + r * Math.sin(theta) * radius, centerZ);
    }
    static getWeapon() {
        return this.bossWeapons[this.getRandomInteger(0, this.bossWeapons.length - 1)];
    }
    static getBoss() {
        return this.npcString[this.getRandomInteger(0, this.npcString.length - 1)];
    }
    static setWidgetVisibility(ui, visibility) {
        if (ui.visibility != visibility)
            ui.visibility = visibility;
    }
    static randomNpcName() {
        return this.npcNames[this.getRandomInteger(0, this.npcNames.length - 1)];
    }
    /**根据数字获取汉字*/
    static numChangeToCN(num) {
        if (this.tens[num]) {
            return this.tens[num];
        }
        else if (num > 10 && num < 20) {
            let numStr = num.toString();
            let n = numStr.substring(1, 2);
            let result = this.digitalUnits[1] + this.tens[n];
            return result;
        }
        else if (num > 10) {
            let result = "";
            let numStr = num.toString();
            for (var i = 0; i < numStr.length; ++i) {
                let n = numStr.substring(i, i + 1);
                let m = numStr.length - i - 1;
                result += this.tens[n] + this.digitalUnits[m];
            }
            return result;
        }
        else
            return "零";
    }
    static setImageByAssetIconData(image, icon) {
        if (this.assetIconDataMap.has(icon)) {
            image.setImageByAssetIconData(this.assetIconDataMap.get(icon));
        }
        else {
            mw.assetIDChangeIconUrlRequest([icon]).then(() => {
                try {
                    let assetIconData = mw.getAssetIconDataByAssetID(icon);
                    image.setImageByAssetIconData(assetIconData);
                    this.assetIconDataMap.set(icon, assetIconData);
                }
                catch (error) { }
            });
        }
    }
}
/**资源下载 */
// public static async downloadAsset(guid: string): Promise<void> {
//     if (!mw.AssetUtil.assetLoaded(guid)) {
//         await mw.AssetUtil.asyncDownloadAsset(guid);
//     }
// }
Utils.bossWeapons = [
    "122952",
    "29054",
    "29047",
    "218730",
    "31728"
];
Utils.npcString = ["162971", "163330", "136183", "142879", "141623", "136298", "137837", "141926", "141927", "141928", "142184", "142188", "142191", "142192", "142258", "142260", "142922", "142926", "142923", "142928", "142927", "142136", "142137", "142138", "142261", "142257", "142925", "143236", "143227", "142914", "142913", "143234", "141618", "142193", "142194", "142915", "142916", "142917", "142918", "142919", "142920", "142924", "142929", "142930", "143226", "143228", "143229", "143230", "143231", "143233", "142907", "142888", "142900", "142889", "142884", "142885", "142886", "142887", "142890", "142891", "142892", "142893", "142894", "142895", "142896", "142898", "142901", "142272", "142903", "142904", "142905", "142906", "142899"];
Utils.npcNames = ["张吉惟", "林国瑞", "林玫书", "林雅南", "江奕云", "刘柏宏", "阮建安", "林子帆", "夏志豪", "吉茹定", "李中冰", "谢彦文", "傅智翔", "洪振霞", "刘姿婷", "荣姿康", "吕致盈", "方一强", "黎芸贵", "郑伊雯", "雷进宝", "吴美隆", "吴心真", "王美珠", "郭芳天", "李雅惠", "陈文婷", "曹敏侑", "王依婷", "陈婉璇", "吴美玉", "蔡依婷", "郑昌梦", "林家纶", "黄丽昆", "李育泉", "黄芸欢", "吴韵如", "李肇芬", "卢木仲", "李成白", "方兆玉", "刘翊惠", "丁汉臻", "吴佳瑞", "舒绿珮", "周白芷", "张姿妤", "张虹伦", "周琼玫", "倪怡芳", "郭贵妃", "杨佩芳", "黄盛玫", "郑丽青", "许智云", "张孟涵", "李小爱", "王恩龙", "朱政廷", "邓诗涵", "陈政倩", "吴俊伯", "阮馨学", "翁惠珠", "吴思翰", "林佩玲", "邓海来", "陈翊依", "李建智", "武淑芬", "金雅琪", "赖怡宜", "黄育霖", "张仪湖", "王俊民", "张诗刚", "林慧颖", "沈俊君", "陈淑妤", "李姿伶", "高咏钰", "黄彦宜", "周孟儒", "潘欣臻", "李祯韵", "叶洁启", "梁哲宇", "黄晓萍", "杨雅萍", "卢志铭", "张茂以", "林婉婷", "蔡宜芸", "林珮瑜", "黄柏仪", "周逸珮", "夏雅惠", "王采珮", "林孟霖", "林竹水", "王怡乐", "王爱乐", "金佳蓉", "韩健毓", "李士杰", "陈董珍", "苏姿婷", "张政霖", "李志宏", "陈素达", "陈虹荣", "何美玲", "李仪琳", "张俞幸", "黄秋萍", "潘吉维"];
Utils.tens = ["", "一", "二", "三", "四", "五", "六", "七", "八", "九", "十"];
Utils.digitalUnits = ["", '十', '百', '千', '万', '亿', '十', '百', '千'];
Utils.assetIconDataMap = new Map();
/**贝塞尔曲线 */
function cubicBezier(p1x, p1y, p2x, p2y) {
    const ZERO_LIMIT = 1e-6;
    const ax = 3 * p1x - 3 * p2x + 1;
    const bx = 3 * p2x - 6 * p1x;
    const cx = 3 * p1x;
    const ay = 3 * p1y - 3 * p2y + 1;
    const by = 3 * p2y - 6 * p1y;
    const cy = 3 * p1y;
    function sampleCurveDerivativeX(t) {
        return (3 * ax * t + 2 * bx) * t + cx;
    }
    function sampleCurveX(t) {
        return ((ax * t + bx) * t + cx) * t;
    }
    function sampleCurveY(t) {
        return ((ay * t + by) * t + cy) * t;
    }
    function solveCurveX(x) {
        let t2 = x;
        let derivative;
        let x2;
        for (let i = 0; i < 8; i++) {
            x2 = sampleCurveX(t2) - x;
            if (Math.abs(x2) < ZERO_LIMIT) {
                return t2;
            }
            derivative = sampleCurveDerivativeX(t2);
            if (Math.abs(derivative) < ZERO_LIMIT) {
                break;
            }
            t2 -= x2 / derivative;
        }
        let t1 = 1;
        let t0 = 0;
        t2 = x;
        while (t1 > t0) {
            x2 = sampleCurveX(t2) - x;
            if (Math.abs(x2) < ZERO_LIMIT) {
                return t2;
            }
            if (x2 > 0) {
                t1 = t2;
            }
            else {
                t0 = t2;
            }
            t2 = (t1 + t0) / 2;
        }
        return t2;
    }
    function solve(x) {
        return sampleCurveY(solveCurveX(x));
    }
    return solve;
}

var foreign108 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    Tween: Tween$2,
    Utils: Utils,
    cubicBezier: cubicBezier
});

class FlyText {
    constructor() {
        this._uiWidget = null;
        this._rootCanvas = null;
        this._textPools = [];
        /**默认文本框大小（由于开启了自适应，所以文本框有多大，文本就有多大） */
        this._defaultTextSize = new Vector2(200, 100);
        /**默认文本颜色 */
        this._defaultFontColor = LinearColor.white;
        /**默认文本描边颜色 */
        this._defaultOutlineColor = new mw.LinearColor(1, 0, 1, 1);
    }
    static get instance() {
        if (FlyText._instance == null) {
            FlyText._instance = new FlyText();
        }
        return FlyText._instance;
    }
    /**
     * 展示飘字
     * @param content 内容
     * @param worldLocation 世界坐标
     * @param fontColor 颜色（可选）
     */
    showFlyText(content, worldLocation, fontColor, outlineColor) {
        // 将世界坐标转换为屏幕坐标
        let vec2 = mw.InputUtil.projectWorldPositionToWidgetPosition(worldLocation, true).screenPosition;
        // 对象池处理
        let textBlock = null;
        if (this._textPools.length == 0) {
            textBlock = this.createText();
        }
        else {
            textBlock = this._textPools.pop();
        }
        // 给一点初始偏移，方便做动画
        vec2.x -= 120;
        vec2.y -= 160;
        let toX = this.getRandomIntInclusive(100, 300);
        Math.random() < 0.5 ? toX = -toX : toX = toX;
        let toY = this.getRandomIntInclusive(-300, 100);
        // 用Tween，并结合PI来做曲线动画
        let animator = new mw.Tween({ a: 0 }).to({ a: Math.PI }, 1000).onUpdate((object) => {
            textBlock.position = vec2.clone().add(new mw.Vector2(toX * object.a / Math.PI, toY * Math.sin(object.a)));
            textBlock.renderScale = new mw.Vector2(Math.sin(object.a));
        }).onStart(() => {
            textBlock.fontColor = fontColor ? fontColor : this._defaultFontColor;
            textBlock.outlineColor = outlineColor ? outlineColor : this._defaultOutlineColor;
            textBlock.text = content;
            textBlock.visibility = mw.SlateVisibility.SelfHitTestInvisible;
        }).onComplete(() => {
            textBlock.visibility = mw.SlateVisibility.Hidden;
            this._textPools.push(textBlock);
        });
        animator.start();
    }
    /**创建一个文本框 */
    createText() {
        // 首次创建，如果没有UI对象，就创建一个
        if (!this._uiWidget) {
            // 创建一个UI对象
            this._uiWidget = mw.UserWidget.newObject();
            this._uiWidget.addToViewport(1);
            // 首次创建，如果没有rootCanvas，就创建一个
            if (!this._rootCanvas) {
                this._rootCanvas = mw.Canvas.newObject();
                this._rootCanvas.size = new mw.Vector2(1920, 1080);
                this._rootCanvas.position = mw.Vector2.zero;
                this._uiWidget.rootContent = this._rootCanvas;
            }
        }
        // 创建一个文本框，并添加到画布上
        let textBlock = mw.TextBlock.newObject(this._rootCanvas);
        textBlock.size = this._defaultTextSize;
        // 开启文本自适应
        textBlock.fontSize = 60;
        textBlock.fontLetterSpace = 1;
        textBlock.textHorizontalLayout = mw.UITextHorizontalLayout.NoClipping;
        textBlock.autoAdjust = false;
        textBlock.outlineSize = 8;
        textBlock.glyph = mw.UIFontGlyph.Light;
        return textBlock;
    }
    /**得到一个两数之间的随机整数，包括两个数在内 */
    getRandomIntInclusive(min, max) {
        min = Math.ceil(min);
        max = Math.floor(max);
        return Math.floor(Math.random() * (max - min + 1)) + min; //含最大值，含最小值 
    }
}

var foreign7 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    FlyText: FlyText
});

class ExplosiveCoins {
    constructor() {
        this.mapId = 0;
        this.maxMapId = 10;
        this.particles = [];
        this.recycleParticles = new Map();
        this.player = null;
    }
    static get instance() {
        if (ExplosiveCoins._instance == null) {
            ExplosiveCoins._instance = new ExplosiveCoins();
        }
        return ExplosiveCoins._instance;
    }
    /**爆金币 */
    explosiveCoins(fromVec, coinCount = 1, coinNum = 10) {
        // coinCount = Math.round(coinCount / coinNum);
        if (this.mapId >= this.maxMapId)
            this.mapId = 0;
        let mapId = this.mapId++;
        this.play3DSound(fromVec);
        for (let i = 0; i < coinNum; ++i) {
            this.startExplosiveCoins(fromVec, mapId);
        }
        TimeUtil.delaySecond(2).then(() => {
            if (this.particles[mapId] == null || this.particles[mapId] == undefined)
                return;
            this.particles[mapId].forEach((particle, effectId) => {
                let fromVec = particle.worldTransform.position;
                let toVec = mw.Vector.zero;
                if (this.player == null)
                    this.player = Player.localPlayer;
                toVec = this.player.character.worldTransform.position;
                new mw.Tween({ x: fromVec.x, y: fromVec.y, z: fromVec.z })
                    .to({ x: toVec.x, y: toVec.y, z: toVec.z }, 0.1 * 1000)
                    .onUpdate((pos) => {
                    particle.worldTransform.position = (new mw.Vector(pos.x, pos.y, pos.z));
                })
                    .start()
                    .onComplete(() => {
                    particle.stop();
                    this.recycleParticles.set(effectId, particle);
                    this.particles[mapId].delete(effectId);
                });
            });
            TimeUtil.delaySecond(0.1).then(() => {
                Console.error("hkz3");
                let vec = this.player.character.worldTransform.position;
                FlyText.instance.showFlyText("+Exp " + coinCount, new mw.Vector(vec.x, vec.y, vec.z + 30), mw.LinearColor.green, mw.LinearColor.yellow);
            });
            this.play3DSound(this.player.character.worldTransform.position);
            Console.error("hkz4");
        });
    }
    async startExplosiveCoins(fromVec, mapId) {
        let effectId = 0;
        let particle = null;
        if (this.recycleParticles.size > 0) {
            effectId = this.recycleParticles.keys().next().value;
            particle = this.recycleParticles.get(effectId);
            this.recycleParticles.delete(effectId);
        }
        else {
            effectId = GeneralManager.rpcPlayEffectAtLocation("176198", fromVec, 0);
            particle = await EffectService.getEffectById(effectId);
        }
        particle.loop = true;
        particle.play();
        Console.error("[effectId] = " + effectId);
        Console.error("[particle.guid] = " + particle.gameObjectId);
        if (!particle || !effectId)
            return;
        let toVec = Utils.circularRandomCoordinates(fromVec, 400, 20);
        let moddleVec = new mw.Vector((fromVec.x + toVec.x) / 2, (fromVec.y + toVec.y) / 2, fromVec.z + Utils.getRandomInteger(150, 250));
        let points = Utils.getCurvePointsInNum([fromVec, moddleVec, toVec], 10);
        for (let j = 0; j < points.length - 1; ++j) {
            await new Promise((resolve) => {
                new mw.Tween({ x: points[j].x, y: points[j].y, z: points[j].z })
                    .to({ x: points[j + 1].x, y: points[j + 1].y, z: points[j + 1].z }, 0.5 * 1000 / 10)
                    .onUpdate((pos) => {
                    particle.worldTransform.position = (new mw.Vector(pos.x, pos.y, pos.z));
                })
                    .start();
                setTimeout(() => {
                    return resolve();
                }, 0.5 * 1000 / 10);
            });
        }
        if (this.particles[mapId] == null)
            this.particles[mapId] = new Map();
        this.particles[mapId].set(effectId, particle);
    }
    play3DSound(fromVec) {
        let soundId = SoundService.play3DSound("148629", fromVec);
        TimeUtil.delaySecond(0.5).then(() => {
            SoundService.stop3DSound(soundId);
        });
    }
}

var foreign5 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    ExplosiveCoins: ExplosiveCoins
});

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise */


function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}

/**
 * AUTO GENERATE BY UI EDITOR.
 * WARNING: DO NOT MODIFY THIS FILE,MAY CAUSE CODE LOST.
 * AUTHOR: 爱玩游戏的小胖子
 * UI: UI/common/notice/NoticeView.ui
 * TIME: 2024.08.04-18.39.52
 */
let NoticeView_Generate = class NoticeView_Generate extends UIScript {
    get con_top_notice() {
        if (!this.con_top_notice_Internal && this.uiWidgetBase) {
            this.con_top_notice_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/con_top_notice');
        }
        return this.con_top_notice_Internal;
    }
    get con_second_notice() {
        if (!this.con_second_notice_Internal && this.uiWidgetBase) {
            this.con_second_notice_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/con_second_notice');
        }
        return this.con_second_notice_Internal;
    }
    get con_top_notice_2() {
        if (!this.con_top_notice_2_Internal && this.uiWidgetBase) {
            this.con_top_notice_2_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/con_top_notice_2');
        }
        return this.con_top_notice_2_Internal;
    }
    onAwake() {
        //设置能否每帧触发onUpdate
        this.canUpdate = false;
        this.layer = mw.UILayerBottom;
        this.initButtons();
    }
    initButtons() {
        //按钮添加点击
        //按钮添加点击
        //按钮多语言
        //文本多语言
        //文本多语言
    }
    /*初始化多语言*/
    initLanguage(ui) {
        let call = mw.UIScript.getBehavior("lan");
        if (call && ui) {
            call(ui);
        }
    }
    onShow(...params) { }
    ;
    /*显示panel*/
    show(...param) {
        mw.UIService.showUI(this, this.layer, ...param);
    }
    /*隐藏panel*/
    hide() {
        mw.UIService.hideUI(this);
    }
};
NoticeView_Generate = __decorate([
    UIBind('UI/common/notice/NoticeView.ui')
], NoticeView_Generate);
var NoticeView_Generate$1 = NoticeView_Generate;

var foreign114 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: NoticeView_Generate$1
});

/**
 * AUTO GENERATE BY UI EDITOR.
 * WARNING: DO NOT MODIFY THIS FILE,MAY CAUSE CODE LOST.
 * AUTHOR: 爱玩游戏的小胖子
 * UI: UI/common/notice/TopNoticeItem.ui
 * TIME: 2024.08.04-18.39.52
 */
let TopNoticeItem_Generate = class TopNoticeItem_Generate extends UIScript {
    get txt_context() {
        if (!this.txt_context_Internal && this.uiWidgetBase) {
            this.txt_context_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/txt_context');
        }
        return this.txt_context_Internal;
    }
    get eff() {
        if (!this.eff_Internal && this.uiWidgetBase) {
            this.eff_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/eff');
        }
        return this.eff_Internal;
    }
    get eff_line_1() {
        if (!this.eff_line_1_Internal && this.uiWidgetBase) {
            this.eff_line_1_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/eff_line_1');
        }
        return this.eff_line_1_Internal;
    }
    get eff_line_1_1() {
        if (!this.eff_line_1_1_Internal && this.uiWidgetBase) {
            this.eff_line_1_1_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/eff_line_1_1');
        }
        return this.eff_line_1_1_Internal;
    }
    onAwake() {
        //设置能否每帧触发onUpdate
        this.canUpdate = false;
        this.layer = mw.UILayerBottom;
        this.initButtons();
    }
    initButtons() {
        //按钮添加点击
        //按钮添加点击
        //按钮多语言
        //文本多语言
        this.initLanguage(this.txt_context);
        //文本多语言
    }
    /*初始化多语言*/
    initLanguage(ui) {
        let call = mw.UIScript.getBehavior("lan");
        if (call && ui) {
            call(ui);
        }
    }
    onShow(...params) { }
    ;
    /*显示panel*/
    show(...param) {
        mw.UIService.showUI(this, this.layer, ...param);
    }
    /*隐藏panel*/
    hide() {
        mw.UIService.hideUI(this);
    }
};
TopNoticeItem_Generate = __decorate([
    UIBind('UI/common/notice/TopNoticeItem.ui')
], TopNoticeItem_Generate);
var TopNoticeItem_Generate$1 = TopNoticeItem_Generate;

var foreign116 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: TopNoticeItem_Generate$1
});

/**
 * The Ease class provides a collection of easing functions for use with tween.js.
 */
const Easing = {
    Linear: {
        None: function (amount) {
            return amount;
        },
    },
    Quadratic: {
        In: function (amount) {
            return amount * amount;
        },
        Out: function (amount) {
            return amount * (2 - amount);
        },
        InOut: function (amount) {
            if ((amount *= 2) < 1) {
                return 0.5 * amount * amount;
            }
            return -0.5 * (--amount * (amount - 2) - 1);
        },
    },
    Cubic: {
        In: function (amount) {
            return amount * amount * amount;
        },
        Out: function (amount) {
            return --amount * amount * amount + 1;
        },
        InOut: function (amount) {
            if ((amount *= 2) < 1) {
                return 0.5 * amount * amount * amount;
            }
            return 0.5 * ((amount -= 2) * amount * amount + 2);
        },
    },
    Quartic: {
        In: function (amount) {
            return amount * amount * amount * amount;
        },
        Out: function (amount) {
            return 1 - --amount * amount * amount * amount;
        },
        InOut: function (amount) {
            if ((amount *= 2) < 1) {
                return 0.5 * amount * amount * amount * amount;
            }
            return -0.5 * ((amount -= 2) * amount * amount * amount - 2);
        },
    },
    Quintic: {
        In: function (amount) {
            return amount * amount * amount * amount * amount;
        },
        Out: function (amount) {
            return --amount * amount * amount * amount * amount + 1;
        },
        InOut: function (amount) {
            if ((amount *= 2) < 1) {
                return 0.5 * amount * amount * amount * amount * amount;
            }
            return 0.5 * ((amount -= 2) * amount * amount * amount * amount + 2);
        },
    },
    Sinusoidal: {
        In: function (amount) {
            return 1 - Math.sin(((1.0 - amount) * Math.PI) / 2);
        },
        Out: function (amount) {
            return Math.sin((amount * Math.PI) / 2);
        },
        InOut: function (amount) {
            return 0.5 * (1 - Math.sin(Math.PI * (0.5 - amount)));
        },
    },
    Exponential: {
        In: function (amount) {
            return amount === 0 ? 0 : Math.pow(1024, amount - 1);
        },
        Out: function (amount) {
            return amount === 1 ? 1 : 1 - Math.pow(2, -10 * amount);
        },
        InOut: function (amount) {
            if (amount === 0) {
                return 0;
            }
            if (amount === 1) {
                return 1;
            }
            if ((amount *= 2) < 1) {
                return 0.5 * Math.pow(1024, amount - 1);
            }
            return 0.5 * (-Math.pow(2, -10 * (amount - 1)) + 2);
        },
    },
    Circular: {
        In: function (amount) {
            return 1 - Math.sqrt(1 - amount * amount);
        },
        Out: function (amount) {
            return Math.sqrt(1 - --amount * amount);
        },
        InOut: function (amount) {
            if ((amount *= 2) < 1) {
                return -0.5 * (Math.sqrt(1 - amount * amount) - 1);
            }
            return 0.5 * (Math.sqrt(1 - (amount -= 2) * amount) + 1);
        },
    },
    Elastic: {
        In: function (amount) {
            if (amount === 0) {
                return 0;
            }
            if (amount === 1) {
                return 1;
            }
            return -Math.pow(2, 10 * (amount - 1)) * Math.sin((amount - 1.1) * 5 * Math.PI);
        },
        Out: function (amount) {
            if (amount === 0) {
                return 0;
            }
            if (amount === 1) {
                return 1;
            }
            return Math.pow(2, -10 * amount) * Math.sin((amount - 0.1) * 5 * Math.PI) + 1;
        },
        InOut: function (amount) {
            if (amount === 0) {
                return 0;
            }
            if (amount === 1) {
                return 1;
            }
            amount *= 2;
            if (amount < 1) {
                return -0.5 * Math.pow(2, 10 * (amount - 1)) * Math.sin((amount - 1.1) * 5 * Math.PI);
            }
            return 0.5 * Math.pow(2, -10 * (amount - 1)) * Math.sin((amount - 1.1) * 5 * Math.PI) + 1;
        },
    },
    Back: {
        In: function (amount) {
            const s = 1.70158;
            return amount === 1 ? 1 : amount * amount * ((s + 1) * amount - s);
        },
        Out: function (amount) {
            const s = 1.70158;
            return amount === 0 ? 0 : --amount * amount * ((s + 1) * amount + s) + 1;
        },
        InOut: function (amount) {
            const s = 1.70158 * 1.525;
            if ((amount *= 2) < 1) {
                return 0.5 * (amount * amount * ((s + 1) * amount - s));
            }
            return 0.5 * ((amount -= 2) * amount * ((s + 1) * amount + s) + 2);
        },
    },
    Bounce: {
        In: function (amount) {
            return 1 - Easing.Bounce.Out(1 - amount);
        },
        Out: function (amount) {
            if (amount < 1 / 2.75) {
                return 7.5625 * amount * amount;
            }
            else if (amount < 2 / 2.75) {
                return 7.5625 * (amount -= 1.5 / 2.75) * amount + 0.75;
            }
            else if (amount < 2.5 / 2.75) {
                return 7.5625 * (amount -= 2.25 / 2.75) * amount + 0.9375;
            }
            else {
                return 7.5625 * (amount -= 2.625 / 2.75) * amount + 0.984375;
            }
        },
        InOut: function (amount) {
            if (amount < 0.5) {
                return Easing.Bounce.In(amount * 2) * 0.5;
            }
            return Easing.Bounce.Out(amount * 2 - 1) * 0.5 + 0.5;
        },
    },
    generatePow: function (power = 4) {
        power = power < Number.EPSILON ? Number.EPSILON : power;
        power = power > 10000 ? 10000 : power;
        return {
            In: function (amount) {
                return amount ** power;
            },
            Out: function (amount) {
                return 1 - (1 - amount) ** power;
            },
            InOut: function (amount) {
                if (amount < 0.5) {
                    return (amount * 2) ** power / 2;
                }
                return (1 - (2 - amount * 2) ** power) / 2 + 0.5;
            },
        };
    },
};
/**
 *
 */
const Interpolation = {
    Linear: function (v, k) {
        const m = v.length - 1;
        const f = m * k;
        const i = Math.floor(f);
        const fn = Interpolation.Utils.Linear;
        if (k < 0) {
            return fn(v[0], v[1], f);
        }
        if (k > 1) {
            return fn(v[m], v[m - 1], m - f);
        }
        return fn(v[i], v[i + 1 > m ? m : i + 1], f - i);
    },
    Bezier: function (v, k) {
        let b = 0;
        const n = v.length - 1;
        const pw = Math.pow;
        const bn = Interpolation.Utils.Bernstein;
        for (let i = 0; i <= n; i++) {
            b += pw(1 - k, n - i) * pw(k, i) * v[i] * bn(n, i);
        }
        return b;
    },
    CatmullRom: function (v, k) {
        const m = v.length - 1;
        let f = m * k;
        let i = Math.floor(f);
        const fn = Interpolation.Utils.CatmullRom;
        if (v[0] === v[m]) {
            if (k < 0) {
                i = Math.floor((f = m * (1 + k)));
            }
            return fn(v[(i - 1 + m) % m], v[i], v[(i + 1) % m], v[(i + 2) % m], f - i);
        }
        else {
            if (k < 0) {
                return v[0] - (fn(v[0], v[0], v[1], v[1], -f) - v[0]);
            }
            if (k > 1) {
                return v[m] - (fn(v[m], v[m], v[m - 1], v[m - 1], f - m) - v[m]);
            }
            return fn(v[i ? i - 1 : 0], v[i], v[m < i + 1 ? m : i + 1], v[m < i + 2 ? m : i + 2], f - i);
        }
    },
    Utils: {
        Linear: function (p0, p1, t) {
            return (p1 - p0) * t + p0;
        },
        Bernstein: function (n, i) {
            const fc = Interpolation.Utils.Factorial;
            return fc(n) / fc(i) / fc(n - i);
        },
        Factorial: (function () {
            const a = [1];
            return function (n) {
                let s = 1;
                if (a[n]) {
                    return a[n];
                }
                for (let i = n; i > 1; i--) {
                    s *= i;
                }
                a[n] = s;
                return s;
            };
        })(),
        CatmullRom: function (p0, p1, p2, p3, t) {
            const v0 = (p2 - p0) * 0.5;
            const v1 = (p3 - p1) * 0.5;
            const t2 = t * t;
            const t3 = t * t2;
            return (2 * p1 - 2 * p2 + v0 + v1) * t3 + (-3 * p1 + 3 * p2 - 2 * v0 - v1) * t2 + v0 * t + p1;
        },
    },
};
class Sequence {
    static nextId() {
        return Sequence._nextId++;
    }
}
Sequence._nextId = 0;
class Group {
    constructor() {
        this._tweens = {};
        this._tweensAddedDuringUpdate = {};
    }
    getAll() {
        return Object.keys(this._tweens).map(tweenId => {
            return this._tweens[tweenId];
        });
    }
    removeAll() {
        this._tweens = {};
    }
    add(tween) {
        this._tweens[tween.getId()] = tween;
        this._tweensAddedDuringUpdate[tween.getId()] = tween;
    }
    remove(tween) {
        delete this._tweens[tween.getId()];
        delete this._tweensAddedDuringUpdate[tween.getId()];
    }
    update(time = now(), preserve = false) {
        let tweenIds = Object.keys(this._tweens);
        if (tweenIds.length === 0) {
            return false;
        }
        // Tweens are updated in "batches". If you add a new tween during an
        // update, then the new tween will be updated in the next batch.
        // If you remove a tween during an update, it may or may not be updated.
        // However, if the removed tween was added during the current batch,
        // then it will not be updated.
        while (tweenIds.length > 0) {
            this._tweensAddedDuringUpdate = {};
            for (let i = 0; i < tweenIds.length; i++) {
                const tween = this._tweens[tweenIds[i]];
                const autoStart = !preserve;
                if (tween && tween.update(time, autoStart) === false && !preserve) {
                    delete this._tweens[tweenIds[i]];
                }
            }
            tweenIds = Object.keys(this._tweensAddedDuringUpdate);
        }
        return true;
    }
}
const mainGroup = new Group();
const now = function () {
    return Date.now();
};
let Tween$1 = class Tween {
    constructor(_object, _group = mainGroup) {
        this._object = _object;
        this._group = _group;
        this._isPaused = false;
        this._pauseStart = 0;
        this._valuesStart = {};
        this._valuesEnd = {};
        this._valuesStartRepeat = {};
        this._duration = 1000;
        this._initialRepeat = 0;
        this._repeat = 0;
        this._yoyo = false;
        this._isPlaying = false;
        this._reversed = false;
        this._delayTime = 0;
        this._startTime = 0;
        this._easingFunction = Easing.Linear.None;
        this._interpolationFunction = Interpolation.Linear;
        // eslint-disable-next-line
        this._chainedTweens = [];
        this._onStartCallbackFired = false;
        this._id = Sequence.nextId();
        this._isChainStopped = false;
        this._goToEnd = false;
    }
    getId() {
        return this._id;
    }
    isPlaying() {
        return this._isPlaying;
    }
    isPaused() {
        return this._isPaused;
    }
    to(properties, duration) {
        // TODO? restore this, then update the 07_dynamic_to example to set fox
        // tween's to on each update. That way the behavior is opt-in (there's
        // currently no opt-out).
        // for (const prop in properties) this._valuesEnd[prop] = properties[prop]
        this._valuesEnd = Object.create(properties);
        if (duration !== undefined) {
            this._duration = duration;
        }
        return this;
    }
    duration(d = 1000) {
        this._duration = d;
        return this;
    }
    start(time = now()) {
        if (this._isPlaying) {
            return this;
        }
        // eslint-disable-next-line
        this._group && this._group.add(this);
        this._repeat = this._initialRepeat;
        if (this._reversed) {
            // If we were reversed (f.e. using the yoyo feature) then we need to
            // flip the tween direction back to forward.
            this._reversed = false;
            for (const property in this._valuesStartRepeat) {
                this._swapEndStartRepeatValues(property);
                this._valuesStart[property] = this._valuesStartRepeat[property];
            }
        }
        this._isPlaying = true;
        this._isPaused = false;
        this._onStartCallbackFired = false;
        this._isChainStopped = false;
        this._startTime = time;
        this._startTime += this._delayTime;
        this._setupProperties(this._object, this._valuesStart, this._valuesEnd, this._valuesStartRepeat);
        return this;
    }
    _setupProperties(_object, _valuesStart, _valuesEnd, _valuesStartRepeat) {
        for (const property in _valuesEnd) {
            const startValue = _object[property];
            const startValueIsArray = Array.isArray(startValue);
            const propType = startValueIsArray ? 'array' : typeof startValue;
            const isInterpolationList = !startValueIsArray && Array.isArray(_valuesEnd[property]);
            // If `to()` specifies a property that doesn't exist in the source object,
            // we should not set that property in the object
            if (propType === 'undefined' || propType === 'function') {
                continue;
            }
            // Check if an Array was provided as property value
            if (isInterpolationList) {
                let endValues = _valuesEnd[property];
                if (endValues.length === 0) {
                    continue;
                }
                // handle an array of relative values
                endValues = endValues.map(this._handleRelativeValue.bind(this, startValue));
                // Create a local copy of the Array with the start value at the front
                _valuesEnd[property] = [startValue].concat(endValues);
            }
            // handle the deepness of the values
            if ((propType === 'object' || startValueIsArray) && startValue && !isInterpolationList) {
                _valuesStart[property] = startValueIsArray ? [] : {};
                // eslint-disable-next-line
                for (const prop in startValue) {
                    // eslint-disable-next-line
                    // @ts-ignore FIXME?
                    _valuesStart[property][prop] = startValue[prop];
                }
                _valuesStartRepeat[property] = startValueIsArray ? [] : {}; // TODO? repeat nested values? And yoyo? And array values?
                // eslint-disable-next-line
                // @ts-ignore FIXME?
                this._setupProperties(startValue, _valuesStart[property], _valuesEnd[property], _valuesStartRepeat[property]);
            }
            else {
                // Save the starting value, but only once.
                if (typeof _valuesStart[property] === 'undefined') {
                    _valuesStart[property] = startValue;
                }
                if (!startValueIsArray) {
                    // eslint-disable-next-line
                    // @ts-ignore FIXME?
                    _valuesStart[property] *= 1.0; // Ensures we're using numbers, not strings
                }
                if (isInterpolationList) {
                    // eslint-disable-next-line
                    // @ts-ignore FIXME?
                    _valuesStartRepeat[property] = _valuesEnd[property].slice().reverse();
                }
                else {
                    _valuesStartRepeat[property] = _valuesStart[property] || 0;
                }
            }
        }
    }
    stop() {
        if (!this._isChainStopped) {
            this._isChainStopped = true;
            this.stopChainedTweens();
        }
        if (!this._isPlaying) {
            return this;
        }
        // eslint-disable-next-line
        this._group && this._group.remove(this);
        this._isPlaying = false;
        this._isPaused = false;
        if (this._onStopCallback) {
            this._onStopCallback(this._object);
        }
        return this;
    }
    end() {
        this._goToEnd = true;
        this.update(Infinity);
        return this;
    }
    pause(time = now()) {
        if (this._isPaused || !this._isPlaying) {
            return this;
        }
        this._isPaused = true;
        this._pauseStart = time;
        // eslint-disable-next-line
        this._group && this._group.remove(this);
        return this;
    }
    resume(time = now()) {
        if (!this._isPaused || !this._isPlaying) {
            return this;
        }
        this._isPaused = false;
        this._startTime += time - this._pauseStart;
        this._pauseStart = 0;
        // eslint-disable-next-line
        this._group && this._group.add(this);
        return this;
    }
    stopChainedTweens() {
        for (let i = 0, numChainedTweens = this._chainedTweens.length; i < numChainedTweens; i++) {
            this._chainedTweens[i].stop();
        }
        return this;
    }
    group(group = mainGroup) {
        this._group = group;
        return this;
    }
    delay(amount = 0) {
        this._delayTime = amount;
        return this;
    }
    repeat(times = 0) {
        this._initialRepeat = times;
        this._repeat = times;
        return this;
    }
    repeatDelay(amount) {
        this._repeatDelayTime = amount;
        return this;
    }
    yoyo(yoyo = false) {
        this._yoyo = yoyo;
        return this;
    }
    easing(easingFunction = Easing.Linear.None) {
        this._easingFunction = easingFunction;
        return this;
    }
    interpolation(interpolationFunction = Interpolation.Linear) {
        this._interpolationFunction = interpolationFunction;
        return this;
    }
    // eslint-disable-next-line
    chain(...tweens) {
        this._chainedTweens = tweens;
        return this;
    }
    onStart(callback) {
        this._onStartCallback = callback;
        return this;
    }
    onUpdate(callback) {
        this._onUpdateCallback = callback;
        return this;
    }
    onRepeat(callback) {
        this._onRepeatCallback = callback;
        return this;
    }
    onComplete(callback) {
        this._onCompleteCallback = callback;
        return this;
    }
    onStop(callback) {
        this._onStopCallback = callback;
        return this;
    }
    /**
     * @returns true if the tween is still playing after the update, false
     * otherwise (calling update on a paused tween still returns true because
     * it is still playing, just paused).
     */
    update(time = now(), autoStart = true) {
        if (this._isPaused)
            return true;
        let property;
        let elapsed;
        const endTime = this._startTime + this._duration;
        if (!this._goToEnd && !this._isPlaying) {
            if (time > endTime)
                return false;
            if (autoStart)
                this.start(time);
        }
        this._goToEnd = false;
        if (time < this._startTime) {
            return true;
        }
        if (this._onStartCallbackFired === false) {
            if (this._onStartCallback) {
                this._onStartCallback(this._object);
            }
            this._onStartCallbackFired = true;
        }
        elapsed = (time - this._startTime) / this._duration;
        elapsed = this._duration === 0 || elapsed > 1 ? 1 : elapsed;
        const value = this._easingFunction(elapsed);
        // properties transformations
        this._updateProperties(this._object, this._valuesStart, this._valuesEnd, value);
        if (this._onUpdateCallback) {
            this._onUpdateCallback(this._object, elapsed);
        }
        if (elapsed === 1) {
            if (this._repeat > 0) {
                if (isFinite(this._repeat)) {
                    this._repeat--;
                }
                // Reassign starting values, restart by making startTime = now
                for (property in this._valuesStartRepeat) {
                    if (!this._yoyo && typeof this._valuesEnd[property] === 'string') {
                        this._valuesStartRepeat[property] =
                            // eslint-disable-next-line
                            // @ts-ignore FIXME?
                            this._valuesStartRepeat[property] + parseFloat(this._valuesEnd[property]);
                    }
                    if (this._yoyo) {
                        this._swapEndStartRepeatValues(property);
                    }
                    this._valuesStart[property] = this._valuesStartRepeat[property];
                }
                if (this._yoyo) {
                    this._reversed = !this._reversed;
                }
                if (this._repeatDelayTime !== undefined) {
                    this._startTime = time + this._repeatDelayTime;
                }
                else {
                    this._startTime = time + this._delayTime;
                }
                if (this._onRepeatCallback) {
                    this._onRepeatCallback(this._object);
                }
                return true;
            }
            else {
                if (this._onCompleteCallback) {
                    this._onCompleteCallback(this._object);
                }
                for (let i = 0, numChainedTweens = this._chainedTweens.length; i < numChainedTweens; i++) {
                    // Make the chained tweens start exactly at the time they should,
                    // even if the `update()` method was called way past the duration of the tween
                    this._chainedTweens[i].start(this._startTime + this._duration);
                }
                this._isPlaying = false;
                return false;
            }
        }
        return true;
    }
    _updateProperties(_object, _valuesStart, _valuesEnd, value) {
        for (const property in _valuesEnd) {
            // Don't update properties that do not exist in the source object
            if (_valuesStart[property] === undefined) {
                continue;
            }
            const start = _valuesStart[property] || 0;
            let end = _valuesEnd[property];
            const startIsArray = Array.isArray(_object[property]);
            const endIsArray = Array.isArray(end);
            const isInterpolationList = !startIsArray && endIsArray;
            if (isInterpolationList) {
                _object[property] = this._interpolationFunction(end, value);
            }
            else if (typeof end === 'object' && end) {
                // eslint-disable-next-line
                // @ts-ignore FIXME?
                this._updateProperties(_object[property], start, end, value);
            }
            else {
                // Parses relative end values with start as base (e.g.: +10, -3)
                end = this._handleRelativeValue(start, end);
                // Protect against non numeric properties.
                if (typeof end === 'number') {
                    // eslint-disable-next-line
                    // @ts-ignore FIXME?
                    _object[property] = start + (end - start) * value;
                }
            }
        }
    }
    _handleRelativeValue(start, end) {
        if (typeof end !== 'string') {
            return end;
        }
        if (end.charAt(0) === '+' || end.charAt(0) === '-') {
            return start + parseFloat(end);
        }
        else {
            return parseFloat(end);
        }
    }
    _swapEndStartRepeatValues(property) {
        const tmp = this._valuesStartRepeat[property];
        const endValue = this._valuesEnd[property];
        if (typeof endValue === 'string') {
            this._valuesStartRepeat[property] = this._valuesStartRepeat[property] + parseFloat(endValue);
        }
        else {
            this._valuesStartRepeat[property] = this._valuesEnd[property];
        }
        this._valuesEnd[property] = tmp;
    }
};
const nextId = Sequence.nextId;
/**
 * Controlling groups of tweens
 *
 * Using the TWEEN singleton to manage your tweens can cause issues in large apps with many components.
 * In these cases, you may want to create your own smaller groups of tweens.
 */
const TWEEN = mainGroup;
// This is the best way to export things in a way that's compatible with both ES
// Modules and CommonJS, without build hacks, and so as not to break the
// existing API.
// https://github.com/rollup/rollup/issues/1961#issuecomment-423037881
const getAll = TWEEN.getAll.bind(TWEEN);
const removeAll = TWEEN.removeAll.bind(TWEEN);
const add = TWEEN.add.bind(TWEEN);
const remove = TWEEN.remove.bind(TWEEN);
const update = TWEEN.update.bind(TWEEN);

var foreign11 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    Easing: Easing,
    Group: Group,
    Interpolation: Interpolation,
    Sequence: Sequence,
    Tween: Tween$1,
    add: add,
    getAll: getAll,
    nextId: nextId,
    now: now,
    remove: remove,
    removeAll: removeAll,
    update: update
});

class UIPool {
    constructor(creator) {
        this.pool = [];
        this.creator = creator;
    }
    get count() {
        return this.pool ? this.pool.length : 0;
    }
    get firstActiveItem() {
        for (let t of this.pool) {
            if (t.uiObject.visibility == mw.SlateVisibility.Hidden)
                continue;
            return t;
        }
    }
    byIndex(index) {
        return this.pool[index];
    }
    setCreator(func) {
        this.creator = func;
    }
    // 重新激活处理
    setPoolGetFunction(func) {
        this.poolGetFunction = func;
    }
    setResetItemFunction(resetItemFunction) {
        this.resetItemFunction = resetItemFunction;
    }
    get() {
        for (let item of this.pool) {
            if (item.uiObject.visibility == mw.SlateVisibility.Hidden) {
                item.uiObject.visibility = mw.SlateVisibility.SelfHitTestInvisible;
                if (this.poolGetFunction)
                    this.poolGetFunction(item);
                return item;
            }
        }
        let result = this.creator();
        this.pool.push(result);
        return result;
    }
    giveBack(item) {
        if (this.resetItemFunction)
            this.resetItemFunction(item);
        item.uiObject.visibility = (mw.SlateVisibility.Hidden);
    }
    resetAll() {
        for (let item of this.pool) {
            this.giveBack(item);
        }
    }
    eachVisibleItem(action) {
        for (let t of this.pool) {
            if (t.uiObject.visibility == mw.SlateVisibility.Hidden)
                continue;
            action(t);
        }
    }
    eachVisibleItemWithoutFocus(action, focus) {
        for (let t of this.pool) {
            if (t.uiObject.visibility == mw.SlateVisibility.Hidden)
                continue;
            if (t == focus)
                continue;
            action(t);
        }
    }
}
class UIElementPool {
    constructor() {
        this.pool = [];
    }
    get count() {
        return this.pool ? this.pool.length : 0;
    }
    get firstActiveItem() {
        for (let t of this.pool) {
            if (t.visibility == mw.SlateVisibility.Hidden)
                continue;
            return t;
        }
    }
    setCreator(func) {
        this.creator = func;
    }
    get() {
        for (let i of this.pool) {
            if (i.visibility == mw.SlateVisibility.Hidden) {
                i.visibility = mw.SlateVisibility.SelfHitTestInvisible;
                return i;
            }
        }
        let result = this.creator();
        this.pool.push(result);
        return result;
    }
    giveBack(item) {
        item.visibility = (mw.SlateVisibility.Hidden);
    }
    resetAll() {
        for (let item of this.pool) {
            this.giveBack(item);
        }
    }
    eachVisibleItem(action) {
        for (let t of this.pool) {
            if (t.visibility == mw.SlateVisibility.Hidden)
                continue;
            action(t);
        }
    }
}
class WorldUIPool {
    constructor(creatorFunc) {
        this.pool = [];
        if (creatorFunc)
            this.creator = creatorFunc;
    }
    setCreator(func) {
        this.creator = func;
    }
    setPoolGetFunction(func) {
        this.poolGetFunction = func;
    }
    setResetItemFunction(resetItemFunction) {
        this.resetItemFunction = resetItemFunction;
    }
    eachVisibleItem(action) {
        for (let t of this.pool) {
            if (!t.stage)
                continue;
            action(t);
        }
    }
    get() {
        for (let item of this.pool) {
            if (item.stage)
                continue;
            if (this.poolGetFunction)
                this.poolGetFunction(item);
            item.uiWidget.setVisibility(mw.PropertyStatus.On);
            item.stage = true;
            return item;
        }
        let result = this.creator();
        result.stage = true;
        this.pool.push(result);
        return result;
    }
    giveBack(item) {
        if (this.resetItemFunction)
            this.resetItemFunction(item);
        item.stage = false;
        item.uiWidget.setVisibility(mw.PropertyStatus.Off);
    }
    resetAll() {
        for (let item of this.pool) {
            this.giveBack(item);
        }
    }
}

var foreign12 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    UIElementPool: UIElementPool,
    UIPool: UIPool,
    WorldUIPool: WorldUIPool
});

var updater;
(function (updater) {
    // 将函数注册到onUpdate函数里
    updater.updateByFrameInterval = (interval, targetFunctionName) => {
        return function (target, prototypeKey, prototypeDescriptor) {
            // 注册interval变量
            let intervalVaryingName = `${prototypeKey.toString()}_current_interval`;
            let targetIntervalVaryingName = `${prototypeKey.toString()}_target_interval`;
            target[intervalVaryingName] = 0;
            target[targetIntervalVaryingName] = interval;
            // 将函数放到onUpdate里面
            let updateFunc = target[targetFunctionName || 'onUpdate'];
            let targetFunc = prototypeDescriptor.value;
            target[targetFunctionName || 'onUpdate'] = function (...args) {
                target[intervalVaryingName]++;
                if (target[intervalVaryingName] >= target[targetIntervalVaryingName]) {
                    targetFunc.apply(this, args);
                    target[intervalVaryingName] = 0;
                }
                updateFunc.apply(this, args);
            };
        };
    };
})(updater || (updater = {}));

var foreign13 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    get updater () { return updater; }
});

class Notice {
    static showDownNotice(context) {
        this.checkView();
        this.view.topNoticeComponent2.insert(notice => {
            notice.setInfo(context);
        });
    }
    static checkView() {
        if (this.view)
            return;
        this.view = mw.UIService.show(NoticeView);
    }
}
class TopNoticeComponent {
    init(targetCanvas) {
        this.visibleNotice = [];
        this.pendingQueue = [];
        this.targetCanvas = targetCanvas;
        this.noticeCanvasHeight = this.targetCanvas.size.y;
        this.insertItemTempLocation = new mw.Vector2();
        this.noticeItemPool = new UIPool(() => {
            let item = mw.UIService.create(TopNoticeItem);
            this.targetCanvas.addChild(item.uiObject);
            item.uiObject.size = new mw.Vector2(700, 60);
            return item;
        });
    }
    insert(initAction) {
        this.pendingQueue.push(initAction);
    }
    update() {
        if (this.visibleNotice.length == 0)
            return;
        for (let item of this.visibleNotice) {
            item.lifeTime += 0.03;
        }
        let first = this.visibleNotice[0];
        if (first.lifeTime >= TopNoticeComponent.NoticeItemLifeTime) {
            this.fadeoutNoticeElement();
        }
        this.noticeItemPool.eachVisibleItem(item => {
            if (item.targetHeight >= item.position.y)
                return;
            item.setLocation(item.position.x, item.position.y - TopNoticeComponent.NoticeMoveStepCount);
        });
    }
    insertPendingNotice(initAction) {
        // 超出显示长度,旧的元素隐藏
        if (this.visibleNotice.length >= TopNoticeComponent.NoticeItemMaxCount) {
            this.fadeoutNoticeElement();
        }
        // 已显示元素上推
        for (let i = 0; i < this.visibleNotice.length; i++) {
            const element = this.visibleNotice[i];
            element.targetHeight =
                (this.noticeCanvasHeight - TopNoticeComponent.NoticeItemIntervalSpace) -
                    ((this.visibleNotice.length - i) * TopNoticeComponent.NoticeItemIntervalSpace);
        }
        // 插入新的元素
        let recent = this.noticeItemPool.get();
        this.visibleNotice.push(recent);
        initAction(recent);
        recent.lifeTime = 0;
        this.insertItemTempLocation.x = (this.targetCanvas.size.x / 2) - (recent.uiObject.size.x / 2);
        this.insertItemTempLocation.y = this.targetCanvas.size.y - TopNoticeComponent.NoticeItemIntervalSpace;
        recent.setLocation(this.insertItemTempLocation.x, this.insertItemTempLocation.y);
        recent.targetHeight = this.insertItemTempLocation.y;
        recent.uiObject.renderOpacity = 0;
        // 插入动效
        new Tween({ alpha: 0 })
            .to({ alpha: 1 }, 250)
            .onUpdate(arg => {
            recent.uiObject.renderOpacity = arg.alpha;
        })
            .start();
    }
    fadeoutNoticeElement() {
        let item = this.visibleNotice.shift();
        new Tween({ alpha: 1 })
            .to({ alpha: 0 }, 250)
            .onUpdate(arg => {
            item.uiObject.renderOpacity = arg.alpha;
        })
            .onComplete(() => {
            this.noticeItemPool.giveBack(item);
        })
            .start();
    }
    checkPendingNotice() {
        if (this.pendingQueue.length < 1)
            return;
        this.insertPendingNotice(this.pendingQueue.shift());
    }
}
TopNoticeComponent.NoticeItemLifeTime = 2;
TopNoticeComponent.NoticeItemMaxCount = 3;
TopNoticeComponent.NoticeMoveStepCount = 15;
TopNoticeComponent.NoticeItemIntervalSpace = 75;
__decorate([
    updater.updateByFrameInterval(15, 'update')
], TopNoticeComponent.prototype, "checkPendingNotice", null);
class TopNoticeComponent2 {
    constructor() {
        this.isLeft = false;
        this.isRemoveing = false;
        this.needmovingNotice = [];
        this.isinsert = false;
    }
    init(targetCanvas) {
        this.visibleNotice = [];
        this.targetCanvas = targetCanvas;
        this.noticeCanvasHeight = this.targetCanvas.size.y;
        this.insertItemTempLocation = new mw.Vector2();
        this.noticeItemPool = new UIPool(() => {
            let item = mw.UIService.create(TopNoticeItem);
            this.targetCanvas.addChild(item.uiObject);
            item.uiObject.size = new mw.Vector2(item.uiObject.size.x, item.uiObject.size.y);
            return item;
        });
    }
    insert(initAction) {
        this.insertPendingNotice(initAction);
    }
    update() {
        if (this.visibleNotice.length == 0)
            return;
        for (let item of this.visibleNotice) {
            item.lifeTime += 0.03;
            if (item.lifeTime >= TopNoticeComponent2.NoticeItemLifeTime) {
                if (!this.needmovingNotice.includes(item)) {
                    this.needmovingNotice.push(item);
                }
            }
        }
        this.eachLeftRightItem();
        this.noticeItemPool.eachVisibleItem(item => {
            if (item.targetHeight >= item.position.y)
                return;
            item.setLocation(item.position.x, item.position.y - TopNoticeComponent2.NoticeMoveStepCount);
        });
    }
    insertPendingNotice(initAction) {
        this.isinsert = true;
        // 超出显示长度,旧的元素隐藏
        if (this.visibleNotice.length >= TopNoticeComponent2.NoticeItemMaxCount) {
            //限制最多显示10个
            for (let index = 0; index < this.visibleNotice.length; index++) {
                let element = this.visibleNotice[index];
                if (index <= (this.visibleNotice.length - TopNoticeComponent2.NoticeItemMaxCount)) {
                    element.lifeTime += TopNoticeComponent2.NoticeItemLifeTime;
                }
            }
        }
        // 信息越多的时候，消失速度再快一点 （ 3个 1-3 每个加 0.3  5个每个加0.5  10个每个加1）
        if (this.visibleNotice.length >= TopNoticeComponent2.NoticeSameItemMaxCount) {
            let count = this.visibleNotice.length;
            for (let index = 0; index < count; index++) {
                let element = this.visibleNotice[index];
                element.lifeTime += count * TopNoticeComponent2.everydiveidetime;
            }
        }
        this.eachLeftRightItem();
        // 已显示元素
        for (let i = 0; i < this.visibleNotice.length; i++) {
            const element = this.visibleNotice[i];
            element.targetHeight = (TopNoticeComponent2.NoticeItemIntervalSpace) + ((i) * TopNoticeComponent2.NoticeItemIntervalSpace);
            element.setLocation(this.insertItemTempLocation.x, element.targetHeight);
        }
        // 插入新的元素
        let recent = this.noticeItemPool.get();
        this.visibleNotice.push(recent);
        initAction(recent);
        recent.lifeTime = 0;
        this.insertItemTempLocation.x = (this.targetCanvas.size.x / 2) - (recent.uiObject.size.x / 2);
        let targetHeight = (TopNoticeComponent2.NoticeItemIntervalSpace) + ((this.visibleNotice.length - 1) * TopNoticeComponent2.NoticeItemIntervalSpace);
        this.insertItemTempLocation.y = targetHeight;
        recent.targetHeight = this.insertItemTempLocation.y;
        recent.uiObject.renderOpacity = 0;
        recent.setLocation(this.insertItemTempLocation.x, -500);
        recent.uiObject.renderOpacity = 1;
        new Tween({ posy: -500 })
            .to({ posy: this.insertItemTempLocation.y }, 500)
            .onUpdate(arg => {
            recent.setLocation(this.insertItemTempLocation.x, arg.posy);
        })
            .start()
            .easing(Easing.Linear.None);
        this.isinsert = false;
    }
    eachLeftRightItem() {
        if (this.needmovingNotice.length <= 0) {
            return;
        }
        if (this.isRemoveing) {
            return;
        }
        this.isRemoveing = true;
        //计时
        new Tween({ posX: 0 })
            .to({ posX: 1 }, 500)
            .onComplete(() => {
            this.isRemoveing = false;
        }).start();
        // 已显示元素位置 
        let arr = this.visibleNotice.filter(e => !this.needmovingNotice.includes(e));
        for (let i = 0; i < arr.length; i++) {
            const element = arr[i];
            element.targetHeight = (TopNoticeComponent2.NoticeItemIntervalSpace) + ((i) * TopNoticeComponent2.NoticeItemIntervalSpace);
            new Tween({ posy: element.uiObject.position.y })
                .to({ posy: element.targetHeight }, 500)
                .onUpdate(arg => {
                element.setLocation(this.insertItemTempLocation.x, arg.posy);
            })
                .onComplete(() => {
            })
                .easing(Easing.Linear.None)
                .start();
        }
        // 插入动效
        while (this.needmovingNotice.length > 0) {
            let item = this.needmovingNotice.shift();
            let pos = item.uiObject.position;
            this.isLeft = !this.isLeft;
            let target = new mw.Vector(0, pos.y);
            new Tween({ posX: 0 })
                .to({ posX: this.isLeft ? 3000 : -3000 }, 250)
                .onUpdate(arg => {
                target.x = arg.posX;
                item.uiObject.position = target;
            })
                .onComplete(() => {
                this.noticeItemPool.giveBack(item);
            })
                .easing(Easing.Linear.None)
                .start();
            let index = this.visibleNotice.findIndex(ele => item);
            if (index != -1) {
                this.visibleNotice.splice(index, 1);
            }
        }
    }
}
//Notice提示存在时间
TopNoticeComponent2.NoticeItemLifeTime = 4;
//Notice提示最多存在数量
TopNoticeComponent2.NoticeItemMaxCount = 10;
//Notice提示ui垂直间隔
TopNoticeComponent2.NoticeItemIntervalSpace = 70;
//Notice提示同类型最多存在数量
TopNoticeComponent2.NoticeSameItemMaxCount = 3;
//Notice提示移动步长
TopNoticeComponent2.NoticeMoveStepCount = 15;
//Notice提示 间隔时间
TopNoticeComponent2.everydiveidetime = 0;
class NoticeView extends NoticeView_Generate$1 {
    onStart() {
        this.topNoticeComponent = new TopNoticeComponent();
        this.topNoticeComponent.init(this.con_top_notice);
        this.topNoticeComponent2 = new TopNoticeComponent2();
        this.topNoticeComponent2.init(this.con_top_notice_2);
        this.canUpdate = true;
        this.layer = mw.UILayerTop;
    }
    onUpdate() {
        this.topNoticeComponent.update();
        this.topNoticeComponent2.update();
    }
}
class TopNoticeItem extends TopNoticeItem_Generate$1 {
    setLocation(x, y) {
        if (!this.position) {
            this.position = new mw.Vector2(x, y);
        }
        else {
            this.position.x = x;
            this.position.y = y;
        }
        this.uiObject.position = this.position;
    }
    setInfo(context) {
        this.txt_context.text = context;
    }
}

var foreign10 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    Notice: Notice
});

/**
 * AUTO GENERATE BY UI EDITOR.
 * WARNING: DO NOT MODIFY THIS FILE,MAY CAUSE CODE LOST.
 * AUTHOR: 爱玩游戏的小胖子
 * UI: UI/common/Test.ui
 * TIME: 2024.08.04-18.39.52
 */
let Test_Generate = class Test_Generate extends UIScript {
    get mInputBox() {
        if (!this.mInputBox_Internal && this.uiWidgetBase) {
            this.mInputBox_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mInputBox');
        }
        return this.mInputBox_Internal;
    }
    get mButton() {
        if (!this.mButton_Internal && this.uiWidgetBase) {
            this.mButton_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mButton');
        }
        return this.mButton_Internal;
    }
    get mInputBox_1() {
        if (!this.mInputBox_1_Internal && this.uiWidgetBase) {
            this.mInputBox_1_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mInputBox_1');
        }
        return this.mInputBox_1_Internal;
    }
    onAwake() {
        //设置能否每帧触发onUpdate
        this.canUpdate = false;
        this.layer = mw.UILayerBottom;
        this.initButtons();
    }
    initButtons() {
        //按钮添加点击
        //按钮添加点击
        this.mButton.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick", "mButton");
        });
        this.mButton.touchMethod = (mw.ButtonTouchMethod.PreciseTap);
        //按钮多语言
        //文本多语言
        //文本多语言
    }
    /*初始化多语言*/
    initLanguage(ui) {
        let call = mw.UIScript.getBehavior("lan");
        if (call && ui) {
            call(ui);
        }
    }
    onShow(...params) { }
    ;
    /*显示panel*/
    show(...param) {
        mw.UIService.showUI(this, this.layer, ...param);
    }
    /*隐藏panel*/
    hide() {
        mw.UIService.hideUI(this);
    }
};
Test_Generate = __decorate([
    UIBind('UI/common/Test.ui')
], Test_Generate);
var Test_Generate$1 = Test_Generate;

var foreign118 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: Test_Generate$1
});

/**
 * AUTHOR: 爱玩游戏的小胖子
 * TIME: 2023.06.03-14.37.42
 */
class Test extends Test_Generate$1 {
    constructor() {
        super(...arguments);
        this.player = null;
        /**玩家身上的相机 */
        this.camera = null;
    }
    /**拿到相机 */
    get getCamera() {
        if (this.camera == null) {
            this.camera = Camera.currentCamera;
        }
        return this.camera;
    }
    /**
     * 构造UI文件成功后，在合适的时机最先初始化一次
     */
    async onStart() {
        //设置能否每帧触发onUpdate
        this.canUpdate = false;
        this.layer = mw.UILayerMiddle;
        this.player = await Player.asyncGetLocalPlayer();
        this.setCameraTransform();
    }
    /**设置玩家摄像机偏移、旋转 */
    setCameraTransform() {
        this.mButton.onClicked.add(() => {
            let transform = new mw.Transform();
            let a = this.mInputBox.text.split('|');
            let pos = new mw.Vector(Number(a[0]), Number(a[1]), Number(a[2]));
            transform.position = pos;
            let b = this.mInputBox_1.text.split('|');
            let rot = new mw.Rotation(Number(b[0]), Number(b[1]), Number(b[2]));
            transform.rotation = rot;
            this.getCamera.localTransform = transform;
        });
    }
}

var foreign21 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: Test
});

class PlayerManagerExtesion {
    static init() {
        ModuleService.registerModule(RpcExtesionS, RpcExtesionC, null);
    }
    static isNpc(obj) {
        if ((obj instanceof Character) && obj.player == null) {
            return true;
        }
        return false;
    }
    static isCharacter(obj) {
        if ((obj instanceof Character) && obj.player != null) {
            return true;
        }
        return false;
    }
    static isUseRpc(isSync) {
        if (SystemUtil.isServer()) {
            return false;
        }
        else {
            return isSync;
        }
    }
    static stopStanceExtesion(char, sync) {
        sync = sync === undefined ? true : sync;
        if (!this.isUseRpc(sync)) {
            char.currentSubStance?.stop();
            return;
        }
        let mtStance = new RpcStance("", char);
        let module = ModuleService.getModule(RpcExtesionC);
        module.stopStanceSync(char.gameObjectId, mtStance);
    }
    static changeBaseStanceExtesion(char, assetId) {
        if (!this.isUseRpc(true)) {
            if (assetId == "") {
                char.currentStance?.stop();
                return;
            }
            let basicStance = char.loadStance(assetId);
            basicStance.play();
        }
        else {
            let module = ModuleService.getModule(RpcExtesionC);
            module.playBasicStance(char.gameObjectId, assetId);
        }
    }
    static changeStanceExtesion(char, assetId) {
        let sync = true;
        if (!this.isUseRpc(sync)) {
            if (assetId == "") {
                char.currentSubStance?.stop();
                return;
            }
            char.loadSubStance(assetId).play();
            return;
        }
        let mtStance = new RpcStance(assetId, char);
        let module = ModuleService.getModule(RpcExtesionC);
        module.playStanceSync(char.gameObjectId, mtStance);
    }
    static loadStanceExtesion(char, assetId, sync) {
        sync = sync === undefined ? true : sync;
        if (!this.isUseRpc(sync)) {
            return char.loadSubStance(assetId);
        }
        sync = sync == undefined ? true : sync;
        const stance = new RpcStance(assetId, char);
        return stance;
    }
    static rpcPlayAnimation(owner, assetId, loop = 1, speed = 1) {
        let ani = this.loadAnimationExtesion(owner, assetId);
        ani.loop = loop;
        ani.speed = speed;
        ani.play();
        return ani;
    }
    static rpcStopAnimation(owner, assetId) {
        if (!this.isUseRpc(true)) {
            if (owner.currentAnimation && owner.currentAnimation.assetId == assetId)
                owner.currentAnimation.stop();
            return;
        }
        if (owner.currentAnimation && owner.currentAnimation.assetId == assetId)
            owner.currentAnimation.stop();
        let module = ModuleService.getModule(RpcExtesionC);
        module.stopAnimationSync(owner.gameObjectId, assetId);
    }
    static rpcPlayAnimationLocally(owner, assetId, AnimationLength = 0, loopCount = 1) {
        if (owner === undefined || owner === null)
            return;
        let anim = owner.loadAnimation(assetId);
        anim.loop = loopCount;
        anim.speed = AnimationLength === 0 ? 1 : this.getRate(anim.length / AnimationLength);
        anim.play();
        return anim;
    }
    static getRate(num) {
        return Math.round(num * 100) / 100;
    }
    static loadAnimationExtesion(char, assetid, sync) {
        sync = sync === undefined ? true : sync;
        if (!this.isUseRpc(sync)) {
            return char.loadAnimation(assetid);
        }
        const anim = new RpcAnimation(char, assetid);
        return anim;
    }
}
class RpcExtesionC extends ModuleC {
    constructor() {
        super(...arguments);
        this.syncAnimation = null;
    }
    net_playerJoin(playerId) {
        if (this.localPlayerId == playerId)
            return;
        let char = this.localPlayer.character;
        let curAnimation = char.currentAnimation;
        if (!curAnimation)
            return;
        let ani = this.syncAnimation;
        if (ani && curAnimation.assetId == ani.assetId && ani.isPlaying) {
            this.server.net_playAnimationSync(char.gameObjectId, ani.assetId, ani.speed, ani.loop, ani.slot, playerId);
        }
    }
    playAnimationSync(charGuid, myAnimation) {
        if (charGuid == this.localPlayer.character.gameObjectId) {
            this.syncAnimation = myAnimation;
        }
        this.server.net_playAnimationSync(charGuid, myAnimation.assetId, myAnimation.speed, myAnimation.loop, myAnimation.slot);
    }
    pauseAnimationSync(charGuid, myAnimation) {
        this.server.net_pauseAnimationSync(charGuid, myAnimation.assetId);
    }
    resumeAnimationSync(charGuid, myAnimation) {
        this.server.net_resumeAnimationSync(charGuid, myAnimation.assetId);
    }
    stopAnimationSync(charGuid, myAnimation) {
        if (charGuid == this.localPlayer.character.gameObjectId) {
            this.syncAnimation = null;
        }
        let assetId = typeof myAnimation == "string" ? myAnimation : myAnimation.assetId;
        this.server.net_stopAnimationSync(charGuid, assetId);
    }
    playBasicStance(charGuid, basicStance) {
        this.server.net_playBasicStance(charGuid, basicStance);
    }
    playStanceSync(charGuid, myStance) {
        this.server.net_playStanceSync(charGuid, myStance.assetId, myStance.blendMode);
    }
    stopStanceSync(charGuid, stance) {
        this.server.net_stopStanceSync(charGuid, stance.assetId);
    }
    net_playAnimation(charGuid, assetId, rate, loop, slot) {
        if (charGuid == this.localPlayer.character.gameObjectId)
            return;
        RpcAnimation.playAnimation(charGuid, assetId, rate, loop, slot);
    }
    net_pauseAnimation(charGuid, assetId) {
        if (charGuid == this.localPlayer.character.gameObjectId)
            return;
        RpcAnimation.pauseAnimation(charGuid, assetId);
    }
    net_resumeAnimation(charGuid, assetId) {
        if (charGuid == this.localPlayer.character.gameObjectId)
            return;
        RpcAnimation.resumeAnimation(charGuid, assetId);
    }
    net_stopAnimation(charGuid, assetId) {
        if (charGuid == this.localPlayer.character.gameObjectId)
            return;
        RpcAnimation.stopAnimation(charGuid, assetId);
    }
}
class RpcExtesionS extends ModuleS {
    async net_playBasicStance(charGuid, basicStance) {
        let char = await GameObject.asyncFindGameObjectById(charGuid);
        char.loadStance(basicStance).play();
    }
    net_playAnimationSync(charGuid, assetId, rate, loop, slot, playerId = 0) {
        if (playerId != 0) {
            this.getClient(playerId).net_playAnimation(charGuid, assetId, rate, loop, slot);
            return;
        }
        this.getAllClient().net_playAnimation(charGuid, assetId, rate, loop, slot);
    }
    net_pauseAnimationSync(charGuid, assetId) {
        this.getAllClient().net_pauseAnimation(charGuid, assetId);
    }
    net_resumeAnimationSync(charGuid, assetId) {
        this.getAllClient().net_resumeAnimation(charGuid, assetId);
    }
    net_stopAnimationSync(charGuid, assetId) {
        this.getAllClient().net_stopAnimation(charGuid, assetId);
    }
    playStanceSync(charGuid, mystance) {
        RpcStance.playStance(charGuid, mystance.assetId, mystance.blendMode);
    }
    net_stopStanceSync(charGuid, assetId) {
        RpcStance.stopStance(charGuid, assetId);
    }
    stopStanceSync(charGuid, stance) {
        RpcStance.stopStance(charGuid, stance.assetId);
    }
    net_playStanceSync(charGuid, assetid, blendMode) {
        RpcStance.playStance(charGuid, assetid, blendMode);
    }
    onPlayerEnterGame(player) {
        this.getAllClient().net_playerJoin(player.playerId);
    }
}
class RpcAnimation {
    constructor(char, assetId) {
        this.ani = null;
        this.assetId = null;
        this.owner = null;
        this._loop = 1;
        this._speed = 1;
        this._slot = mw.AnimSlot.Default;
        this.owner = char;
        this.assetId = assetId;
        this.ani = char.loadAnimation(assetId);
    }
    get loop() {
        return this._loop;
    }
    set loop(value) {
        this._loop = value;
        this.ani.loop = value;
    }
    get speed() {
        return this._speed;
    }
    set speed(value) {
        this._speed = value;
        this.ani.speed = value;
    }
    get slot() {
        return this._slot;
    }
    set slot(value) {
        this._slot = value;
        this.ani.slot = value;
    }
    get length() {
        return this.ani.length;
    }
    get isPlaying() {
        return this.ani.isPlaying;
    }
    get onFinish() {
        return this.ani.onFinish;
    }
    play() {
        this.ani?.play();
        let module = ModuleService.getModule(RpcExtesionC);
        module.playAnimationSync(this.owner.gameObjectId, this);
        return true;
    }
    pause() {
        this.ani?.pause();
        let module = ModuleService.getModule(RpcExtesionC);
        module.pauseAnimationSync(this.owner.gameObjectId, this);
        return true;
    }
    resume() {
        this.ani?.resume();
        let module = ModuleService.getModule(RpcExtesionC);
        module.resumeAnimationSync(this.owner.gameObjectId, this);
        return true;
    }
    stop() {
        this.ani?.stop();
        let module = ModuleService.getModule(RpcExtesionC);
        module.stopAnimationSync(this.owner.gameObjectId, this);
        return true;
    }
    static playAnimation(guid, assetid, speed, loop, slot) {
        let char = Character.findGameObjectById(guid);
        if (!char)
            return;
        let anim = char.loadAnimation(assetid);
        anim.loop = loop;
        anim.speed = speed;
        anim.slot = slot;
        anim.play();
        return anim;
    }
    static pauseAnimation(guid, assetId) {
        let char = Character.findGameObjectById(guid);
        if (!char)
            return;
        let anim = char.currentAnimation;
        if (!anim)
            return;
        anim.pause();
    }
    static resumeAnimation(guid, assetId) {
        let char = Character.findGameObjectById(guid);
        if (!char)
            return;
        let anim = char.currentAnimation;
        if (!anim)
            return;
        anim.resume();
    }
    static stopAnimation(guid, assetId) {
        let char = Character.findGameObjectById(guid);
        if (!char)
            return;
        let anim = char.currentAnimation;
        if (!anim)
            return;
        anim.stop();
    }
}
class RpcStance {
    constructor(assetId, owner) {
        this.assetId = null;
        this.owner = null;
        this.blendMode = null;
        this.assetId = assetId;
        this.owner = owner;
    }
    play() {
        let module = SystemUtil.isServer() ? ModuleService.getModule(RpcExtesionS) : ModuleService.getModule(RpcExtesionC);
        module.playStanceSync(this.owner.gameObjectId, this);
        return true;
    }
    stop() {
        let module = SystemUtil.isServer() ? ModuleService.getModule(RpcExtesionS) : ModuleService.getModule(RpcExtesionC);
        module.stopStanceSync(this.owner.gameObjectId, this);
        return true;
    }
    static playStance(charGuid, assetId, blendMode) {
        let char = GameObject.findGameObjectById(charGuid);
        if (!char)
            return;
        if (assetId == "") {
            char.currentSubStance?.stop();
            return;
        }
        let stance = char.loadSubStance(assetId);
        if (blendMode != null)
            stance.blendMode = blendMode;
        stance.play();
    }
    static stopStance(charGuid, assetId) {
        let char = GameObject.findGameObjectById(charGuid);
        if (!char)
            return;
        let currentStance = char.currentSubStance;
        if (currentStance && (currentStance.assetId == assetId || assetId == "")) {
            currentStance.stop();
        }
    }
}
PlayerManagerExtesion.init();

var foreign51 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    PlayerManagerExtesion: PlayerManagerExtesion
});

var PrefabEvent;
(function (PrefabEvent) {
    /**
     * 网络事件key
     */
    var _onEventNetKey = "PrefabEventNeyKey";
    /**
     * 本地事件key
     */
    var _onEventKey = "PrefabEvetKey";
    /**
     * 重新提交数据保存
     */
    var _retrySetCustomDataList = [];
    /**
     * 初始化事件监听器
     */
    function initEvent() {
        if (mwext["PrefabEvent"]) {
            return;
        }
        mwext["PrefabEvent"] = true;
        if (SystemUtil.isServer()) {
            DataStorage.setTemporaryStorage(mw.SystemUtil.isPIE);
            Event.addLocalListener("__setCustomDataCache", (k, v) => {
                _retrySetCustomDataList.push({ key: k, val: v });
            });
            setInterval(() => {
                let keyMap = new Map();
                _retrySetCustomDataList.forEach(e => {
                    keyMap.set(e.key, e.val);
                });
                _retrySetCustomDataList = [];
                keyMap.forEach((v, k, maps) => {
                    _retrySetCustomDataList.push({ key: k, val: v });
                });
                while (_retrySetCustomDataList.length > 0) {
                    let data = _retrySetCustomDataList.shift();
                    if (data) {
                        DataStorage.asyncSetData(data.key, data.val).then((res) => {
                            if (res != mw.DataStorageResultCode.Success) {
                                _retrySetCustomDataList.push(data);
                            }
                        }).catch((err) => {
                            _retrySetCustomDataList.push(data);
                        });
                    }
                }
            }, 6500);
        }
        var call = (clazzName, funcName, ...params) => {
            if (!PrefabEvent[clazzName]) {
                Console.error("无效协议 : " + clazzName);
                return;
            }
            if (!PrefabEvent[clazzName][funcName]) {
                Console.error("无效协议 : " + clazzName + ":" + funcName);
                return;
            }
            Console.log("调用 : " + _onEventKey + ":" + clazzName + ":" + funcName);
            Event.dispatchToLocal(_onEventKey + ":" + clazzName + ":" + funcName, ...params);
        };
        if (mw.SystemUtil.isServer()) {
            Event.addClientListener(_onEventNetKey, (player, clazzName, funcName, ...params) => {
                call(clazzName, funcName, ...params);
            });
        }
        if (mw.SystemUtil.isClient()) {
            Event.addServerListener(_onEventNetKey, (clazzName, funcName, ...params) => {
                call(clazzName, funcName, ...params);
            });
        }
    }
    /**
     * 回调客户端事件
     * @param clazzName
     * @param funcName
     * @param params
     */
    function callClientFunc(clazzName, funcName, ...params) {
        Event.dispatchToLocal(_onEventKey + ":" + clazzName + ":" + funcName, ...params);
    }
    /**
     * 回调事件
     * @param clazzName
     * @param funcName
     * @param params
     */
    function callFunc(clazzName, funcName, ...params) {
        if (mw.SystemUtil.isClient()) {
            Event.dispatchToServer(_onEventNetKey, clazzName, funcName, ...params);
        }
        if (mw.SystemUtil.isServer()) {
            Event.dispatchToAllClient(_onEventNetKey, clazzName, funcName, ...params);
        }
        Event.dispatchToLocal(_onEventKey + ":" + clazzName + ":" + funcName, ...params);
    }
    /**
     * 监听事件
     * @param clazzName
     * @param funcName
     * @param callback
     */
    function onFunc(clazzName, funcName, callback) {
        Console.log("注册 : " + _onEventKey + ":" + clazzName + ":" + funcName);
        return Event.addLocalListener(_onEventKey + ":" + clazzName + ":" + funcName, callback);
    }
    /**
     * 存档工具
     */
    class DBSaveBase {
    }
    /**
 * 存档工具
 */
    class DBServerTool {
        /**
         * 获取玩家数据缓存
         * @param playerId
         * @returns
         */
        static getPlayerDataCache(playerId) {
            let dataCache = null;
            if (mwext["PrefabEventDataCache"]) {
                dataCache = mwext["PrefabEventDataCache"];
            }
            else {
                mwext["PrefabEventDataCache"] = {};
                dataCache = mwext["PrefabEventDataCache"];
            }
            if (!dataCache[playerId]) {
                dataCache[playerId] = {};
            }
            return dataCache[playerId];
        }
        /**
         * (服务端)获取存档
         * @param playerId
         * @param key
         * @returns
         */
        static async asyncGetValue(playerId, key) {
            //Console.error("asyncGetValue : 获取存档数据开始");
            return new Promise((resolve, reject) => {
                let playerDataCache = this.getPlayerDataCache(playerId);
                let dataKey = key + "_" + playerId + "_key";
                let dataVal = null;
                let keys = Object.keys(playerDataCache);
                keys.forEach((v, i, arr) => {
                    if (v == dataKey) {
                        dataVal = playerDataCache[dataKey];
                    }
                });
                if (dataVal) {
                    let res = null;
                    let db = dataVal;
                    if (!db) {
                        resolve(null);
                        return;
                    }
                    res = JSON.parse(db);
                    resolve(res.value);
                    return;
                }
                GeneralManager.asyncRpcGetData(dataKey).then((v) => {
                    let res = null;
                    let db = v;
                    if (!db) {
                        resolve(null);
                    }
                    res = JSON.parse(db);
                    playerDataCache[dataKey] = db;
                    //Console.error("asyncGetValue : 获取存档数据成功");
                    resolve(res.value);
                }).catch(err => {
                    Console.log(err);
                    reject("不存在这份存档，可能是新玩家");
                });
            });
        }
        /**
         * (服务端)设置存档
         * @param playerId
         * @param key
         * @param val
         */
        static async asyncSetValue(playerId, key, val) {
            return new Promise((resolve, reject) => {
                let data = new DBSaveBase();
                data.value = val;
                let dataStr = JSON.stringify(data);
                let playerDataCache = this.getPlayerDataCache(playerId);
                let dataKey = key + "_" + playerId + "_key";
                if (playerDataCache[dataKey] == dataStr) {
                    resolve();
                    return;
                }
                playerDataCache[dataKey] = dataStr;
                Event.dispatchToLocal("__setCustomDataCache", key + "_" + playerId + "_key", dataStr);
                resolve();
            });
        }
    }
    PrefabEvent.DBServerTool = DBServerTool;
    (function (AttrType) {
        /** 最大血量  */
        AttrType[AttrType["MaxHp"] = 0] = "MaxHp";
        /** 最大蓝量 */
        AttrType[AttrType["MaxMp"] = 1] = "MaxMp";
        /** 攻击力 */
        AttrType[AttrType["Attack"] = 2] = "Attack";
        /** 魔法力 */
        AttrType[AttrType["Magic"] = 3] = "Magic";
        /** 防御力 */
        AttrType[AttrType["Def"] = 4] = "Def";
        /** 魔法防御力 */
        AttrType[AttrType["MDef"] = 5] = "MDef";
        /** 速度 */
        AttrType[AttrType["Speed"] = 6] = "Speed";
        /** 跳跃力 */
        AttrType[AttrType["Jump"] = 7] = "Jump";
        /** 攻击速度 */
        AttrType[AttrType["AttackSpeed"] = 8] = "AttackSpeed";
        /** 攻击距离 */
        AttrType[AttrType["AttackDistance"] = 9] = "AttackDistance";
    })(PrefabEvent.AttrType || (PrefabEvent.AttrType = {}));
    /**
     * 属性协议
     */
    class PrefabEvtAttr {
        /**
         * (双端)添加属性
         * @param senderGuid 发起对象Guid
         * @param targetGuid 目标对象Guid
         * @param val 值
         * @param attrType 属性类型
         */
        static addAttrVal(senderGuid, targetGuid, val, attrType) {
            callFunc(this.name, this.onAddAttrVal.name, senderGuid, targetGuid, val, attrType);
        }
        /**
         * (双端)监听属性改变
         * @param callback 回调
         * @returns
         */
        static onAddAttrVal(callback) {
            return onFunc(this.name, this.onAddAttrVal.name, callback);
        }
    }
    PrefabEvent.PrefabEvtAttr = PrefabEvtAttr;
    (function (EquipSlot) {
        /** 武器 */
        EquipSlot[EquipSlot["Weapon"] = 1] = "Weapon";
    })(PrefabEvent.EquipSlot || (PrefabEvent.EquipSlot = {}));
    /**
     * 装备协议
     */
    class PrefabEvtEquip {
        /**
         * (双端) 穿戴装备
         * @param targetGuid 对象Guid
         * @param slot 槽位
         * @param equipGuid 装备Guid
         */
        static equip(targetGuid, slot, equipGuid) {
            callFunc(this.name, this.onEquip.name, targetGuid, slot, equipGuid);
        }
        /**
         * (双端)监听装备改变
         * @param callback
         * @returns
         */
        static onEquip(callback) {
            return onFunc(this.name, this.onEquip.name, callback);
        }
    }
    PrefabEvent.PrefabEvtEquip = PrefabEvtEquip;
    /**
     * 玩家信息类型
     */
    let PlayerInfoType;
    (function (PlayerInfoType) {
        /** 名字 */
        PlayerInfoType[PlayerInfoType["Name"] = 0] = "Name";
        /** 等级 */
        PlayerInfoType[PlayerInfoType["Level"] = 1] = "Level";
        /** 经验 */
        PlayerInfoType[PlayerInfoType["Exp"] = 2] = "Exp";
        /** 金币 */
        PlayerInfoType[PlayerInfoType["Gold"] = 3] = "Gold";
        /** 积分 */
        PlayerInfoType[PlayerInfoType["Score"] = 4] = "Score";
        /** 关卡 */
        PlayerInfoType[PlayerInfoType["Stage"] = 5] = "Stage";
        /** 人气 */
        PlayerInfoType[PlayerInfoType["Popularity"] = 6] = "Popularity";
    })(PlayerInfoType = PrefabEvent.PlayerInfoType || (PrefabEvent.PlayerInfoType = {}));
    /**
     * 玩家信息协议
     */
    class PrefabEvtPlayerInfo {
        /**
         * (双端)设置属性
         * @param senderGuid 发起对象Guid
         * @param targetGuid 目标对象Guid
         * @param val 值
         * @param infoType 信息类型
         */
        static setPlayerInfo(senderGuid, targetGuid, val, infoType) {
            callFunc(this.name, this.onSetPlayerInfo.name, senderGuid, targetGuid, val, infoType);
        }
        /**
         * (双端)监听属性改变
         * @param callback 回调
         * @returns
         */
        static onSetPlayerInfo(callback) {
            return onFunc(this.name, this.onSetPlayerInfo.name, callback);
        }
        /**
         * (双端)添加属性
         * @param senderGuid 发起对象Guid
         * @param targetGuid 目标对象Guid
         * @param val 值
         * @param infoType 信息类型
         */
        static addPlayerInfo(senderGuid, targetGuid, val, attrType) {
            callFunc(this.name, this.onAddPlayerInfo.name, senderGuid, targetGuid, val, PlayerInfoType);
        }
        /**
         * (双端)监听属性改变
         * @param callback 回调
         * @returns
         */
        static onAddPlayerInfo(callback) {
            return onFunc(this.name, this.onAddPlayerInfo.name, callback);
        }
        /**
         * (双端) 设置玩家名字
         * @param senderGuid 发起者Guid
         * @param targetGuid 目标对象Guid (玩家character)
         * @param name 名字
         */
        static setPlayerName(senderGuid, targetGuid, name) {
            callFunc(this.name, this.onSetPlayerName.name, senderGuid, targetGuid, name);
        }
        /**
         * (双端)监听玩家名字改变
         * @param callback 回调
         * @returns
         */
        static onSetPlayerName(callback) {
            return onFunc(this.name, this.onSetPlayerName.name, callback);
        }
    }
    PrefabEvent.PrefabEvtPlayerInfo = PrefabEvtPlayerInfo;
    /**
     * 攻击协议
     */
    class PrefabEvtFight {
        /**
         * (双端)击中目标
         * @param attackerGuid 发起对象Guid
         * @param targetGuid 目标对象Guid
         * @param damage 伤害
         * @param hitPoint 击中点
         */
        static hit(senderGuid, targetGuid, damage, hitPoint) {
            callFunc(this.name, this.onHit.name, senderGuid, targetGuid, damage, hitPoint);
        }
        /**
         * (双端)监听击中目标
         * @param callback 回调
         * @returns
         */
        static onHit(callback) {
            return onFunc(this.name, this.onHit.name, callback);
        }
        /**
         * (双端)发起伤害
         * @param attackerGuid 发起对象Guid
         * @param targetGuid 目标对象Guid
         * @param damage 伤害
         */
        static hurt(senderGuid, targetGuid, damage) {
            callFunc(this.name, this.onHurt.name, senderGuid, targetGuid, damage);
        }
        /**
         * (双端)监听受到伤害
         * @param callback 回调
         * @returns
         */
        static onHurt(callback) {
            return onFunc(this.name, this.onHurt.name, callback);
        }
        /**
         * (双端)发起治疗
         * @param attackerGuid 发起对象Guid
         * @param targetGuid 目标对象Guid
         * @param cureVal 治疗数值
         */
        static cure(senderGuid, targetGuid, cureVal) {
            callFunc(this.name, this.onCure.name, senderGuid, targetGuid, cureVal);
        }
        /**
         * (双端)监听受到治疗
         * @param callback 回调
         * @returns
         */
        static onCure(callback) {
            return onFunc(this.name, this.onCure.name, callback);
        }
        /**
         * (双端)发起死亡
         * @param targetGuid
         */
        static die(targetGuid) {
            callFunc(this.name, this.onDie.name, targetGuid);
        }
        /**
         * (双端)监听对象死亡
         * @param callback
         * @returns
         */
        static onDie(callback) {
            return onFunc(this.name, this.onDie.name, callback);
        }
        /**
         * (双端)通知复活
         * @param targetGuid 对象id
         */
        static revive(targetGuid) {
            callFunc(this.name, this.onRevive.name, targetGuid);
        }
        /**
         * (双端)监听复活
         * @param callback 回调
         * @returns
         */
        static onRevive(callback) {
            return onFunc(this.name, this.onRevive.name, callback);
        }
    }
    PrefabEvent.PrefabEvtFight = PrefabEvtFight;
    /**
     * 记录点协议
     */
    class PrefabEvtRecordPoint {
        /**
         * (双端)设置关卡
         * @param senderGuid 发送者Guid
         * @param targetGuid 目标Guid
         * @param recordPointId 记录点id
         */
        static setRecordPoint(senderGuid, targetGuid, recordPointId) {
            callFunc(this.name, this.onSetRecordPoint.name, senderGuid, targetGuid, recordPointId);
        }
        /**
         * (双端)监听设置关卡
         * @param callback 回调
         * @returns
         */
        static onSetRecordPoint(callback) {
            return onFunc(this.name, this.onSetRecordPoint.name, callback);
        }
        /**
         * (双端)返回存档记录点
         * @param senderGuid 发送者guid
         */
        static backCurrentRecordPoint(senderGuid) {
            callFunc(this.name, this.onBackCurrentRecordPoint.name, senderGuid);
        }
        /**
         * (双端)监听回到存档记录点
         * @param callback 回调
         */
        static onBackCurrentRecordPoint(callback) {
            return onFunc(this.name, this.onBackCurrentRecordPoint.name, callback);
        }
        /**
         * (双端)返回记录点
         * @param senderGuid 发送者guid
         * @param recordPointId 记录点id
         */
        static backRecordPoint(senderGuid, recordPointId) {
            callFunc(this.name, this.onBackRecordPoint.name, senderGuid, recordPointId);
        }
        /**
         * (双端)监听回到记录点
         * @param callback 回调
         */
        static onBackRecordPoint(callback) {
            return onFunc(this.name, this.onBackRecordPoint.name, callback);
        }
    }
    PrefabEvent.PrefabEvtRecordPoint = PrefabEvtRecordPoint;
    /**
     * 通知协议
     */
    class PrefabEvtNotify {
        /**
         * (客户端)本地通知
         * @param text
         */
        static notifyLocal(text) {
            callClientFunc(this.name, this.onNotify.name, text);
        }
        /**
         * (双端)全局通知
         * @param text 信息
         */
        static notify(text) {
            callFunc(this.name, this.onNotify.name, text);
        }
        /**
         * (双端)监听通知
         * @param callback
         * @returns
         */
        static onNotify(callback) {
            return onFunc(this.name, this.onNotify.name, callback);
        }
    }
    PrefabEvent.PrefabEvtNotify = PrefabEvtNotify;
    /**
     * 排行榜协议
     */
    class PrefabEvtRank {
        /**
         * (客户端)打开排行榜UI
         */
        static openRank() {
            callClientFunc(this.name, this.onOpenRank.name);
        }
        /**
         * (客户端)监听打开排行榜UI
         * @param callback 回调
         * @returns
         */
        static onOpenRank(callback) {
            return onFunc(this.name, this.onOpenRank.name, callback);
        }
        /**
         * (双端)设置排行榜数据
         * @param senderGuid
         * @param score
         * @param typeName
         */
        static setRankData(senderGuid, name, score, typeName) {
            callFunc(this.name, this.onSetRankData.name, senderGuid, name, score, typeName);
        }
        /**
         * (双端)监听设置排行榜数据
         * @param callback
         * @returns
         */
        static onSetRankData(callback) {
            return onFunc(this.name, this.onSetRankData.name, callback);
        }
        /**
         * (双端)删除排行榜数据
         * @param senderGuid
         */
        static delRankData(senderGuid) {
            callFunc(this.name, this.onDelRankData.name, senderGuid);
        }
        /**
         * (双端)监听删除排行榜数据
         * @param callback
         * @returns
         */
        static onDelRankData(callback) {
            return onFunc(this.name, this.onDelRankData.name, callback);
        }
    }
    PrefabEvent.PrefabEvtRank = PrefabEvtRank;
    /**
     * 换装协议
     */
    class PrefabEvtCloth {
        /**
         * (客户端)加载角色体型
         * @param senderGuid 发送者Guid
         * @param targetGuid 目标对象Guid
         * @param dressResGuid 装扮资源Guid
         */
        static loadRole(senderGuid, targetGuid, dressResGuid) {
            callClientFunc(this.name, this.onLoadRole.name, senderGuid, targetGuid, dressResGuid);
        }
        /**
         * (客户端)监听加载角色体型协议
         * @param callback 回调
         * @returns
         */
        static onLoadRole(callback) {
            return onFunc(this.name, this.onLoadRole.name, callback);
        }
        /**
         * (客户端)加载装扮
         * @param senderGuid 发送者Guid
         * @param targetGuid 目标对象Guid
         * @param dressResGuid 装扮资源Guid
         */
        static loadCloth(senderGuid, targetGuid, dressResGuid) {
            callClientFunc(this.name, this.onLoadCloth.name, senderGuid, targetGuid, dressResGuid);
        }
        /**
         * (客户端)监听加载装扮
         * @param callback
         * @returns
         */
        static onLoadCloth(callback) {
            return onFunc(this.name, this.onLoadCloth.name, callback);
        }
        /**
         * (客户端)加载插槽资源
         * @param senderGuid 发送者Guid
         * @param targetGuid 目标对象Guid
         * @param slotResGuid 插槽资源Guid
         */
        static loadSlot(senderGuid, targetGuid, slotResGuid) {
            callClientFunc(this.name, this.onLoadSlot.name, senderGuid, targetGuid, slotResGuid);
        }
        /**
         * (客户端)监听加载插槽资源
         * @param callback
         * @returns
         */
        static onLoadSlot(callback) {
            return onFunc(this.name, this.onLoadSlot.name, callback);
        }
    }
    PrefabEvent.PrefabEvtCloth = PrefabEvtCloth;
    /**
     * 收集物协议
     */
    class PrefabEvtCollection {
        /**
         * (客户端)打开收集物UI
         */
        static openCollectionUI() {
            callClientFunc(this.name, this.onOpenCollectionUI.name);
        }
        /**
         * (客户端)监听收集物UI被打开
         * @param callback
         * @returns
         */
        static onOpenCollectionUI(callback) {
            return onFunc(this.name, this.onOpenCollectionUI.name, callback);
        }
        /**
         * (双端)获得收集物
         * @param senderGuid
         * @param targetGuid
         * @param atlasId
         */
        static addCollection(atlasId, playerId) {
            callFunc(this.name, this.onAddCollection.name, atlasId, playerId);
        }
        /**
         * (双端)监听获得收集物
         * @param callback 回调
         * @returns
         */
        static onAddCollection(callback) {
            return onFunc(this.name, this.onAddCollection.name, callback);
        }
    }
    PrefabEvent.PrefabEvtCollection = PrefabEvtCollection;
    initEvent();
})(PrefabEvent || (PrefabEvent = {}));

var foreign99 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    get PrefabEvent () { return PrefabEvent; }
});

/** 冷兵器节点类型 */
var NodeType;
(function (NodeType) {
    /** 动画 */
    NodeType[NodeType["Animation"] = 1] = "Animation";
    /** 特效 */
    NodeType[NodeType["Eff"] = 2] = "Eff";
    /** 移动 */
    NodeType[NodeType["Move"] = 3] = "Move";
    /** 音效 */
    NodeType[NodeType["Audio"] = 4] = "Audio";
    /** 技能判定区域 */
    NodeType[NodeType["SkillRect"] = 5] = "SkillRect";
})(NodeType || (NodeType = {}));
/** 节点信息 */
class NodeInfo {
    constructor() {
        /** 节点类型 */
        this.type = "";
        /** 节点Guid */
        this.guid = "";
        /** 持续时间 */
        this.duration = "";
        /** 击打时间 */
        this.hitLength = "";
        /** 前摇时间  */
        this.frontRockLength = "";
        /** 是否蓄力 */
        this.isCharge = "0";
        /** 是否自动播放 */
        this.isAutoPlay = "0";
        /** 延迟播放时间 */
        this.delayPlayTime = "";
        /** 插槽位置 */
        this.slotIndex = "-1";
        /** 停止时间 */
        this.stopTime = "";
        /** 偏移坐标 */
        this.offsetPos = ["0", "0", "0"];
        /** 偏移旋转 */
        this.offsetRotation = ["0", "0", "0"];
        /** 偏移缩放 */
        this.offsetScale = ["0", "0", "0"];
        /** 特效颜色偏移 */
        this.colorHex = "";
        /** 移动参数 */
        /** 是否瞬移 1 瞬移 其它 插值 */
        this.isToPos = "";
        /** 移动朝向 1 前 -1 后*/
        this.moveDir = "";
        /** 移动距离 */
        this.moveDistance = "";
        /** 技能判定参数 */
        /** 角度 */
        this.skillAngle = "0";
        /** 偏移距离 */
        this.skillOffsetDis = "0";
        /** 半径 */
        this.skillRadius = "0";
        /** 高度 */
        this.skillHeight = "0";
        /** 长度 */
        this.skillLength = "0";
        /** 宽度 */
        this.skillWidth = "0";
    }
}
/**
 * 所有节点信息
 */
let AnimationInfo$1 = class AnimationInfo {
    constructor() {
        /** 战斗待机动画 */
        this.charFightIdelAniId = "";
        /** 动画信息 */
        this.infos = [];
    }
};
/** 冷兵器预定义类 */
class WeaponPreDefine extends mw.Script {
    constructor() {
        super(...arguments);
        /** 所有需要更新的回调 */
        this.allUpdateCallback = [];
    }
}
/** 冷兵器数据层 */
class WeaponData extends WeaponPreDefine {
    constructor() {
        /** 预加载资源 */
        // @mw.Property({ displayName: "预加载资源" })
        // public preloadAssets: string = "";
        super(...arguments);
        /** 动画json */
        this.animationJsons = [];
        /** 动画信息 */
        this.animationInfo = [];
        /** timer */
        this.allTimer = [];
        /** 宿主角色 */
        this.charGuid = "";
        /** 是否初始化完成 */
        this._isInit = false;
    }
    /** 启动所有需要更新的回调 */
    startUpdateInterval(callback) {
        this.allUpdateCallback.push(callback);
    }
    /** 停止所有定时器 */
    stopAllTimer() {
        this.allTimer.forEach(e => {
            clearTimeout(e);
            clearInterval(e);
        });
        this.server_StopAllTimer();
        this.allTimer = [];
        this.allUpdateCallback = [];
    }
    /**
     * 初始化角色对象
     * @param character 角色
     * @param onInitComplateCall 初始化完成回调
     * @returns
     */
    initCharacter(character, onInitComplateCall) {
        this.char = character;
        this.server_setChar(this.char.gameObjectId);
        this._onInitComplateCall = onInitComplateCall;
        if (this._isInit) {
            this._onInitComplateCall();
        }
        return true;
    }
    onStart() {
        super.onStart();
        //Console.error("创建完成 weapon");
        this.animationInfo = [];
        this.animationJsons.forEach(e => {
            let info = JSON.parse(e);
            let newInfo = new AnimationInfo$1();
            if (info) {
                Object.keys(info).forEach(e => {
                    if (info[e] instanceof Object) {
                        return;
                    }
                    newInfo[e] = info[e];
                });
                info.infos.forEach(e => {
                    let nodeInfo = new NodeInfo();
                    Object.keys(e).forEach(k => {
                        nodeInfo[k] = e[k];
                    });
                    Console.error(nodeInfo);
                    newInfo.infos.push(nodeInfo);
                });
                this.animationInfo.push(newInfo);
            }
            else {
                Console.error("解析json错误 : " + e);
            }
        });
        if (this.animationInfo.length != this.animationJsons.length) {
            Console.error("解析json错误 : 动画数量和解析数量不一致");
        }
        Console.error(this.animationInfo);
        if (!this._isInit) {
            this._isInit = true;
            if (this._onInitComplateCall)
                this._onInitComplateCall();
        }
    }
    onUpdate(dt) {
        super.onUpdate(dt);
        let newList = [];
        let updateList = false;
        this.allUpdateCallback.forEach(e => {
            let res = e(dt);
            if (res) {
                newList.push(e);
            }
            else {
                updateList = true;
            }
        });
        if (updateList)
            this.allUpdateCallback = newList;
    }
}
__decorate([
    mw.Property({ displayName: "动作数据", arrayDefault: ["{\"infos\":[{\"type\":\"1\",\"guid\":\"85955\",\"duration\":\"2000\",\"hitLength\":\"600\",\"frontRockLength\":\"600\",\"delayPlayTime\":\"\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"]},{\"type\":\"1\",\"guid\":\"85960\",\"duration\":\"2000\",\"hitLength\":\"600\",\"frontRockLength\":\"600\",\"delayPlayTime\":\"\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"]},{\"type\":\"1\",\"guid\":\"85959\",\"duration\":\"2000\",\"hitLength\":\"600\",\"frontRockLength\":\"600\",\"delayPlayTime\":\"\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"]},{\"type\":\"1\",\"guid\":\"85957\",\"duration\":\"2000\",\"hitLength\":\"600\",\"frontRockLength\":\"600\",\"delayPlayTime\":\"\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"]}]}"] })
], WeaponData.prototype, "animationJsons", void 0);
__decorate([
    mw.Property({ replicated: true, onChanged: "client_OnChangeCharGuid" })
], WeaponData.prototype, "charGuid", void 0);

var foreign65 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    AnimationInfo: AnimationInfo$1,
    NodeInfo: NodeInfo,
    get NodeType () { return NodeType; },
    WeaponData: WeaponData,
    WeaponPreDefine: WeaponPreDefine
});

/** 技能区域检测 */
class SkillRectCheck {
    /** 检测节点标识区域信息 */
    static checkNodes(char, nodeInfo) {
        let res = [];
        nodeInfo.forEach(e => {
            if (e.type != NodeType.SkillRect.toString()) {
                return;
            }
            let angle = parseInt(e.skillAngle);
            let offsetDis = parseInt(e.skillOffsetDis);
            let radius = parseInt(e.skillRadius);
            let height = parseInt(e.skillHeight);
            let length = parseInt(e.skillLength);
            let width = parseInt(e.skillWidth);
            let charLocation = mw.Vector.add(mw.Vector.zero, char.worldTransform.position);
            let dir = char.worldTransform.getForwardVector();
            if (offsetDis != 0) {
                charLocation.add(mw.Vector.multiply(dir, offsetDis));
            }
            if (radius > 0 && height > 0) {
                //radius check
                res = this.checkRadius(char, charLocation, radius, height);
            }
            else if (height > 0 && length > 0 && width > 0) {
                //box check
                let endLocation = mw.Vector.add(charLocation, mw.Vector.multiply(dir, length));
                res = this.checkBox(char, charLocation, endLocation, width, height);
            }
            if (angle > 0) {
                //angle check
                res = this.checkAngle(charLocation, dir, angle, res);
            }
            res = res.filter(e => { return e.guid != char.gameObjectId; });
        });
        return res;
    }
    /**
     * 角度检测
     * @param charLocation
     * @param dir
     * @param angle
     * @param targets
     * @returns
     */
    static checkAngle(charLocation, dir, angle, targets) {
        let res = [];
        targets.forEach(e => {
            if (MathUtil.angleCheck(charLocation, dir, e.worldTransform.position, angle)) {
                res.push(e);
            }
        });
        return res;
    }
    /** 半径检查 */
    static checkRadius(char, charLocation, radius, height) {
        let res = QueryUtil.capsuleOverlap(charLocation, radius, height, SkillRectCheck.showRect);
        return res;
    }
    /** 矩形盒子检测 */
    static checkBox(char, charLocation, endLocation, width, height) {
        let res = GeneralManager.modifyboxOverlapInLevel(charLocation, endLocation, width, height, SkillRectCheck.showRect);
        return res;
    }
}
SkillRectCheck.showRect = true;

var foreign62 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    SkillRectCheck: SkillRectCheck
});

class SpawnManager {
    static replicateGuid(guid) {
        let res = guid;
        if (this.replicateDic.has(guid)) {
            res = this.replicateDic.get(guid);
        }
        else if (this.deleteDic.has(guid)) {
            console.error("-------", guid, "------- is deleted!");
        }
        return res;
    }
    static modifyPoolSpawn(guid, type) {
        let assetId = this.replicateGuid(guid);
        if (type == undefined) {
            return GameObjPool.spawn(assetId);
        }
        return GameObjPool.spawn(assetId, type);
    }
    static modifyPoolAsyncSpawn(guid, type) {
        let assetId = this.replicateGuid(guid);
        if (type == undefined) {
            return GameObjPool.asyncSpawn(assetId);
        }
        return GameObjPool.asyncSpawn(assetId, type);
    }
    static wornSpawn(assetId, inReplicates, transform) {
        let info = {
            guid: assetId,
            replicates: inReplicates,
            transform: transform
        };
        return this.spawn(info);
    }
    static wornAsyncSpawn(assetId, inReplicates, transform) {
        let info = {
            guid: assetId,
            replicates: inReplicates,
            transform: transform
        };
        return this.asyncSpawn(info);
    }
    static spawn(info) {
        let assetId = info.gameObjectId ? info.gameObjectId : info.guid;
        let guid = this.replicateGuid(assetId);
        let obj = mw.GameObject.spawn(guid, { replicates: info.replicates, transform: info.transform });
        return obj;
    }
    static asyncSpawn(info) {
        let assetId = info.gameObjectId ? info.gameObjectId : info.guid;
        let guid = this.replicateGuid(assetId);
        let obj = mw.GameObject.asyncSpawn(guid, { replicates: info.replicates, transform: info.transform });
        return obj;
    }
}
SpawnManager.replicateDic = new Map([
    ["104", "Sound"],
    ["109", "SpawnLocation"],
    ["113", "Trigger"],
    ["116", "Interactor"],
    ["117", "BlockingVolume"],
    ["4301", "PointLight"],
    ["4306", "Effect"],
    ["20191", "PhysicsThruster"],
    ["20193", "NavigationVolume"],
    ["21151", "PostProcess"],
    ["108547", "ObjectLauncher"],
    ["119918", "IntegratedMover"],
    ["12683", "SwimmingVolume"],
    ["16037", "UIWidget"],
    ["16038", "WheeledVehicle4W"],
    ["20504", "PhysicsFulcrum"],
    ["20194", "NavModifierVolume"],
    ["20638", "HotWeapon"],
    ["25782", "Anchor"],
    ["67455", "PhysicsImpulse"],
    ["NPC", "Character"],
    ["31969", "Character"],
    ["124744", "Character"],
    ["28449", "Character"],
    ["BlockingArea", "BlockingVolume"],
    ["RelativeEffect", "Effect"],
    ["Thruster", "PhysicsThruster"],
    ["NavMeshVolume", "NavigationVolume"],
    ["PostProcessAdvance", "PostProcess"],
    ["ProjectileLauncher", "ObjectLauncher"],
    ["PhysicsSports", "IntegratedMover"],
]);
SpawnManager.deleteDic = new Map([
    ["110", true],
    ["8444", true],
    ["14090", true],
    ["14971", true],
    ["2695", true],
    ["30829", true],
    ["31479", true],
    ["14197", true],
]);

var foreign52 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    SpawnManager: SpawnManager
});

/** 冷兵器管理器预定义数据 */
class WeaponManagerPreDefine {
    constructor() {
        /** 网络事件id，区分返回值使用 */
        this.netActionId = 1;
        /** 网络事件返回监听 */
        this.netEventRet = new Map();
        /** PrefabGuid */
        this.prefabGuid = "";
    }
}
/** 冷兵器管理器客户端实现 */
class WeaponManagerCli extends WeaponManagerPreDefine {
    init() {
        if (mw.SystemUtil.isClient()) {
            /** 监听服务器初始化冷兵器完成 */
            Event.addServerListener(this.onServerInitWeaponCompalte.name, this.onServerInitWeaponCompalte.bind(this));
        }
    }
    /**
     * 服务器初始化冷兵器完成
     * @param netActionId 网络事件id
     * @param objGuid 对象guid
     * @param scriptGuid 脚本guid
     * @param charGuid 角色guid
     * @returns
     */
    async onServerInitWeaponCompalte(netActionId, objGuid, scriptGuid, charGuid) {
        if (this.netEventRet.has(netActionId)) {
            if (objGuid == "" || scriptGuid == "") {
                this.netEventRet.get(netActionId)(null);
                return;
            }
            let script = await mw.ScriptManager.asyncFindScript(scriptGuid);
            let charObj = await GameObject.asyncFindGameObjectById(charGuid);
            let char = null;
            if (PlayerManagerExtesion.isCharacter(charObj)) {
                char = charObj;
            }
            else if (PlayerManagerExtesion.isNpc(charObj)) {
                char = charObj;
            }
            if (script != null) {
                let weapon = script;
                weapon.initCharacter(char, () => {
                    this.netEventRet.get(netActionId)(weapon);
                    this.netEventRet.delete(netActionId);
                });
            }
        }
    }
    /**
     * 客户端请求获取一个冷兵器
     * @param player 玩家类
     * @param netActionId 网络事件id
     * @param charGuid 角色guid
     * @param prefabId 预制件id
     * @returns
     */
    client_AsyncGetWeapon(prefabGuid, char, reqPlayer, netActionId = 0) {
        if (mw.SystemUtil.isClient()) {
            return new Promise((resolve, reject) => {
                let actionId = this.netActionId++;
                this.netEventRet.set(actionId, resolve);
                Event.dispatchToServer(this.onClientGetWeapon.name, actionId, char.gameObjectId, this.prefabGuid);
            });
        }
    }
}
/** 冷兵器管理器服务端实现 */
class WeaponManagerSvr extends WeaponManagerCli {
    constructor() {
        super(...arguments);
        /** 缓存玩家绑定的冷兵器 */
        this.cacheWeapon = new Map();
    }
    init() {
        super.init();
        if (mw.SystemUtil.isServer()) {
            Player.onPlayerLeave.add(this.server_OnDeleteWeapon.bind(this));
            Event.addClientListener(this.onClientGetWeapon.name, this.onClientGetWeapon.bind(this));
            Event.addClientListener(this.server_OnDeleteWeaponByGuid.name, this.server_OnDeleteWeaponByGuid.bind(this));
        }
    }
    /**
     * 服务器删除一个冷兵器
     * @param player 玩家
     */
    server_OnDeleteWeapon(player) {
        let charGuid = player.character.gameObjectId;
        if (this.cacheWeapon.has(charGuid)) {
            let weapon = this.cacheWeapon.get(charGuid);
            let go = weapon.gameObject;
            weapon.destroy();
            go.destroy();
            this.cacheWeapon.delete(charGuid);
        }
    }
    /**
     * 服务器删除一个冷兵器
     * @param weaponGuid 冷兵器guid
     */
    async server_OnDeleteWeaponByGuid(weaponGuid) {
        let weapon = await mw.ScriptManager.asyncFindScript(weaponGuid);
        if (weapon) {
            let go = weapon.gameObject;
            this.cacheWeapon.delete(weapon["charGuid"]);
            weapon.destroy();
            go.destroy();
        }
    }
    /**
     * 客户端请求获取一个冷兵器
     * @param player 玩家类
     * @param netActionId 网络事件id
     * @param charGuid 角色guid
     * @param prefabId 预制件id
     * @returns
     */
    async onClientGetWeapon(player, netActionId, charGuid, prefabId) {
        let char = await GameObject.asyncFindGameObjectById(charGuid);
        if (char == null) {
            Event.dispatchToClient(player, this.onServerInitWeaponCompalte.name, netActionId, "", "");
            return;
        }
        if (PlayerManagerExtesion.isCharacter(char)) {
            this.client_AsyncGetWeapon(prefabId, char, player, netActionId);
        }
        else if (PlayerManagerExtesion.isNpc(char)) {
            this.client_AsyncGetWeapon(prefabId, char, player, netActionId);
        }
    }
    /**
     * 获取一个冷兵器
     * @param prefabGuid 冷兵器预制件id
     * @param char 角色对象
     * @param reqPlayer 玩家对象
     * @param netActionId 网络事件id
     * @returns
     */
    async client_AsyncGetWeapon(prefabGuid, char, reqPlayer, netActionId) {
        if (mw.SystemUtil.isClient()) {
            return super.client_AsyncGetWeapon(prefabGuid, char, reqPlayer, netActionId);
        }
        if (mw.SystemUtil.isServer()) {
            let test = await SpawnManager.wornAsyncSpawn(this.prefabGuid, true);
            let script = await test.getScriptByName("Weapon");
            let testWeapon = script;
            testWeapon.initCharacter(char, (() => {
                this.cacheWeapon.set(char.gameObjectId, testWeapon);
                Event.dispatchToClient(reqPlayer, this.onServerInitWeaponCompalte.name, netActionId, test.gameObjectId, testWeapon.guid, char.gameObjectId);
            }).bind(this));
            return null;
        }
        return null;
    }
}
/**
 * 冷兵器管理器
 */
class WeaponManager extends WeaponManagerSvr {
    /** 获取冷兵器管理实例 */
    static GetInstance() {
        if (WeaponManager._Instance == null) {
            this._Instance = new WeaponManager();
            this._Instance.init();
        }
        return this._Instance;
    }
    init() {
        super.init();
    }
    /**
     * 获取一个冷兵器
     * @param prefabGuid 冷兵器预制件Guid
     * @param char 绑定角色对象
     * @param reqPlayer 请求玩家
     * @returns
     */
    async client_AsyncGetWeapon(prefabGuid, char, reqPlayer, netActionId = 0) {
        this.prefabGuid = prefabGuid;
        return super.client_AsyncGetWeapon(prefabGuid, char, reqPlayer, netActionId);
    }
    /**
     * 销毁一个冷兵器实例
     * @param weapon 实例
     */
    client_DestroyWeapon(weapon) {
        weapon.stopPlay();
        Event.dispatchToServer(this.server_OnDeleteWeaponByGuid.name, weapon.guid);
    }
}
WeaponManager._Instance = null;
WeaponManager.GetInstance();

var foreign66 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    WeaponManager: WeaponManager
});

class ColdWeapon {
    constructor() {
        /** 当前连击时间 */
        this._curComboTime = 0;
        /** 结束蓄力回调 */
        this._endChargeResolve = null;
        /** 伤害 */
        this._hitDamage = 10;
        /** 是否持有武器 */
        this._isKeepWeapon = false;
        this.hudModuleC = null;
    }
    get isKeepWeapon() {
        return this._isKeepWeapon;
    }
    static getInstance() {
        if (this.instance == null) {
            this.instance = new ColdWeapon();
            PrefabEvent.PrefabEvtEquip.onEquip((targetGuid, slot, equipGuid) => {
                const player = Player.localPlayer;
                if (targetGuid == player.character.gameObjectId) {
                    if (slot == PrefabEvent.EquipSlot.Weapon && this.instance._weapon && equipGuid != this.instance._weapon.guid) {
                        if (this.instance._isKeepWeapon) {
                            this.instance.releseHandle();
                        }
                    }
                }
            });
        }
        return this.instance;
    }
    /**
     * 注册
     * @param pick 数据来源
     * @param meleeWeaponPrefabGuid 冷兵器预制件Guid
     */
    async register(pick) {
        if (this._isKeepWeapon) {
            this.releseHandle();
        }
        const player = Player.localPlayer;
        if (this._weapon == null) {
            this._weapon = await WeaponManager.GetInstance().client_AsyncGetWeapon("40508030498EB8CA9D2EDF92DBFD5F11", player.character, player, 0);
            SkillRectCheck.showRect = SystemUtil.isPIE;
        }
        //初始化打击特效，装备武器
        this._onHitEffGuid = pick.hitEffect;
        this._onHitAnimation = pick.hitAnimation;
        this._hitDamage = pick.hitDamage;
        this._weapon.reWriteAnimationJson([pick.jsons]);
        if (pick.rightWeaponGuid != null) {
            this._weapon.equipWeapon_Hand(pick.rightWeaponGuid, true);
        }
        if (pick.leftWeaponGuid != null) {
            this._weapon.equipWeapon_Hand(pick.leftWeaponGuid, false);
        }
        this._isKeepWeapon = true;
        this.isPlaying = false;
        PrefabEvent.PrefabEvtEquip.equip(player.character.gameObjectId, PrefabEvent.EquipSlot.Weapon, this._weapon.guid);
    }
    releseHandle() {
        this._weapon.unequipWeapon_Hand(true);
        this._weapon.unequipWeapon_Hand(false);
        this._isKeepWeapon = false;
    }
    /**
     * 冷武器进攻
     * @param index 对应的序列号
     */
    attack(index) {
        if (!this._weapon)
            return;
        this.isPlaying = true;
        this._weapon.playAnimation(index, //播放完成
        (curActionIndex, maxIndex) => {
            this._curComboTime = 0;
        }, 
        //到达打击点
        this.hitTargets.bind(this), 
        //可以开始combo
        (milSec) => {
            this.isPlaying = false;
            this._curComboTime = milSec;
        }, 
        //蓄能
        (curIndex, maxIndex, endChargeResolve) => {
            this._endChargeResolve = endChargeResolve;
        });
    }
    hitTargets(curActionIndex, maxIndex, hitObjs) {
        hitObjs.forEach(async (e) => {
            if (e.tag == "Obj-Enemy") {
                Console.error("攻击到了 guid = " + e.gameObjectId);
                PrefabEvent.PrefabEvtFight.hurt(Player.localPlayer.character.gameObjectId, e.gameObjectId, this._hitDamage + this.getHUDModuleC.getAtk);
                return;
            }
            if (!(PlayerManagerExtesion.isCharacter(e)) && !(PlayerManagerExtesion.isNpc(e))) {
                return;
            }
            if (Player.localPlayer.character.gameObjectId == e.gameObjectId)
                return;
            if (this._onHitEffGuid != "") {
                if (e && e.worldTransform) {
                    let eff = await GameObjPool.asyncSpawn(this._onHitEffGuid);
                    eff.worldTransform.position = e.worldTransform.position.clone();
                    eff.loop = (false);
                    eff.play(() => {
                        GameObjPool.despawn(eff);
                    });
                }
            }
            if (this._onHitAnimation != "" && (PlayerManagerExtesion.isCharacter(e) || PlayerManagerExtesion.isNpc(e))) {
                const character = e;
                PlayerManagerExtesion.rpcPlayAnimation(character, this._onHitAnimation);
            }
            Console.log("使用冷兵器攻击了" + e.gameObjectId);
            PrefabEvent.PrefabEvtFight.hit(Player.localPlayer.character.gameObjectId, e.gameObjectId, this._hitDamage + this.getHUDModuleC.getAtk, e.worldTransform.position);
        });
    }
    /**
     * 结束（取消）蓄力
     * @param isConfirm true为结束蓄力，false为取消蓄力
     */
    endCharge(isConfirm) {
        if (this._endChargeResolve) {
            this._endChargeResolve(isConfirm);
            this._endChargeResolve = null;
        }
    }
    /** 获取当前连击时间 */
    getCurComboTime() {
        return this._curComboTime;
    }
    get getHUDModuleC() {
        if (this.hudModuleC == null) {
            this.hudModuleC = ModuleService.getModule(HUDModuleC);
        }
        return this.hudModuleC;
    }
}

var foreign61 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    ColdWeapon: ColdWeapon
});

var ObjectPoolServices;
(function (ObjectPoolServices) {
    class ObjectPool {
        constructor(spawn, initNum = 3) {
            this.spawnFun = spawn;
            this.pool = new Array(initNum);
            this.oPool = new Array();
            for (let index = 0; index < initNum; index++) {
                this.pool[index] = this.spawnFun();
            }
        }
        spawn() {
            if (this.pool.length > 0) {
                let a = this.pool.pop();
                this.oPool.push(a);
                return a;
            }
            let a = this.spawnFun();
            this.oPool.push(a);
            return a;
        }
        return(instance) {
            if (instance == null) {
                return;
            }
            this.pool.push(instance);
        }
        getSize() {
            return this.pool.length;
        }
        clear() {
            this.pool.length = 0;
        }
        oPoolClear() {
            this.oPool.length = 0;
        }
        getAll() {
            return this.pool;
        }
        getOPool() {
            return this.oPool;
        }
    }
    ObjectPoolServices.ObjectPool = ObjectPool;
    const poolMap = new Map();
    function getPool(cls, autoCreat = true) {
        let pool = poolMap.get(cls.name);
        if (pool === undefined && autoCreat) {
            initPool(cls, () => new cls());
        }
        return poolMap.get(cls.name);
    }
    ObjectPoolServices.getPool = getPool;
    function initPool(cls, spawn, initNum = 3) {
        let pool = poolMap.get(cls.name);
        if (pool === undefined) {
            pool = new ObjectPool(spawn, initNum);
            poolMap.set(cls.name, pool);
        }
        return pool;
    }
    ObjectPoolServices.initPool = initPool;
    function destroyPool(cls) {
        let pool = poolMap.get(cls.name);
        if (pool !== undefined) {
            pool.clear();
        }
        poolMap.delete(cls.name);
    }
    ObjectPoolServices.destroyPool = destroyPool;
    function clear() {
        for (const [key, pool] of poolMap) {
            pool.clear();
        }
        poolMap.clear();
    }
    ObjectPoolServices.clear = clear;
})(ObjectPoolServices || (ObjectPoolServices = {}));
var SourceType;
(function (SourceType) {
    SourceType[SourceType["Error"] = 0] = "Error";
    SourceType[SourceType["Asset"] = 1] = "Asset";
    SourceType[SourceType["GameObject"] = 2] = "GameObject";
    SourceType[SourceType["Prefab"] = 3] = "Prefab"; //预制体
})(SourceType || (SourceType = {}));
class ObjPool {
    constructor() {
        this.POOL_RES_GUID = 'poolResGuid'; //原始对象的guid，还对象的时候使用
        this.sourceTypeMap = new Map();
        this.sceneSource = new Map();
        this.subPoolMap = new Map();
    }
    destroy() {
        ObjPool.instance = null;
    }
    /**
     * 生成一个对象
     * @param guid 场景对象的guid | 资源的guid | prefab的guid
     * @returns 对象
     */
    spawn(guid) {
        if (this.subPoolMap.has(guid) && this.subPoolMap.get(guid).length > 0) {
            let obj = this.subPoolMap.get(guid).pop();
            obj.setVisibility(mw.PropertyStatus.On);
            return obj;
        }
        if (!this.sourceTypeMap.has(guid)) {
            this.sourceTypeMap.set(guid, this.getSourceType(guid));
        }
        let obj = null;
        switch (this.sourceTypeMap.get(guid)) {
            case SourceType.Asset:
                obj = SpawnManager.wornSpawn(guid);
                break;
            case SourceType.GameObject:
                obj = this.sceneSource.get(guid).clone();
                break;
            case SourceType.Prefab:
                obj = SpawnManager.wornSpawn(guid);
                break;
        }
        if (obj == null) {
            this.sourceTypeMap.set(guid, SourceType.Error);
        }
        else {
            obj.setVisibility(mw.PropertyStatus.On);
            obj.worldTransform.position = mw.Vector.zero;
            obj[this.POOL_RES_GUID] = guid;
        }
        return obj;
    }
    //根据资源的guid获取资源的类型
    getSourceType(guid) {
        if (guid.length > 18) {
            let source = GameObject.findGameObjectById(guid);
            if (source != null) { //场景里的
                source.parent = null;
                source.setVisibility(mw.PropertyStatus.Off);
                this.sceneSource.set(guid, source);
                return SourceType.GameObject;
            }
            else { //预制体
                return SourceType.Prefab;
            }
        }
        else { //库里的
            return SourceType.Asset;
        }
    }
    /**
     * 归还一个对象
     * @param obj 对象
     */
    despawn(obj) {
        let guid = obj[this.POOL_RES_GUID];
        if (guid == null)
            return;
        if (!this.subPoolMap.has(guid))
            this.subPoolMap.set(guid, []);
        if (this.subPoolMap.get(guid).includes(obj))
            return;
        this.subPoolMap.get(guid).push(obj);
        // obj.parent = null;
    }
    /**
     * 清除对象池中所以guid对应的对象
     * @param guid 清除对象的guid
     */
    clear(guid) {
        if (!this.subPoolMap.has(guid) && this.subPoolMap.get(guid).length == 0) {
            return;
        }
        let arr = this.subPoolMap.get(guid);
        for (let i = 0; i < arr.length; i++) {
            arr[i].destroy();
        }
        arr.length = 0;
    }
}

var foreign107 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    ObjPool: ObjPool,
    get ObjectPoolServices () { return ObjectPoolServices; }
});

/**
 * AUTO GENERATE BY UI EDITOR.
 * WARNING: DO NOT MODIFY THIS FILE,MAY CAUSE CODE LOST.
 * AUTHOR: 爱玩游戏的小胖子
 * UI: UI/module/PetUI/PetPanel.ui
 * TIME: 2024.08.04-18.39.53
 */
let PetPanel_Generate = class PetPanel_Generate extends UIScript {
    get mCloseButton() {
        if (!this.mCloseButton_Internal && this.uiWidgetBase) {
            this.mCloseButton_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/Canvas/mCloseButton');
        }
        return this.mCloseButton_Internal;
    }
    get mRaffleButton() {
        if (!this.mRaffleButton_Internal && this.uiWidgetBase) {
            this.mRaffleButton_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/Canvas/mRaffleButton');
        }
        return this.mRaffleButton_Internal;
    }
    get mScrollBox() {
        if (!this.mScrollBox_Internal && this.uiWidgetBase) {
            this.mScrollBox_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/Canvas/Canvas_1/mScrollBox');
        }
        return this.mScrollBox_Internal;
    }
    get mContentCanvas() {
        if (!this.mContentCanvas_Internal && this.uiWidgetBase) {
            this.mContentCanvas_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/Canvas/Canvas_1/mScrollBox/mContentCanvas');
        }
        return this.mContentCanvas_Internal;
    }
    onAwake() {
        //设置能否每帧触发onUpdate
        this.canUpdate = false;
        this.layer = mw.UILayerBottom;
        this.initButtons();
    }
    initButtons() {
        //按钮添加点击
        //按钮添加点击
        this.mCloseButton.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick", "mCloseButton");
        });
        this.mCloseButton.touchMethod = (mw.ButtonTouchMethod.PreciseTap);
        this.mRaffleButton.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick", "mRaffleButton");
        });
        this.mRaffleButton.touchMethod = (mw.ButtonTouchMethod.PreciseTap);
        //按钮多语言
        //文本多语言
        //文本多语言
        this.initLanguage(this.uiWidgetBase.findChildByPath("RootCanvas/Canvas/TextBlock"));
        this.initLanguage(this.uiWidgetBase.findChildByPath("RootCanvas/Canvas/mRaffleButton/TextBlock_1"));
    }
    /*初始化多语言*/
    initLanguage(ui) {
        let call = mw.UIScript.getBehavior("lan");
        if (call && ui) {
            call(ui);
        }
    }
    onShow(...params) { }
    ;
    /*显示panel*/
    show(...param) {
        mw.UIService.showUI(this, this.layer, ...param);
    }
    /*隐藏panel*/
    hide() {
        mw.UIService.hideUI(this);
    }
};
PetPanel_Generate = __decorate([
    UIBind('UI/module/PetUI/PetPanel.ui')
], PetPanel_Generate);
var PetPanel_Generate$1 = PetPanel_Generate;

var foreign134 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: PetPanel_Generate$1
});

/**
 * AUTO GENERATE BY UI EDITOR.
 * WARNING: DO NOT MODIFY THIS FILE,MAY CAUSE CODE LOST.
 * AUTHOR: 爱玩游戏的小胖子
 * UI: UI/module/PetUI/PetRafflePanel.ui
 * TIME: 2024.08.04-18.39.54
 */
let PetRafflePanel_Generate = class PetRafflePanel_Generate extends UIScript {
    get mCloseButton() {
        if (!this.mCloseButton_Internal && this.uiWidgetBase) {
            this.mCloseButton_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/Canvas/mCloseButton');
        }
        return this.mCloseButton_Internal;
    }
    get mPetIcon1() {
        if (!this.mPetIcon1_Internal && this.uiWidgetBase) {
            this.mPetIcon1_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/Canvas/Canvas_1/Canvas1/mPetIcon1');
        }
        return this.mPetIcon1_Internal;
    }
    get mSelectImage1() {
        if (!this.mSelectImage1_Internal && this.uiWidgetBase) {
            this.mSelectImage1_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/Canvas/Canvas_1/Canvas1/mSelectImage1');
        }
        return this.mSelectImage1_Internal;
    }
    get mPetIcon2() {
        if (!this.mPetIcon2_Internal && this.uiWidgetBase) {
            this.mPetIcon2_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/Canvas/Canvas_1/Canvas2/mPetIcon2');
        }
        return this.mPetIcon2_Internal;
    }
    get mSelectImage2() {
        if (!this.mSelectImage2_Internal && this.uiWidgetBase) {
            this.mSelectImage2_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/Canvas/Canvas_1/Canvas2/mSelectImage2');
        }
        return this.mSelectImage2_Internal;
    }
    get mPetIcon3() {
        if (!this.mPetIcon3_Internal && this.uiWidgetBase) {
            this.mPetIcon3_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/Canvas/Canvas_1/Canvas3/mPetIcon3');
        }
        return this.mPetIcon3_Internal;
    }
    get mSelectImage3() {
        if (!this.mSelectImage3_Internal && this.uiWidgetBase) {
            this.mSelectImage3_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/Canvas/Canvas_1/Canvas3/mSelectImage3');
        }
        return this.mSelectImage3_Internal;
    }
    get mPetIcon4() {
        if (!this.mPetIcon4_Internal && this.uiWidgetBase) {
            this.mPetIcon4_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/Canvas/Canvas_1/Canvas4/mPetIcon4');
        }
        return this.mPetIcon4_Internal;
    }
    get mSelectImage4() {
        if (!this.mSelectImage4_Internal && this.uiWidgetBase) {
            this.mSelectImage4_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/Canvas/Canvas_1/Canvas4/mSelectImage4');
        }
        return this.mSelectImage4_Internal;
    }
    get mPetIcon5() {
        if (!this.mPetIcon5_Internal && this.uiWidgetBase) {
            this.mPetIcon5_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/Canvas/Canvas_1/Canvas5/mPetIcon5');
        }
        return this.mPetIcon5_Internal;
    }
    get mSelectImage5() {
        if (!this.mSelectImage5_Internal && this.uiWidgetBase) {
            this.mSelectImage5_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/Canvas/Canvas_1/Canvas5/mSelectImage5');
        }
        return this.mSelectImage5_Internal;
    }
    get mPetIcon6() {
        if (!this.mPetIcon6_Internal && this.uiWidgetBase) {
            this.mPetIcon6_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/Canvas/Canvas_1/Canvas6/mPetIcon6');
        }
        return this.mPetIcon6_Internal;
    }
    get mSelectImage6() {
        if (!this.mSelectImage6_Internal && this.uiWidgetBase) {
            this.mSelectImage6_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/Canvas/Canvas_1/Canvas6/mSelectImage6');
        }
        return this.mSelectImage6_Internal;
    }
    get mPetIcon7() {
        if (!this.mPetIcon7_Internal && this.uiWidgetBase) {
            this.mPetIcon7_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/Canvas/Canvas_1/Canvas7/mPetIcon7');
        }
        return this.mPetIcon7_Internal;
    }
    get mSelectImage7() {
        if (!this.mSelectImage7_Internal && this.uiWidgetBase) {
            this.mSelectImage7_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/Canvas/Canvas_1/Canvas7/mSelectImage7');
        }
        return this.mSelectImage7_Internal;
    }
    get mPetIcon8() {
        if (!this.mPetIcon8_Internal && this.uiWidgetBase) {
            this.mPetIcon8_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/Canvas/Canvas_1/Canvas8/mPetIcon8');
        }
        return this.mPetIcon8_Internal;
    }
    get mSelectImage8() {
        if (!this.mSelectImage8_Internal && this.uiWidgetBase) {
            this.mSelectImage8_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/Canvas/Canvas_1/Canvas8/mSelectImage8');
        }
        return this.mSelectImage8_Internal;
    }
    get mPetIcon9() {
        if (!this.mPetIcon9_Internal && this.uiWidgetBase) {
            this.mPetIcon9_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/Canvas/Canvas_1/Canvas9/mPetIcon9');
        }
        return this.mPetIcon9_Internal;
    }
    get mSelectImage9() {
        if (!this.mSelectImage9_Internal && this.uiWidgetBase) {
            this.mSelectImage9_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/Canvas/Canvas_1/Canvas9/mSelectImage9');
        }
        return this.mSelectImage9_Internal;
    }
    get mPetIcon10() {
        if (!this.mPetIcon10_Internal && this.uiWidgetBase) {
            this.mPetIcon10_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/Canvas/Canvas_1/Canvas10/mPetIcon10');
        }
        return this.mPetIcon10_Internal;
    }
    get mSelectImage10() {
        if (!this.mSelectImage10_Internal && this.uiWidgetBase) {
            this.mSelectImage10_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/Canvas/Canvas_1/Canvas10/mSelectImage10');
        }
        return this.mSelectImage10_Internal;
    }
    get mPetIcon11() {
        if (!this.mPetIcon11_Internal && this.uiWidgetBase) {
            this.mPetIcon11_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/Canvas/Canvas_1/Canvas11/mPetIcon11');
        }
        return this.mPetIcon11_Internal;
    }
    get mSelectImage11() {
        if (!this.mSelectImage11_Internal && this.uiWidgetBase) {
            this.mSelectImage11_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/Canvas/Canvas_1/Canvas11/mSelectImage11');
        }
        return this.mSelectImage11_Internal;
    }
    get mPetIcon12() {
        if (!this.mPetIcon12_Internal && this.uiWidgetBase) {
            this.mPetIcon12_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/Canvas/Canvas_1/Canvas12/mPetIcon12');
        }
        return this.mPetIcon12_Internal;
    }
    get mSelectImage12() {
        if (!this.mSelectImage12_Internal && this.uiWidgetBase) {
            this.mSelectImage12_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/Canvas/Canvas_1/Canvas12/mSelectImage12');
        }
        return this.mSelectImage12_Internal;
    }
    get mRaffleButton() {
        if (!this.mRaffleButton_Internal && this.uiWidgetBase) {
            this.mRaffleButton_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/Canvas/mRaffleButton');
        }
        return this.mRaffleButton_Internal;
    }
    get mRaffleText() {
        if (!this.mRaffleText_Internal && this.uiWidgetBase) {
            this.mRaffleText_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/Canvas/mRaffleButton/mRaffleText');
        }
        return this.mRaffleText_Internal;
    }
    get mPetButton() {
        if (!this.mPetButton_Internal && this.uiWidgetBase) {
            this.mPetButton_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/Canvas/mPetButton');
        }
        return this.mPetButton_Internal;
    }
    get mGetCanvas() {
        if (!this.mGetCanvas_Internal && this.uiWidgetBase) {
            this.mGetCanvas_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mGetCanvas');
        }
        return this.mGetCanvas_Internal;
    }
    get mCloseGetButton() {
        if (!this.mCloseGetButton_Internal && this.uiWidgetBase) {
            this.mCloseGetButton_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mGetCanvas/mCloseGetButton');
        }
        return this.mCloseGetButton_Internal;
    }
    get mGetImage() {
        if (!this.mGetImage_Internal && this.uiWidgetBase) {
            this.mGetImage_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mGetCanvas/Canvas_3/mGetImage');
        }
        return this.mGetImage_Internal;
    }
    onAwake() {
        //设置能否每帧触发onUpdate
        this.canUpdate = false;
        this.layer = mw.UILayerBottom;
        this.initButtons();
    }
    initButtons() {
        //按钮添加点击
        //按钮添加点击
        this.mCloseButton.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick", "mCloseButton");
        });
        this.mCloseButton.touchMethod = (mw.ButtonTouchMethod.PreciseTap);
        this.mRaffleButton.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick", "mRaffleButton");
        });
        this.mRaffleButton.touchMethod = (mw.ButtonTouchMethod.PreciseTap);
        this.mPetButton.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick", "mPetButton");
        });
        this.mPetButton.touchMethod = (mw.ButtonTouchMethod.PreciseTap);
        this.mCloseGetButton.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick", "mCloseGetButton");
        });
        this.mCloseGetButton.touchMethod = (mw.ButtonTouchMethod.PreciseTap);
        //按钮多语言
        //文本多语言
        this.initLanguage(this.mRaffleText);
        //文本多语言
        this.initLanguage(this.uiWidgetBase.findChildByPath("RootCanvas/Canvas/TextBlock"));
        this.initLanguage(this.uiWidgetBase.findChildByPath("RootCanvas/Canvas/mPetButton/RaffleText"));
    }
    /*初始化多语言*/
    initLanguage(ui) {
        let call = mw.UIScript.getBehavior("lan");
        if (call && ui) {
            call(ui);
        }
    }
    onShow(...params) { }
    ;
    /*显示panel*/
    show(...param) {
        mw.UIService.showUI(this, this.layer, ...param);
    }
    /*隐藏panel*/
    hide() {
        mw.UIService.hideUI(this);
    }
};
PetRafflePanel_Generate = __decorate([
    UIBind('UI/module/PetUI/PetRafflePanel.ui')
], PetRafflePanel_Generate);
var PetRafflePanel_Generate$1 = PetRafflePanel_Generate;

var foreign135 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: PetRafflePanel_Generate$1
});

/**
 * AUTHOR: 爱玩游戏的小胖子
 * TIME: 2023.07.01-11.13.56
 */
class PetRafflePanel extends PetRafflePanel_Generate$1 {
    constructor() {
        super(...arguments);
        this.petModuleC = null;
        this.petPanel = null;
        this.adTips = null;
        this.mSelectImages = [];
        this.mPetIcons = [];
        this.isFree = true;
        this.ids = [];
        this.pets = null;
        this.tmpArr = [];
        this.timer = 0.2; /**131832*/
        this.soundId = null;
    }
    /**
     * 构造UI文件成功后，在合适的时机最先初始化一次
     */
    onStart() {
        //设置能否每帧触发onUpdate
        this.canUpdate = false;
        this.layer = mw.UILayerMiddle;
        this.initDatas();
        this.bindButtons();
    }
    initDatas() {
        this.petModuleC = ModuleService.getModule(PetModuleC);
        this.petPanel = mw.UIService.getUI(PetPanel);
        this.adTips = mw.UIService.getUI(AdTips);
        for (let i = 1; i <= 12; ++i) {
            this.mSelectImages.push(this['mSelectImage' + i]);
            this.mSelectImages[i - 1].visibility = mw.SlateVisibility.Collapsed;
            this.mPetIcons.push(this['mPetIcon' + i]);
        }
        this.mGetCanvas.visibility = mw.SlateVisibility.Collapsed;
    }
    bindButtons() {
        this.mCloseButton.onClicked.add(() => {
            this.hide();
        });
        this.mCloseGetButton.onClicked.add(() => {
            if (this.mGetCanvas.visibility != mw.SlateVisibility.SelfHitTestInvisible)
                return;
            this.mGetCanvas.visibility = mw.SlateVisibility.Collapsed;
        });
        this.mPetButton.onClicked.add(() => {
            this.hide();
            this.petPanel.show();
        });
        this.mRaffleButton.onClicked.add(() => {
            if (this.isFree) {
                this.startRaffle();
                this.raffleComplete();
                this.banButton(false);
            }
            else {
                if (GlobalData.isOpenIAA) {
                    this.adTips.showAdTips(1, AdType.Raffle);
                }
                else {
                    this.getRaffle();
                }
            }
        });
    }
    banButton(v) {
        this.mPetButton.enable = v;
        this.mRaffleButton.enable = v;
    }
    raffleComplete() {
        this.isFree = false;
        this.petModuleC.saveIsFreeCount(false);
        this.mRaffleText.text = "增加次数";
    }
    getRaffle() {
        this.isFree = true;
        this.petModuleC.saveIsFreeCount(true);
        this.mRaffleText.text = "免费抽奖";
    }
    onShow(...params) {
        this.isFree = this.petModuleC.getIsFreeCount();
        let txt = "";
        if (this.isFree) {
            txt = "免费抽奖";
        }
        else {
            txt = "增加次数";
        }
        this.mRaffleText.text = txt;
    }
    updateIcons(ids) {
        this.ids = ids;
        this.pets = GameConfig.Pet;
        for (let i = 0; i < 12; ++i) {
            this.mPetIcons[i].imageGuid = this.pets.getElement(ids[i]).PetIcon;
        }
    }
    /**开始抽奖 */
    startRaffle() {
        Event.dispatchToLocal("RaffAch", 1);
        let amount = Utils.getRandomInteger(40, 50);
        let index = 0;
        this.tmpArr = Utils.getRandomArr([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], 6);
        for (let i = 0; i < this.tmpArr.length; ++i) {
            this.mSelectImages[this.tmpArr[i]].visibility = mw.SlateVisibility.SelfHitTestInvisible;
        }
        index++;
        let id = TimeUtil.setInterval(() => {
            for (let i = 0; i < this.tmpArr.length; ++i) {
                this.mSelectImages[this.tmpArr[i]].visibility = mw.SlateVisibility.Collapsed;
            }
            this.tmpArr = Utils.getRandomArr([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], 6);
            for (let i = 0; i < this.tmpArr.length; ++i) {
                this.mSelectImages[this.tmpArr[i]].visibility = mw.SlateVisibility.SelfHitTestInvisible;
            }
            this.playSound("137566");
            index++;
            if (index >= amount) {
                TimeUtil.clearInterval(id);
                for (let i = 0; i < this.tmpArr.length; ++i) {
                    this.mSelectImages[this.tmpArr[i]].visibility = mw.SlateVisibility.Collapsed;
                }
                let i = Utils.getRandomInteger(0, 11);
                this.mSelectImages[i].visibility = mw.SlateVisibility.SelfHitTestInvisible;
                this.mGetImage.imageGuid = this.pets.getElement(this.ids[i]).PetIcon;
                this.mGetCanvas.visibility = mw.SlateVisibility.SelfHitTestInvisible;
                this.petModuleC.savePetList(this.ids[i]);
                SoundService.playSound("131832");
                this.banButton(true);
                //计算中奖
            }
        }, this.timer);
    }
    playSound(id) {
        if (this.soundId) {
            mw.SoundService.stopSound(this.soundId);
        }
        this.soundId = mw.SoundService.playSound(id, 1);
    }
}

var foreign85 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: PetRafflePanel
});

class PetData extends Subdata {
    constructor() {
        super(...arguments);
        /**宠物集合 */
        this.petList = [];
        /**上次登录时间 */
        this.lastPetDay = "";
        /**是否拥有免费次数 */
        this.isFreeCount = true;
        /**抽奖宠物集合 */
        this.petRaffleList = [];
    }
    initDefaultData() {
        this.petList = [];
        this.petRaffleList = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];
        this.lastPetDay = "";
        this.isFreeCount = true;
    }
    /**保存宠物 */
    savePetList(value) {
        this.petList.push(value);
        this.save(true);
    }
    saveIsFreeCount(value) {
        this.isFreeCount = value;
        this.save(true);
    }
    /**
     * 记录今天是那一天
     * @param whatDay 那一天
     */
    saveLastPetDayAndRandomIds(whatDay, value) {
        this.lastPetDay = whatDay;
        this.petRaffleList = value;
        this.save(true);
    }
}
__decorate([
    Decorator.persistence()
], PetData.prototype, "petList", void 0);
__decorate([
    Decorator.persistence()
], PetData.prototype, "lastPetDay", void 0);
__decorate([
    Decorator.persistence()
], PetData.prototype, "isFreeCount", void 0);
__decorate([
    Decorator.persistence()
], PetData.prototype, "petRaffleList", void 0);
class PetModuleC extends ModuleC {
    constructor() {
        super(...arguments);
        this.hudModuleC = null;
        this.petPanel = null;
        this.petRafflePanel = null;
        this.followASpeed = 0.01;
        // private followBSpeed: number = 0.02;
        this.pet = null;
        this.prePlayerLoc = null;
        this.petGuid = null;
        this.petTween = null;
    }
    onStart() {
        this.initData();
        this.registerAction();
    }
    initData() {
        this.hudModuleC = ModuleService.getModule(HUDModuleC);
        this.petPanel = mw.UIService.getUI(PetPanel);
        this.petRafflePanel = mw.UIService.getUI(PetRafflePanel);
    }
    registerAction() {
        this.hudModuleC.onOpenPetAction.add(() => {
            this.petPanel.show();
        });
        this.hudModuleC.onOpenRaffleAction.add(() => {
            this.petRafflePanel.show();
        });
        InputUtil.onKeyDown(mw.Keys.H, () => {
            this.savePetList(Utils.getRandomInteger(1, 18));
        });
    }
    onEnterScene(sceneType) {
        this.initPetData();
        TimeUtil.setInterval(() => {
            this.petMoveToPlayer();
        }, this.followASpeed);
        TimeUtil.delaySecond(3).then(() => {
            let curWhatDay = Utils.getDay();
            let ids = [];
            if (this.data.lastPetDay != curWhatDay) {
                ids = Utils.getRandomArr([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18], 12);
                this.saveLastPetDayAndRandomIds(curWhatDay, ids);
                this.saveIsFreeCount(true);
            }
            else {
                ids = this.data.petRaffleList;
            }
            this.petRafflePanel.updateIcons(ids);
        });
    }
    async initPetData() {
        this.pet = await GameObject.asyncFindGameObjectById("33B99E35");
        this.pet.worldTransform.scale = (mw.Vector.one.multiply(0.5));
        PlayerManagerExtesion.rpcPlayAnimation(this.pet, "46298", 0);
        this.pet.collisionWithOtherCharacterEnabled = false;
        this.pet.displayName = "";
        this.prePlayerLoc = this.pet.worldTransform.position;
    }
    changePet(petGuid) {
        this.petGuid = petGuid;
        this.localPlayer.character.addMovement(this.localPlayer.character.worldTransform.getForwardVector());
        this.pet.description.base.wholeBody = this.petGuid;
    }
    petMoveToPlayer() {
        if (this.petGuid != null) {
            Console.log("[hkz]");
            let playerLoc = this.localPlayer.character.worldTransform.position;
            if (Math.abs(playerLoc.x - this.prePlayerLoc.x) < 0.1
                && Math.abs(playerLoc.y - this.prePlayerLoc.y) < 0.1
                && Math.abs(playerLoc.z - this.prePlayerLoc.z) < 0.1)
                return;
            this.prePlayerLoc = playerLoc;
            let playerForward = this.localPlayer.character.worldTransform.getForwardVector();
            let offsetLocRight = this.localPlayer.character.worldTransform.getRightVector();
            let offsetLoc = new mw.Vector((playerForward.x * -50) + (offsetLocRight.x * 50), (playerForward.y * -50) + (offsetLocRight.y * 50), 50);
            let toLoc = new mw.Vector(playerLoc.x + offsetLoc.x, playerLoc.y + offsetLoc.y, playerLoc.z + offsetLoc.z);
            this.pet.worldTransform.rotation = (new mw.Rotation(playerForward, mw.Vector.zero));
            this.pet.worldTransform.position = (toLoc);
            Console.error("toLoc = " + toLoc);
        }
    }
    savePetList(pet) {
        if (this.data.petList.includes(pet))
            return;
        this.petPanel.getPetItem(pet);
        this.server.net_savePetList(pet);
    }
    saveLastPetDayAndRandomIds(petLastDay, value) {
        this.server.net_saveLastPetDayAndRandomIds(petLastDay, value);
    }
    saveIsFreeCount(value) {
        this.server.net_saveIsFreeCount(value);
    }
    getIsFreeCount() {
        return this.data.isFreeCount;
    }
    isOwn(id) {
        return this.data.petList.includes(id);
    }
}
class PetModuleS extends ModuleS {
    onStart() {
    }
    onPlayerEnterGame(player) {
    }
    onPlayerLeft(player) {
    }
    net_savePetList(pet) {
        this.currentData.savePetList(pet);
    }
    net_saveLastPetDayAndRandomIds(petLastDay, value) {
        this.currentData.saveLastPetDayAndRandomIds(petLastDay, value);
    }
    net_saveIsFreeCount(value) {
        this.currentData.saveIsFreeCount(value);
    }
}
__decorate([
    Decorator.noReply()
], PetModuleS.prototype, "net_savePetList", null);
__decorate([
    Decorator.noReply()
], PetModuleS.prototype, "net_saveLastPetDayAndRandomIds", null);
__decorate([
    Decorator.noReply()
], PetModuleS.prototype, "net_saveIsFreeCount", null);

var foreign83 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    PetData: PetData,
    PetModuleC: PetModuleC,
    PetModuleS: PetModuleS
});

/**
 * AUTHOR: 爱玩游戏的小胖子
 * TIME: 2023.07.01-11.13.24
 */
class PetPanel extends PetPanel_Generate$1 {
    constructor() {
        super(...arguments);
        this.petModuleC = null;
        this.petRafflePanel = null;
        this.pets = [];
        /**Content子集位置 */
        this.currentChildIndex = 1;
        this.isFirstOpen = true;
        this.petItems = [];
        this.selectId = -1;
    }
    /**
     * 构造UI文件成功后，在合适的时机最先初始化一次
     */
    onStart() {
        //设置能否每帧触发onUpdate
        this.canUpdate = false;
        this.layer = mw.UILayerMiddle;
        this.initData();
        this.bindButton();
    }
    /**初始化数据 */
    initData() {
        this.petModuleC = ModuleService.getModule(PetModuleC);
        this.petRafflePanel = mw.UIService.getUI(PetRafflePanel);
        this.pets = GameConfig.Pet.getAllElement();
    }
    /**绑定按钮 */
    bindButton() {
        this.mCloseButton.onClicked.add(() => {
            this.hide();
            if (this.selectId != -1) {
                this.petModuleC.changePet(this.pets[this.selectId - 1].PetGuid);
            }
        });
        this.mRaffleButton.onClicked.add(() => {
            this.hide();
            if (this.selectId != -1) {
                this.petModuleC.changePet(this.pets[this.selectId - 1].PetGuid);
            }
            this.petRafflePanel.show();
        });
    }
    onShow(...params) {
        this.showPetPanel();
    }
    /**布局位置Cloth */
    getCollectionChildPos() {
        let x = (((this.currentChildIndex - 1) % 4) * 250);
        let y = (Math.ceil(this.currentChildIndex / 4) - 1) * 250;
        ++this.currentChildIndex;
        return new mw.Vector2(x, y);
    }
    /**显示面板 */
    showPetPanel() {
        if (this.isFirstOpen) {
            this.updatePetPanel();
            this.isFirstOpen = false;
        }
    }
    updatePetPanel() {
        if (!this.pets)
            return;
        this.currentChildIndex = 1;
        this.mScrollBox.scrollOffset = 0;
        this.mContentCanvas.position = new mw.Vector2(0, 0);
        this.mContentCanvas.size = new mw.Vector2(1000, 0);
        for (let i = 0; i < this.pets.length; ++i) {
            let petItem = ObjectPoolServices.getPool(PetItem).spawn();
            petItem.initData(this.pets[i], this.petModuleC.isOwn(this.pets[i].id));
            this.mContentCanvas.addChild(petItem.petItem);
            petItem.petItem.size = new mw.Vector2(250, 250);
            petItem.petItem.position = this.getCollectionChildPos();
            this.petItems.push(petItem);
        }
        --this.currentChildIndex;
        let y = 0;
        if (this.currentChildIndex % 4 == 0) {
            y = (this.currentChildIndex / 4) * 250;
        }
        else {
            y = (Math.ceil(this.currentChildIndex / 4)) * 250;
        }
        this.mContentCanvas.size = new mw.Vector2(1000, y);
    }
    updateItemState(id) {
        if (this.selectId != -1) {
            this.petItems[this.selectId - 1].cancleSelectState();
        }
        this.selectId = id;
        this.petItems[this.selectId - 1].selectState();
    }
    getPetItem(id) {
        this.petItems[id - 1].updatePetItem();
    }
}
/**PetItem */
class PetItem {
    /**生成Item */
    constructor() {
        this.mIconButton = undefined;
        this.mSelectImage = undefined;
        this.mOwnTxt = undefined;
        this.id = null;
        this.isOwn = false;
        this.isSelect = false;
        this.petItem = mw.createUIByName("module/PetUI/PetItem");
        this.mIconButton = this.petItem.findChildByPath("RootCanvas/Canvas/mIconButton");
        this.mSelectImage = this.petItem.findChildByPath("RootCanvas/Canvas/mSelectImage");
        this.mOwnTxt = this.petItem.findChildByPath("RootCanvas/Canvas/mOwnTxt");
    }
    /**填充数据 */
    initData(pet, isOwn) {
        this.id = pet.id;
        this.isOwn = isOwn;
        this.mIconButton.normalImageGuid = pet.PetIcon;
        this.mIconButton.pressedImageGuid = pet.PetIcon;
        this.mIconButton.disableImageGuid = pet.PetIcon;
        this.mIconButton.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick");
            if (this.isOwn) {
                mw.UIService.getUI(PetPanel).updateItemState(this.id);
            }
            else {
                Notice.showDownNotice("未拥有、可在抽奖中获得哟~");
            }
        });
        this.mIconButton.touchMethod = mw.ButtonTouchMethod.PreciseTap;
        this.mSelectImage.visibility = mw.SlateVisibility.Collapsed;
        this.mOwnTxt.visibility = (isOwn == true) ? mw.SlateVisibility.Collapsed : mw.SlateVisibility.SelfHitTestInvisible;
    }
    /**选中状态 */
    selectState() {
        this.mSelectImage.visibility = mw.SlateVisibility.SelfHitTestInvisible;
        this.isSelect = true;
    }
    /**取消选中状态 */
    cancleSelectState() {
        this.mSelectImage.visibility = mw.SlateVisibility.Collapsed;
        this.isSelect = false;
    }
    updatePetItem() {
        this.isOwn = true;
        this.mOwnTxt.visibility = mw.SlateVisibility.Collapsed;
    }
}

var foreign84 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: PetPanel
});

class InputManagers {
    /**单例 */
    static get getInstance() {
        if (this._instance == null && !this._isDestroy) {
            this._instance = new InputManagers("Singleton-HKZ");
        }
        return this._instance;
    }
    constructor(name) {
        /**按压 */
        this.onPressTouch = new mw.Action1();
        /**抬起 */
        this.onReleaseTouch = new mw.Action1();
        this.name = name;
        this.initAndBind();
    }
    /**初始化和绑定 */
    initAndBind() {
        if (mw.SystemUtil.isClient()) {
            if (this.touch == null) {
                this.initTouch();
            }
            this.touch.onTouchBegin.add(this.beginMulFun);
            this.touch.onTouchEnd.add(this.beginMulFun);
            this.touch.onTouch.add(this.beginMulFun);
            this.keyDownActionMap = new Map();
        }
    }
    /**
     * 鼠标点击触发，返回点击的所有结果
     */
    get onTouch() {
        if (this._onTouch == null)
            this._onTouch = new Action1();
        return this._onTouch;
    }
    /**初始化触摸数据 */
    initTouch() {
        if (this.touch != null)
            return;
        this.touch = new mw.TouchInput();
        this.beginMulFun = this.touchControl.bind(this);
        Player.asyncGetLocalPlayer().then(player => {
            this.touch.onTouchBegin.add(this.touchHandler.bind(this));
        });
    }
    /**屏幕触摸控制 */
    touchControl(index, loc, touchType) {
        let touchArr = this.touch.getTouchVectorArray();
        if (touchType == mw.TouchInputType.TouchEnd) {
            this.onReleaseTouch.call(new TouchData(touchType, loc.x, loc.y));
        }
        else {
            for (let i = 0; i < touchArr.length; i++) {
                if (touchArr[i].z > 0) {
                    this.onPressTouch.call(new TouchData(touchType, touchArr[i].x, touchArr[i].y));
                }
            }
        }
    }
    /**获取点击屏幕位置的物体 */
    touchHandler(index, location, state) {
        if (this.onTouch.count == 0)
            return;
        location = this.touch.getTouchVectorArray()[0];
        let list = ScreenUtil.getGameObjectByScreenPosition(location.x, location.y, 50000, true, false);
        let arr = [];
        for (let i = 0; list != null && i < list.length; i++) {
            if (arr.includes(list[i]))
                continue;
            arr.push(list[i]);
        }
        if (list.length > 0) {
            this.onTouch.call(arr);
        }
    }
    /**
     * 按下键盘事件(增加了重复监听的判断，还可以移除监听方法)
     * @param key 按键类型
     * @returns 监听的Action方法
     */
    onKeyDown(key) {
        if (!this.keyDownActionMap.has(key)) {
            this.keyDownActionMap.set(key, new Action1());
            InputUtil.onKeyDown(key, () => {
                this.keyDownActionMap.get(key).call(key);
            });
        }
        let action = this.keyDownActionMap.get(key);
        if (action.count > 0) {
            Console.error("重复的键盘事件监听 key=" + key);
            return null;
        }
        return action;
    }
    /**Test */
    log(list) {
        Console.error("------------Mouse Click……");
        for (let i = 0; list != null && i < list.length; i++) {
            Console.error("List: " + list[i].gameObject.name);
        }
    }
    /**
     * 获取屏幕手指点击屏幕的坐标
     * @param index 第几个点击
     * @returns
     */
    getTouchPos(index) {
        let pos = this.touch.getTouchVectorArray()[index];
        return new mw.Vector2(pos.x, pos.y);
    }
    /**回收 */
    clearTouch() {
        this.onReleaseTouch.clear();
        this.onPressTouch.clear();
    }
    /**回收 */
    static destroy() {
        this._isDestroy = true;
        InputManagers._instance = null;
    }
}
InputManagers._instance = null;
class TouchData {
    constructor(event, x, y) {
        this.event = event;
        this.x = x;
        this.y = y;
    }
}

var foreign106 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    InputManagers: InputManagers,
    TouchData: TouchData
});

/**
 * AUTO GENERATE BY UI EDITOR.
 * WARNING: DO NOT MODIFY THIS FILE,MAY CAUSE CODE LOST.
 * AUTHOR: 爱玩游戏的小胖子
 * UI: UI/module/ShopUI/ShopPanel.ui
 * TIME: 2024.08.04-18.39.54
 */
let ShopPanel_Generate = class ShopPanel_Generate extends UIScript {
    get mLeftCanvas() {
        if (!this.mLeftCanvas_Internal && this.uiWidgetBase) {
            this.mLeftCanvas_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainCanvas/mLeftCanvas');
        }
        return this.mLeftCanvas_Internal;
    }
    get mShopBtn1() {
        if (!this.mShopBtn1_Internal && this.uiWidgetBase) {
            this.mShopBtn1_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainCanvas/mLeftCanvas/ShopCanvas/ShopCanvas_1/mShopBtn1');
        }
        return this.mShopBtn1_Internal;
    }
    get mShopBtn2() {
        if (!this.mShopBtn2_Internal && this.uiWidgetBase) {
            this.mShopBtn2_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainCanvas/mLeftCanvas/ShopCanvas/ShopCanvas_2/mShopBtn2');
        }
        return this.mShopBtn2_Internal;
    }
    get mShopBtn3() {
        if (!this.mShopBtn3_Internal && this.uiWidgetBase) {
            this.mShopBtn3_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainCanvas/mLeftCanvas/ShopCanvas/ShopCanvas_3/mShopBtn3');
        }
        return this.mShopBtn3_Internal;
    }
    get mShopBtn4() {
        if (!this.mShopBtn4_Internal && this.uiWidgetBase) {
            this.mShopBtn4_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainCanvas/mLeftCanvas/ShopCanvas/ShopCanvas_4/mShopBtn4');
        }
        return this.mShopBtn4_Internal;
    }
    get mClothesCanvas() {
        if (!this.mClothesCanvas_Internal && this.uiWidgetBase) {
            this.mClothesCanvas_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainCanvas/mLeftCanvas/mClothesCanvas');
        }
        return this.mClothesCanvas_Internal;
    }
    get mClothesBtn1() {
        if (!this.mClothesBtn1_Internal && this.uiWidgetBase) {
            this.mClothesBtn1_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainCanvas/mLeftCanvas/mClothesCanvas/HairCanvas/mClothesBtn1');
        }
        return this.mClothesBtn1_Internal;
    }
    get mClothesBtn2() {
        if (!this.mClothesBtn2_Internal && this.uiWidgetBase) {
            this.mClothesBtn2_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainCanvas/mLeftCanvas/mClothesCanvas/UpperClothCanvas/mClothesBtn2');
        }
        return this.mClothesBtn2_Internal;
    }
    get mClothesBtn3() {
        if (!this.mClothesBtn3_Internal && this.uiWidgetBase) {
            this.mClothesBtn3_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainCanvas/mLeftCanvas/mClothesCanvas/LowerClothCanvas/mClothesBtn3');
        }
        return this.mClothesBtn3_Internal;
    }
    get mClothesBtn4() {
        if (!this.mClothesBtn4_Internal && this.uiWidgetBase) {
            this.mClothesBtn4_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainCanvas/mLeftCanvas/mClothesCanvas/GlovesCanvas/mClothesBtn4');
        }
        return this.mClothesBtn4_Internal;
    }
    get mClothesBtn5() {
        if (!this.mClothesBtn5_Internal && this.uiWidgetBase) {
            this.mClothesBtn5_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainCanvas/mLeftCanvas/mClothesCanvas/ShoeCanvas/mClothesBtn5');
        }
        return this.mClothesBtn5_Internal;
    }
    get mClothesBtn6() {
        if (!this.mClothesBtn6_Internal && this.uiWidgetBase) {
            this.mClothesBtn6_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainCanvas/mLeftCanvas/mClothesCanvas/BodyCanvas/mClothesBtn6');
        }
        return this.mClothesBtn6_Internal;
    }
    get mScrollBox() {
        if (!this.mScrollBox_Internal && this.uiWidgetBase) {
            this.mScrollBox_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainCanvas/mLeftCanvas/mScrollBox');
        }
        return this.mScrollBox_Internal;
    }
    get mContentCanvas() {
        if (!this.mContentCanvas_Internal && this.uiWidgetBase) {
            this.mContentCanvas_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainCanvas/mLeftCanvas/mScrollBox/mContentCanvas');
        }
        return this.mContentCanvas_Internal;
    }
    get mRightCanvas() {
        if (!this.mRightCanvas_Internal && this.uiWidgetBase) {
            this.mRightCanvas_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainCanvas/mRightCanvas');
        }
        return this.mRightCanvas_Internal;
    }
    get mCloseBtn() {
        if (!this.mCloseBtn_Internal && this.uiWidgetBase) {
            this.mCloseBtn_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainCanvas/mRightCanvas/RightBottomCanvas/CloseCanvas/mCloseBtn');
        }
        return this.mCloseBtn_Internal;
    }
    get mSaveBtn() {
        if (!this.mSaveBtn_Internal && this.uiWidgetBase) {
            this.mSaveBtn_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainCanvas/mRightCanvas/RightBottomCanvas/SaveCanvas/mSaveBtn');
        }
        return this.mSaveBtn_Internal;
    }
    get mSaveText() {
        if (!this.mSaveText_Internal && this.uiWidgetBase) {
            this.mSaveText_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainCanvas/mRightCanvas/RightBottomCanvas/SaveCanvas/mSaveText');
        }
        return this.mSaveText_Internal;
    }
    get mIAAImg() {
        if (!this.mIAAImg_Internal && this.uiWidgetBase) {
            this.mIAAImg_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainCanvas/mRightCanvas/RightBottomCanvas/SaveCanvas/mIAAImg');
        }
        return this.mIAAImg_Internal;
    }
    get mRecycleCanvas() {
        if (!this.mRecycleCanvas_Internal && this.uiWidgetBase) {
            this.mRecycleCanvas_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mRecycleCanvas');
        }
        return this.mRecycleCanvas_Internal;
    }
    onAwake() {
        //设置能否每帧触发onUpdate
        this.canUpdate = false;
        this.layer = mw.UILayerBottom;
        this.initButtons();
    }
    initButtons() {
        //按钮添加点击
        //按钮添加点击
        this.mShopBtn1.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick", "mShopBtn1");
        });
        this.mShopBtn1.touchMethod = (mw.ButtonTouchMethod.PreciseTap);
        this.mShopBtn2.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick", "mShopBtn2");
        });
        this.mShopBtn2.touchMethod = (mw.ButtonTouchMethod.PreciseTap);
        this.mShopBtn3.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick", "mShopBtn3");
        });
        this.mShopBtn3.touchMethod = (mw.ButtonTouchMethod.PreciseTap);
        this.mShopBtn4.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick", "mShopBtn4");
        });
        this.mShopBtn4.touchMethod = (mw.ButtonTouchMethod.PreciseTap);
        this.mClothesBtn1.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick", "mClothesBtn1");
        });
        this.mClothesBtn1.touchMethod = (mw.ButtonTouchMethod.PreciseTap);
        this.mClothesBtn2.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick", "mClothesBtn2");
        });
        this.mClothesBtn2.touchMethod = (mw.ButtonTouchMethod.PreciseTap);
        this.mClothesBtn3.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick", "mClothesBtn3");
        });
        this.mClothesBtn3.touchMethod = (mw.ButtonTouchMethod.PreciseTap);
        this.mClothesBtn4.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick", "mClothesBtn4");
        });
        this.mClothesBtn4.touchMethod = (mw.ButtonTouchMethod.PreciseTap);
        this.mClothesBtn5.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick", "mClothesBtn5");
        });
        this.mClothesBtn5.touchMethod = (mw.ButtonTouchMethod.PreciseTap);
        this.mClothesBtn6.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick", "mClothesBtn6");
        });
        this.mClothesBtn6.touchMethod = (mw.ButtonTouchMethod.PreciseTap);
        this.mCloseBtn.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick", "mCloseBtn");
        });
        this.mCloseBtn.touchMethod = (mw.ButtonTouchMethod.PreciseTap);
        this.mSaveBtn.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick", "mSaveBtn");
        });
        this.mSaveBtn.touchMethod = (mw.ButtonTouchMethod.PreciseTap);
        //按钮多语言
        //文本多语言
        this.initLanguage(this.mSaveText);
        //文本多语言
        this.initLanguage(this.uiWidgetBase.findChildByPath("RootCanvas/MainCanvas/mLeftCanvas/ShopCanvas/ShopCanvas_1/TextBlock"));
        this.initLanguage(this.uiWidgetBase.findChildByPath("RootCanvas/MainCanvas/mLeftCanvas/ShopCanvas/ShopCanvas_2/TextBlock_1"));
        this.initLanguage(this.uiWidgetBase.findChildByPath("RootCanvas/MainCanvas/mLeftCanvas/ShopCanvas/ShopCanvas_3/TextBlock_2"));
        this.initLanguage(this.uiWidgetBase.findChildByPath("RootCanvas/MainCanvas/mLeftCanvas/ShopCanvas/ShopCanvas_4/TextBlock_3"));
        this.initLanguage(this.uiWidgetBase.findChildByPath("RootCanvas/MainCanvas/mLeftCanvas/mClothesCanvas/HairCanvas/TextBlock_4"));
        this.initLanguage(this.uiWidgetBase.findChildByPath("RootCanvas/MainCanvas/mLeftCanvas/mClothesCanvas/UpperClothCanvas/TextBlock_4"));
        this.initLanguage(this.uiWidgetBase.findChildByPath("RootCanvas/MainCanvas/mLeftCanvas/mClothesCanvas/LowerClothCanvas/TextBlock_4"));
        this.initLanguage(this.uiWidgetBase.findChildByPath("RootCanvas/MainCanvas/mLeftCanvas/mClothesCanvas/GlovesCanvas/TextBlock_4"));
        this.initLanguage(this.uiWidgetBase.findChildByPath("RootCanvas/MainCanvas/mLeftCanvas/mClothesCanvas/ShoeCanvas/TextBlock_4"));
        this.initLanguage(this.uiWidgetBase.findChildByPath("RootCanvas/MainCanvas/mLeftCanvas/mClothesCanvas/BodyCanvas/TextBlock_4"));
        this.initLanguage(this.uiWidgetBase.findChildByPath("RootCanvas/MainCanvas/mRightCanvas/RightBottomCanvas/CloseCanvas/CloseText"));
    }
    /*初始化多语言*/
    initLanguage(ui) {
        let call = mw.UIScript.getBehavior("lan");
        if (call && ui) {
            call(ui);
        }
    }
    onShow(...params) { }
    ;
    /*显示panel*/
    show(...param) {
        mw.UIService.showUI(this, this.layer, ...param);
    }
    /*隐藏panel*/
    hide() {
        mw.UIService.hideUI(this);
    }
};
ShopPanel_Generate = __decorate([
    UIBind('UI/module/ShopUI/ShopPanel.ui')
], ShopPanel_Generate);
var ShopPanel_Generate$1 = ShopPanel_Generate;

var foreign140 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: ShopPanel_Generate$1
});

/**
 * AUTHOR: 爱玩游戏的小胖子
 * TIME: 2023.06.03-22.22.02
 */
class ShopPanel extends ShopPanel_Generate$1 {
    constructor() {
        super(...arguments);
        /**皮肤商店模块 */
        this.shopModuleC = null;
        this.adsTips = null;
        //#region Common
        /**--------------------------[Common]-------------------------- */
        /**记录当前点击的页签按钮 */
        this.currentShopTypeBtn = this.mShopBtn1;
        /**记录当前点击的页签 */
        this.currentShopType = ShopType.Weapon;
        /**Content子集位置 */
        this.currentChildIndex = 1;
        /**--------------------------[Common]-------------------------- */
        //#endregion
        //#region 服装
        /**--------------------------[服装]-------------------------- */
        this.clothElements = null;
        /**储存当前页签下的ClothItem */
        this.clothItems = [];
        /**给NPC换装 */
        this.onChangeClothToNPCAnction = new Action2();
        this.hairs = [];
        this.upperCloths = [];
        this.lowerCloths = [];
        this.gloves = [];
        this.shoes = [];
        this.bodys = [];
        /**记录当前点击的衣服类型按钮 */
        this.currentClothTypeBtn = this.mClothesBtn6;
        /**记录当前点击的衣服类型 */
        this.currentClothType = ClothType.body;
        /**当前可见性 */
        this.currentVisibility = mw.SlateVisibility.Collapsed;
        /**记录当前选中的Clothitem */
        this.currentSelectClothIndexs = [-1, -1, -1, -1, -1, -1, -1];
        /**--------------------------[服装]-------------------------- */
        //#endregion
        //#region 武器
        /**--------------------------[武器]-------------------------- */
        this.weapons = [];
        /**储存当前页签下的WeaponItem */
        this.weaponItems = [];
        /**给NPC换武器 */
        this.onChangeWeaponToNPCAnction = new Action2();
        this.currentSelectWeaponIndex = 0;
        /**--------------------------[武器]-------------------------- */
        //#endregion
        //#region 翅膀
        /**--------------------------[翅膀]-------------------------- */
        this.wings = [];
        /**储存当前页签下的WingItem */
        this.wingItems = [];
        /**给NPC换翅膀 */
        this.onChangeWingToNPCAnction = new Action2();
        this.currentSelectWingIndex = 0;
        /**--------------------------[翅膀]-------------------------- */
        //#endregion
        //#region 拖尾
        /**--------------------------[拖尾]-------------------------- */
        this.tails = [];
        /**储存当前页签下的TailItem */
        this.tailItems = [];
        /**给NPC换拖尾 */
        this.onChangeTailToNPCAnction = new Action2();
        this.currentSelectTailIndex = 0;
        /**--------------------------[翅膀]-------------------------- */
        //#endregion
    }
    /**
     * 构造UI文件成功后，在合适的时机最先初始化一次
     */
    onStart() {
        //设置能否每帧触发onUpdate
        this.canUpdate = false;
        this.layer = mw.UILayerMiddle;
        this.initData();
        this.bindButtons();
        this.registerActions();
    }
    /**初始化数据 */
    initData() {
        this.shopModuleC = ModuleService.getModule(ShopModuleC);
        this.adsTips = mw.UIService.getUI(AdTips);
        this.initClothData();
        this.initWeaponData();
        this.initWingData();
        this.initTailData();
    }
    /**按钮绑定 */
    bindButtons() {
        this.mCloseBtn.onClicked.add(() => {
            this.hide();
            this.shopModuleC.onSwitchCameraAction.call(false);
        });
        this.mSaveBtn.onClicked.add(() => {
            switch (this.currentShopType) {
                case ShopType.Weapon:
                    this.saveWeaponShopButton();
                    break;
                case ShopType.Colthes:
                    this.saveClothShopButton();
                    break;
                case ShopType.Wing:
                    this.saveWingShopButton();
                    break;
                case ShopType.Tail:
                    this.saveTailShopButton();
                    break;
            }
        });
        this.bindShopTypeButtons();
        this.bindClothButtons();
    }
    /**保存服装商店按钮 */
    saveClothShopButton() {
        if (GlobalData.isOpenIAA) {
            if (this.shopModuleC.clothIsNeedAds()) {
                this.adsTips.showAdTips(1, AdType.ChangeCloth);
            }
            else {
                this.shopModuleC.onSaveClothAction.call();
                this.closeShop();
            }
        }
        else {
            this.shopModuleC.onSaveClothAction.call();
            this.closeShop();
        }
    }
    /**保存武器商店按钮 */
    saveWeaponShopButton() {
        this.shopModuleC.useWeapon();
    }
    /**保存翅膀商店按钮 */
    saveWingShopButton() {
        this.shopModuleC.useWing();
    }
    /**保存拖尾商店按钮 */
    saveTailShopButton() {
        this.shopModuleC.useTail();
    }
    /**关闭商店 */
    closeShop() {
        this.hide();
        this.shopModuleC.onSwitchCameraAction.call(false);
    }
    /**注册事件 */
    registerActions() {
    }
    /**绑定Shop类型按钮 */
    bindShopTypeButtons() {
        this.currentShopTypeBtn = this.mShopBtn1;
        this.currentShopType = ShopType.Weapon;
        this.currentShopTypeBtn.normalImageColor = GlobalData.selectShopTypeBtnColor;
        this.mSaveText.text = "保存武器";
        for (let i = 0; i < 4; ++i) {
            this['mShopBtn' + (i + 1)].onClicked.add(() => {
                this.updateSkinType(i + 1, this['mShopBtn' + (i + 1)]);
            });
        }
    }
    /**更新SHop类型（更新显示内容） */
    updateSkinType(shopType, shopTypeBtn) {
        if (this.currentShopType == shopType)
            return;
        this.currentShopType = shopType;
        if (this.currentShopTypeBtn) {
            this.currentShopTypeBtn.normalImageColor = GlobalData.nornalShopTypeBtnColor;
        }
        this.currentShopTypeBtn = shopTypeBtn;
        this.currentShopTypeBtn.normalImageColor = GlobalData.selectShopTypeBtnColor;
        this.showShopTypeContentPanel(this.currentShopType);
    }
    /**更新要显示的Shop内容 */
    showShopTypeContentPanel(shopType) {
        this.updateClothVisibility(shopType);
        this.updateWeaponVisibility(shopType);
        this.updateWingVisibility(shopType);
        this.updateTailVisibility(shopType);
        switch (shopType) {
            case ShopType.Weapon:
                this.showWeaponContentPanel();
                this.updateWeaponIsNeedAds();
                this.mSaveText.text = "保存武器";
                break;
            case ShopType.Colthes:
                this.showClothTypeContentPanel(this.currentClothType);
                this.updateClothIsNeedAds();
                this.mSaveText.text = "保存服装";
                break;
            case ShopType.Wing:
                this.showWingContentPanel();
                this.updateWingIsNeedAds();
                this.mSaveText.text = "保存翅膀";
                break;
            case ShopType.Tail:
                this.showTailContentPanel();
                this.updateTailIsNeedAds();
                this.mSaveText.text = "保存拖尾";
                break;
        }
    }
    onShow(...params) {
        Console.error("[打开皮肤商店]");
    }
    onHide() {
        Console.error("[关闭皮肤商店]");
    }
    /**布局位置Cloth */
    getClothChildPos() {
        let x = (((this.currentChildIndex - 1) % 3) * 350) + 75;
        let y = (Math.ceil(this.currentChildIndex / 3) - 1) * 300;
        ++this.currentChildIndex;
        return new mw.Vector2(x, y);
    }
    /**布局位置Weapon */
    getWeaponChildPos() {
        let x = (((this.currentChildIndex - 1) % 3) * 350) + 75;
        let y = (Math.ceil(this.currentChildIndex / 3) - 1) * 300;
        ++this.currentChildIndex;
        return new mw.Vector2(x, y);
    }
    /**布局位置Wing */
    getWingChildPos() {
        let x = (((this.currentChildIndex - 1) % 3) * 350) + 75;
        let y = (Math.ceil(this.currentChildIndex / 3) - 1) * 300;
        ++this.currentChildIndex;
        return new mw.Vector2(x, y);
    }
    /**布局位置Tail */
    getTailChildPos() {
        let x = (((this.currentChildIndex - 1) % 3) * 350) + 75;
        let y = (Math.ceil(this.currentChildIndex / 3) - 1) * 300;
        ++this.currentChildIndex;
        return new mw.Vector2(x, y);
    }
    /**初始化Cloth数据 */
    initClothData() {
        this.clothElements = GameConfig.Clothes.getAllElement();
        for (let i = 0; i < this.clothElements.length; ++i) {
            let clothElement = this.clothElements[i];
            switch (clothElement.ClothType) {
                case ClothType.hair:
                    this.hairs.push(clothElement);
                    break;
                case ClothType.upperCloth:
                    this.upperCloths.push(clothElement);
                    break;
                case ClothType.lowerCloth:
                    this.lowerCloths.push(clothElement);
                    break;
                case ClothType.gloves:
                    this.gloves.push(clothElement);
                    break;
                case ClothType.shoe:
                    this.shoes.push(clothElement);
                    break;
                case ClothType.body:
                    this.bodys.push(clothElement);
                    break;
            }
        }
        this.mIAAImg.visibility = mw.SlateVisibility.Collapsed;
    }
    /**服装按钮绑定 */
    bindClothButtons() {
        this.mClothesCanvas.visibility = mw.SlateVisibility.Collapsed;
        this.currentClothTypeBtn = this.mClothesBtn6;
        this.currentClothType = ClothType.body;
        this.currentClothTypeBtn.normalImageColor = GlobalData.selectShopTypeBtnColor;
        for (let i = 0; i < 6; ++i) {
            this['mClothesBtn' + (i + 1)].onClicked.add(() => {
                this.updateClothType(i + 1, this['mClothesBtn' + (i + 1)]);
            });
        }
    }
    /**更新服装类型（更新显示内容） */
    updateClothType(clothType, clothTypeBtn) {
        if (this.currentClothType == clothType)
            return;
        this.currentClothType = clothType;
        if (this.currentClothTypeBtn) {
            this.currentClothTypeBtn.normalImageColor = GlobalData.nornalShopTypeBtnColor;
        }
        this.currentClothTypeBtn = clothTypeBtn;
        this.currentClothTypeBtn.normalImageColor = GlobalData.selectShopTypeBtnColor;
        this.showClothTypeContentPanel(this.currentClothType);
    }
    /**更新Cloth的可见性 */
    updateClothVisibility(shopType) {
        let visibility = (shopType == ShopType.Colthes) ? mw.SlateVisibility.SelfHitTestInvisible : mw.SlateVisibility.Collapsed;
        if (this.currentVisibility != visibility) {
            this.mClothesCanvas.visibility = visibility;
            this.currentVisibility = visibility;
        }
        if (shopType != ShopType.Colthes) {
            this.recycleCurrentClothShopItems();
        }
    }
    /**显示的服装内容 */
    showClothTypeContentPanel(clothType) {
        this.currentChildIndex = 1;
        this.mScrollBox.size = new mw.Vector(1100, 850);
        this.mScrollBox.position = new mw.Vector(0, 200);
        this.mScrollBox.scrollOffset = 0;
        this.mContentCanvas.position = new mw.Vector2(0, 0);
        this.mContentCanvas.size = new mw.Vector2(1100, 0);
        if (this.clothItems.length > 0) {
            this.recycleCurrentClothShopItems();
        }
        let tmpCloths = [];
        switch (clothType) {
            case ClothType.hair:
                tmpCloths = this.hairs;
                break;
            case ClothType.upperCloth:
                tmpCloths = this.upperCloths;
                break;
            case ClothType.lowerCloth:
                tmpCloths = this.lowerCloths;
                break;
            case ClothType.gloves:
                tmpCloths = this.gloves;
                break;
            case ClothType.shoe:
                tmpCloths = this.shoes;
                break;
            case ClothType.body:
                tmpCloths = this.bodys;
                break;
        }
        for (let i = 0; i < tmpCloths.length; ++i) {
            let clothItem = ObjectPoolServices.getPool(ClothItem).spawn();
            clothItem.initData(i, tmpCloths[i]);
            this.mContentCanvas.addChild(clothItem.clothItem);
            clothItem.clothItem.size = new mw.Vector2(260, 260);
            clothItem.clothItem.position = this.getClothChildPos();
            this.clothItems.push(clothItem);
        }
        if (this.currentSelectClothIndexs[this.currentClothType] != -1) {
            this.clothItems[this.currentSelectClothIndexs[this.currentClothType]].selectState();
        }
        --this.currentChildIndex;
        let y = 0;
        if (this.currentChildIndex % 3 == 0) {
            y = (this.currentChildIndex / 3) * 300;
        }
        else {
            y = (Math.ceil(this.currentChildIndex / 3)) * 300;
        }
        this.mContentCanvas.size = new mw.Vector2(1100, y);
    }
    /**更新当前页的Clothitem状态 */
    updateClothItemState(id) {
        if (this.currentSelectClothIndexs[this.currentClothType] != -1) {
            this.clothItems[this.currentSelectClothIndexs[this.currentClothType]].cancleSelectState();
        }
        this.currentSelectClothIndexs[this.currentClothType] = id;
        this.clothItems[this.currentSelectClothIndexs[this.currentClothType]].selectState();
        if (this.currentClothType == ClothType.body) {
            for (let i = 1; i <= 5; ++i) {
                this.currentSelectClothIndexs[i] = -1;
            }
        }
        if (this.currentClothType != ClothType.body && this.currentSelectClothIndexs[6] != -1) {
            let isCancleBody = true;
            for (let i = 1; i <= 5; ++i) {
                if (this.currentSelectClothIndexs[i] != -1) {
                    isCancleBody = false;
                    break;
                }
            }
            if (isCancleBody) {
                Console.error("[]");
                this.currentSelectClothIndexs[6] = -1;
            }
        }
        this.updateClothIsNeedAds();
    }
    /**更新Cloth是否需要Ads */
    updateClothIsNeedAds() {
        if (this.shopModuleC.clothIsNeedAds()) {
            this.mIAAImg.visibility = mw.SlateVisibility.SelfHitTestInvisible;
        }
        else {
            this.mIAAImg.visibility = mw.SlateVisibility.Collapsed;
        }
    }
    /**回收当前页签下的内容ClothItem */
    recycleCurrentClothShopItems() {
        if (this.clothItems.length == 0)
            return;
        this.clothItems.forEach((clothItem) => {
            clothItem.recycleItem();
            this.mRecycleCanvas.addChild(clothItem.clothItem);
        });
        this.clothItems.length = 0;
    }
    /**初始化Weapon数据 */
    initWeaponData() {
        this.weapons = GameConfig.ColdWeapon.getAllElement();
        this.showWeaponContentPanel();
    }
    /**显示的服装内容 */
    showWeaponContentPanel() {
        this.currentChildIndex = 1;
        this.mScrollBox.size = new mw.Vector(1100, 850);
        this.mScrollBox.position = new mw.Vector(0, 200);
        this.mScrollBox.scrollOffset = 0;
        this.mContentCanvas.position = new mw.Vector2(0, 0);
        this.mContentCanvas.size = new mw.Vector2(1100, 0);
        if (this.weaponItems.length > 0) {
            this.recycleCurrentWeaponShopItems();
        }
        for (let i = 0; i < this.weapons.length; ++i) {
            let weaponItem = ObjectPoolServices.getPool(WeaponItem).spawn();
            weaponItem.initData(i, this.weapons[i]);
            this.mContentCanvas.addChild(weaponItem.weaponItem);
            weaponItem.weaponItem.size = new mw.Vector2(260, 260);
            weaponItem.weaponItem.position = this.getWeaponChildPos();
            this.weaponItems.push(weaponItem);
        }
        if (this.currentSelectWeaponIndex != -1) {
            this.weaponItems[this.currentSelectWeaponIndex].selectState();
        }
        --this.currentChildIndex;
        let y = 0;
        if (this.currentChildIndex % 3 == 0) {
            y = (this.currentChildIndex / 3) * 300;
        }
        else {
            y = (Math.ceil(this.currentChildIndex / 3)) * 300;
        }
        this.mContentCanvas.size = new mw.Vector2(1100, y);
    }
    /**更新当前页的WeaponItem状态 */
    updateWeaponItemState(id) {
        if (this.currentSelectWeaponIndex != -1) {
            this.weaponItems[this.currentSelectWeaponIndex].cancleSelectState();
        }
        this.currentSelectWeaponIndex = id;
        this.weaponItems[this.currentSelectWeaponIndex].selectState();
        this.updateWeaponIsNeedAds();
    }
    /**更新武器是否需要Ads */
    updateWeaponIsNeedAds() {
        if (this.shopModuleC.weaponIsNeedAds()) {
            this.mIAAImg.visibility = mw.SlateVisibility.SelfHitTestInvisible;
        }
        else {
            this.mIAAImg.visibility = mw.SlateVisibility.Collapsed;
        }
    }
    /**更新Weapon的可见性 */
    updateWeaponVisibility(shopType) {
        if (shopType != ShopType.Weapon) {
            this.recycleCurrentWeaponShopItems();
        }
    }
    /**回收当前页签下的内容WeaponItem */
    recycleCurrentWeaponShopItems() {
        if (this.weaponItems.length == 0)
            return;
        this.weaponItems.forEach((weaponItem) => {
            weaponItem.recycleItem();
            this.mRecycleCanvas.addChild(weaponItem.weaponItem);
        });
        this.weaponItems.length = 0;
    }
    /**初始化Wing数据 */
    initWingData() {
        this.wings = GameConfig.Wing.getAllElement();
    }
    /**显示的翅膀内容 */
    showWingContentPanel() {
        this.currentChildIndex = 1;
        this.mScrollBox.size = new mw.Vector(1100, 850);
        this.mScrollBox.position = new mw.Vector(0, 200);
        this.mScrollBox.scrollOffset = 0;
        this.mContentCanvas.position = new mw.Vector2(0, 0);
        this.mContentCanvas.size = new mw.Vector2(1100, 0);
        if (this.wingItems.length > 0) {
            this.recycleCurrentWingShopItems();
        }
        for (let i = 0; i < this.wings.length; ++i) {
            let wingItem = ObjectPoolServices.getPool(WingItem).spawn();
            wingItem.initData(i, this.wings[i]);
            this.mContentCanvas.addChild(wingItem.wingItem);
            wingItem.wingItem.size = new mw.Vector2(260, 260);
            wingItem.wingItem.position = this.getWingChildPos();
            this.wingItems.push(wingItem);
        }
        if (this.currentSelectWingIndex != -1) {
            this.wingItems[this.currentSelectWingIndex].selectState();
        }
        --this.currentChildIndex;
        let y = 0;
        if (this.currentChildIndex % 3 == 0) {
            y = (this.currentChildIndex / 3) * 300;
        }
        else {
            y = (Math.ceil(this.currentChildIndex / 3)) * 300;
        }
        this.mContentCanvas.size = new mw.Vector2(1100, y);
    }
    /**更新当前页的WingItem状态 */
    updateWingItemState(id) {
        if (this.currentSelectWingIndex != -1) {
            this.wingItems[this.currentSelectWingIndex].cancleSelectState();
        }
        this.currentSelectWingIndex = id;
        this.wingItems[this.currentSelectWingIndex].selectState();
        this.updateWingIsNeedAds();
    }
    /**更新翅膀是否需要Ads */
    updateWingIsNeedAds() {
        if (this.shopModuleC.wingIsNeedAds()) {
            this.mIAAImg.visibility = mw.SlateVisibility.SelfHitTestInvisible;
        }
        else {
            this.mIAAImg.visibility = mw.SlateVisibility.Collapsed;
        }
    }
    /**更新Wing的可见性 */
    updateWingVisibility(shopType) {
        if (shopType != ShopType.Wing) {
            this.recycleCurrentWingShopItems();
        }
    }
    /**回收当前页签下的内容WingItem */
    recycleCurrentWingShopItems() {
        if (this.wingItems.length == 0)
            return;
        this.wingItems.forEach((wingItem) => {
            wingItem.recycleItem();
            this.mRecycleCanvas.addChild(wingItem.wingItem);
        });
        this.wingItems.length = 0;
    }
    /**初始化Tail数据 */
    initTailData() {
        this.tails = GameConfig.Tail.getAllElement();
    }
    /**显示的翅膀内容 */
    showTailContentPanel() {
        this.currentChildIndex = 1;
        this.mScrollBox.size = new mw.Vector(1100, 850);
        this.mScrollBox.position = new mw.Vector(0, 200);
        this.mScrollBox.scrollOffset = 0;
        this.mContentCanvas.position = new mw.Vector2(0, 0);
        this.mContentCanvas.size = new mw.Vector2(1100, 0);
        if (this.tailItems.length > 0) {
            this.recycleCurrentTailShopItems();
        }
        for (let i = 0; i < this.tails.length; ++i) {
            let tailItem = ObjectPoolServices.getPool(TailItem).spawn();
            tailItem.initData(i, this.tails[i]);
            this.mContentCanvas.addChild(tailItem.tailItem);
            tailItem.tailItem.size = new mw.Vector2(260, 260);
            tailItem.tailItem.position = this.getTailChildPos();
            this.tailItems.push(tailItem);
        }
        if (this.currentSelectTailIndex != -1) {
            this.tailItems[this.currentSelectTailIndex].selectState();
        }
        --this.currentChildIndex;
        let y = 0;
        if (this.currentChildIndex % 3 == 0) {
            y = (this.currentChildIndex / 3) * 300;
        }
        else {
            y = (Math.ceil(this.currentChildIndex / 3)) * 300;
        }
        this.mContentCanvas.size = new mw.Vector2(1100, y);
    }
    /**更新当前页的TailItem状态 */
    updateTailItemState(id) {
        if (this.currentSelectTailIndex != -1) {
            this.tailItems[this.currentSelectTailIndex].cancleSelectState();
        }
        this.currentSelectTailIndex = id;
        this.tailItems[this.currentSelectTailIndex].selectState();
        this.updateTailIsNeedAds();
    }
    /**更新拖尾是否需要Ads */
    updateTailIsNeedAds() {
        if (this.shopModuleC.tailIsNeedAds()) {
            this.mIAAImg.visibility = mw.SlateVisibility.SelfHitTestInvisible;
        }
        else {
            this.mIAAImg.visibility = mw.SlateVisibility.Collapsed;
        }
    }
    /**更新Tail的可见性 */
    updateTailVisibility(shopType) {
        if (shopType != ShopType.Tail) {
            this.recycleCurrentTailShopItems();
        }
    }
    /**回收当前页签下的内容TailItem */
    recycleCurrentTailShopItems() {
        if (this.tailItems.length == 0)
            return;
        this.tailItems.forEach((tailItem) => {
            tailItem.recycleItem();
            this.mRecycleCanvas.addChild(tailItem.tailItem);
        });
        this.tailItems.length = 0;
    }
}
/**服装 */
class ClothItem {
    /**生成Item */
    constructor() {
        this.mSelectImg = undefined;
        this.mIAAImg = undefined;
        this.mIconBtn = undefined;
        this.mIconImage = undefined;
        this.mCanvas = undefined;
        this.id = null;
        this.cloth = null;
        this.isSelect = false;
        this.clothItem = mw.createUIByName("module/ShopUI/ClothItem");
        this.mCanvas = this.clothItem.findChildByPath("RootCanvas/mCanvas");
        this.mIconBtn = this.clothItem.findChildByPath("RootCanvas/mCanvas/mIconBtn");
        this.mIconImage = this.clothItem.findChildByPath("RootCanvas/mCanvas/mIconImage");
        this.mIAAImg = this.clothItem.findChildByPath("RootCanvas/mCanvas/mIAAImg");
        this.mSelectImg = this.clothItem.findChildByPath("RootCanvas/mCanvas/mSelectImg");
    }
    /**填充数据 */
    initData(id, cloth) {
        this.id = id;
        this.cloth = cloth;
        let vis = (cloth.IsIAA == 0) ? mw.SlateVisibility.Collapsed : mw.SlateVisibility.SelfHitTestInvisible;
        this.mIAAImg.visibility = vis;
        Utils.setImageByAssetIconData(this.mIconImage, cloth.ClothGuid);
        this.mIconBtn.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick");
            if (!GlobalData.delayClick) {
                Notice.showDownNotice("小手别点太快");
                return;
            }
            GlobalData.delayClick = false;
            TimeUtil.delaySecond(1).then(() => {
                GlobalData.delayClick = true;
            });
            mw.UIService.getUI(ShopPanel).onChangeClothToNPCAnction.call(this.id, this.cloth);
        });
        this.mIconBtn.touchMethod = mw.ButtonTouchMethod.PreciseTap;
    }
    /**选中状态 */
    selectState() {
        this.mSelectImg.imageColor = GlobalData.selectClothColor;
        this.isSelect = true;
    }
    /**取消选中状态 */
    cancleSelectState() {
        this.mSelectImg.imageColor = GlobalData.cancleSelectClothColor;
        this.isSelect = false;
    }
    /**回收Item */
    recycleItem() {
        this.mIconBtn.onClicked.clear();
        if (this.isSelect) {
            this.cancleSelectState();
        }
        ObjectPoolServices.getPool(ClothItem).return(this);
    }
}
/**服装 */
class WeaponItem {
    /**生成Item */
    constructor() {
        this.mCanvas = undefined;
        this.mSelectImg = undefined;
        this.mIAAImg = undefined;
        this.mIconBtn = undefined;
        this.mIconImage = undefined;
        this.mNameText = undefined;
        this.id = null;
        this.weapon = null;
        this.isSelect = false;
        this.weaponItem = mw.createUIByName("module/ShopUI/WeaponItem");
        this.mCanvas = this.weaponItem.findChildByPath("RootCanvas/mCanvas");
        this.mIconBtn = this.weaponItem.findChildByPath("RootCanvas/mCanvas/mIconBtn");
        this.mIconImage = this.weaponItem.findChildByPath("RootCanvas/mCanvas/mIconImage");
        this.mIAAImg = this.weaponItem.findChildByPath("RootCanvas/mCanvas/mIAAImg");
        this.mSelectImg = this.weaponItem.findChildByPath("RootCanvas/mCanvas/mSelectImg");
        this.mNameText = this.weaponItem.findChildByPath("RootCanvas/mCanvas/mNameText");
    }
    /**填充数据 */
    initData(id, weapon) {
        this.id = id;
        this.weapon = weapon;
        let vis = (weapon.IsIAA == 0) ? mw.SlateVisibility.Collapsed : mw.SlateVisibility.SelfHitTestInvisible;
        this.mIAAImg.visibility = vis;
        Utils.setImageByAssetIconData(this.mIconImage, weapon.rightWeaponGuid);
        this.mIconBtn.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick");
            if (!GlobalData.delayClick) {
                Notice.showDownNotice("小手别点太快");
                return;
            }
            GlobalData.delayClick = false;
            TimeUtil.delaySecond(1).then(() => {
                GlobalData.delayClick = true;
            });
            mw.UIService.getUI(ShopPanel).onChangeWeaponToNPCAnction.call(this.id, this.weapon);
        });
        this.mNameText.text = weapon.WeaponName;
        this.mIconBtn.touchMethod = mw.ButtonTouchMethod.PreciseTap;
    }
    /**选中状态 */
    selectState() {
        this.mSelectImg.imageColor = GlobalData.selectWeaponColor;
        this.isSelect = true;
    }
    /**取消选中状态 */
    cancleSelectState() {
        this.mSelectImg.imageColor = GlobalData.cancleSelectWeaponColor;
        this.isSelect = false;
    }
    /**回收Item */
    recycleItem() {
        this.mIconBtn.onClicked.clear();
        if (this.isSelect) {
            this.cancleSelectState();
        }
        ObjectPoolServices.getPool(WeaponItem).return(this);
    }
}
/**翅膀 */
class WingItem {
    /**生成Item */
    constructor() {
        this.mSelectImg = undefined;
        this.mIAAImg = undefined;
        this.mIconBtn = undefined;
        this.mCanvas = undefined;
        this.id = null;
        this.wing = null;
        this.isSelect = false;
        this.wingItem = mw.createUIByName("module/ShopUI/WingItem");
        this.mCanvas = this.wingItem.findChildByPath("RootCanvas/mCanvas");
        this.mIconBtn = this.wingItem.findChildByPath("RootCanvas/mCanvas/mIconBtn");
        this.mIAAImg = this.wingItem.findChildByPath("RootCanvas/mCanvas/mIAAImg");
        this.mSelectImg = this.wingItem.findChildByPath("RootCanvas/mCanvas/mSelectImg");
    }
    /**填充数据 */
    initData(id, wing) {
        this.id = id;
        this.wing = wing;
        let vis = (wing.IsIAA == 0) ? mw.SlateVisibility.Collapsed : mw.SlateVisibility.SelfHitTestInvisible;
        this.mIAAImg.visibility = vis;
        let wingIcon = wing.WingIcon ? wing.WingIcon : GlobalData.wingIconGuid;
        this.mIconBtn.normalImageGuid = wingIcon;
        this.mIconBtn.pressedImageGuid = wingIcon;
        this.mIconBtn.disableImageGuid = wingIcon;
        this.mIconBtn.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick");
            if (!GlobalData.delayClick) {
                Notice.showDownNotice("小手别点太快");
                return;
            }
            GlobalData.delayClick = false;
            TimeUtil.delaySecond(1).then(() => {
                GlobalData.delayClick = true;
            });
            mw.UIService.getUI(ShopPanel).onChangeWingToNPCAnction.call(this.id, this.wing);
        });
        this.mIconBtn.touchMethod = mw.ButtonTouchMethod.PreciseTap;
        this.mSelectImg.visibility = mw.SlateVisibility.Collapsed;
    }
    /**选中状态 */
    selectState() {
        this.mSelectImg.visibility = mw.SlateVisibility.SelfHitTestInvisible;
        this.isSelect = true;
    }
    /**取消选中状态 */
    cancleSelectState() {
        this.mSelectImg.visibility = mw.SlateVisibility.Collapsed;
        this.isSelect = false;
    }
    /**回收Item */
    recycleItem() {
        this.mIconBtn.onClicked.clear();
        if (this.isSelect) {
            this.cancleSelectState();
        }
        ObjectPoolServices.getPool(WingItem).return(this);
    }
}
/**拖尾 */
class TailItem {
    /**生成Item */
    constructor() {
        this.mSelectImg = undefined;
        this.mIAAImg = undefined;
        this.mIconBtn = undefined;
        this.mCanvas = undefined;
        this.id = null;
        this.tail = null;
        this.isSelect = false;
        this.tailItem = mw.createUIByName("module/ShopUI/TailItem");
        this.mCanvas = this.tailItem.findChildByPath("RootCanvas/mCanvas");
        this.mIconBtn = this.tailItem.findChildByPath("RootCanvas/mCanvas/mIconBtn");
        this.mIAAImg = this.tailItem.findChildByPath("RootCanvas/mCanvas/mIAAImg");
        this.mSelectImg = this.tailItem.findChildByPath("RootCanvas/mCanvas/mSelectImg");
    }
    /**填充数据 */
    initData(id, tail) {
        this.id = id;
        this.tail = tail;
        let vis = (tail.IsIAA == 0) ? mw.SlateVisibility.Collapsed : mw.SlateVisibility.SelfHitTestInvisible;
        this.mIAAImg.visibility = vis;
        let tailIcon = tail.TailIcon;
        this.mIconBtn.normalImageGuid = tailIcon;
        this.mIconBtn.pressedImageGuid = tailIcon;
        this.mIconBtn.disableImageGuid = tailIcon;
        this.mIconBtn.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick");
            if (!GlobalData.delayClick) {
                Notice.showDownNotice("小手别点太快");
                return;
            }
            GlobalData.delayClick = false;
            TimeUtil.delaySecond(1).then(() => {
                GlobalData.delayClick = true;
            });
            mw.UIService.getUI(ShopPanel).onChangeTailToNPCAnction.call(this.id, this.tail);
        });
        this.mIconBtn.touchMethod = mw.ButtonTouchMethod.PreciseTap;
        this.mSelectImg.visibility = mw.SlateVisibility.Collapsed;
    }
    /**选中状态 */
    selectState() {
        this.mSelectImg.visibility = mw.SlateVisibility.SelfHitTestInvisible;
        this.isSelect = true;
    }
    /**取消选中状态 */
    cancleSelectState() {
        this.mSelectImg.visibility = mw.SlateVisibility.Collapsed;
        this.isSelect = false;
    }
    /**回收Item */
    recycleItem() {
        this.mIconBtn.onClicked.clear();
        if (this.isSelect) {
            this.cancleSelectState();
        }
        ObjectPoolServices.getPool(TailItem).return(this);
    }
}
var ShopType;
(function (ShopType) {
    /**武器 */
    ShopType[ShopType["Weapon"] = 1] = "Weapon";
    /**f服装 */
    ShopType[ShopType["Colthes"] = 2] = "Colthes";
    /**翅膀 */
    ShopType[ShopType["Wing"] = 3] = "Wing";
    /**拖尾 */
    ShopType[ShopType["Tail"] = 4] = "Tail";
})(ShopType || (ShopType = {}));

var foreign94 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    get ShopType () { return ShopType; },
    default: ShopPanel
});

class ShopModuleC extends ModuleC {
    constructor() {
        super(...arguments);
        /**HUD模块 */
        this.hudModuleC = null;
        this.achievementModuleC = null;
        /**商店面板 */
        this.shopPanel = null;
        this.adsTips = null;
        //#region 商店NPC
        /**--------------------------------[商店NPC]-------------------------------- */
        /**玩家和皮肤商店之间的相机转化 */
        this.onSwitchCameraAction = new Action1();
        /**记录当前滑动屏幕的X轴正负值 */
        this.x = 0;
        /**旋转速度 */
        this.slideSpeedX = 1;
        /**当前Npc的旋转Z轴值 */
        this.currentNpcRotZ = 0;
        /**玩家身上的相机 */
        this.camera = null;
        /**相机固定的锚点 */
        this.cameraAnchor = null;
        this.shopCamera = null;
        /**皮肤商店要展示的NPC */
        this.shopNpc = null;
        this.tailGo = null;
        this.onSwitchCamera = new Action1();
        // private npcAnimation: mw.Animation = null;
        this.clothGuids = ["", "", "", "", "", "", ""];
        this.clothIAA = [0, 0, 0, 0, 0, 0, 0];
        this.currentClothGuids = ["", "", "", "", "", "", ""];
        /**保存服装 */
        this.onSaveClothAction = new Action();
        this.limitedTouchXY = new mw.Vector2(800, 880);
        this.weapon = null;
        this.weaponIsIAA = 0;
        this.npcWeaponModel = null;
        this.wing = null;
        this.wingIsIAA = 0;
        this.npcWingEffectId = null;
        this.tail = null;
        this.tailIsIAA = 0;
        this.npcTailEffectId = null;
        this.onPlayerLevelAction = new Action1();
    }
    /** 当脚本被实例后，会在第一帧更新前调用此函数 */
    onStart() {
        this.initData();
        this.registerActions();
    }
    onEnterScene(sceneType) {
        this.initShopNPCData();
    }
    /**初始化数据 */
    initData() {
        this.hudModuleC = ModuleService.getModule(HUDModuleC);
        this.achievementModuleC = ModuleService.getModule(AchievementModuleC);
        this.shopPanel = mw.UIService.getUI(ShopPanel);
        this.adsTips = mw.UIService.getUI(AdTips);
        let rootCanvaSize = mw.getViewportSize();
        this.limitedTouchXY = new mw.Vector2(800 * rootCanvaSize.x / 1920, 880 * rootCanvaSize.y / 1080);
        Console.error(this.limitedTouchXY);
    }
    /**注册事件 */
    registerActions() {
        this.hudModuleC.onSkinShopAction.add(() => {
            this.shopPanel.show();
            this.onSwitchCameraAction.call(true);
        });
        this.onSwitchCameraAction.add((isOpenSkinShop) => {
            isOpenSkinShop ? this.openSkinShop() : this.closeSkinShop();
        });
        this.shopPanel.onChangeClothToNPCAnction.add(this.updateClothItemData.bind(this));
        this.shopPanel.onChangeWeaponToNPCAnction.add(this.updateWeaponItemData.bind(this));
        this.shopPanel.onChangeWingToNPCAnction.add(this.updateWingItemData.bind(this));
        this.shopPanel.onChangeTailToNPCAnction.add(this.updateTailItemData.bind(this));
        this.onSaveClothAction.add(this.changeClothesToPlayer.bind(this));
        // InputUtil.onKeyDown(mw.Keys.G, () => {
        //     let rootCanvaSize = mw.getViewportSize();
        //     this.limitedTouchXY = new mw.Vector2(800 * rootCanvaSize.x / 1920, 880 * rootCanvaSize.y / 1080);
        //     Console.error(this.limitedTouchXY);
        //     mw.UIService.getUI(HUDPanel).hide();
        // });
    }
    /**拿到相机 */
    get getCamera() {
        if (this.camera == null) {
            this.camera = Camera.currentCamera;
        }
        return this.camera;
    }
    /**相机固定的锚点 */
    get getCameraAnchor() {
        if (this.cameraAnchor == null) {
            this.cameraAnchor = GameObject.findGameObjectById("13B27D87");
        }
        return this.cameraAnchor;
    }
    /**打开商店 */
    openSkinShop() {
        // this.getCamera.parent = (this.getCameraAnchor);
        // this.getCamera.rotationMode = mw.CameraRotationMode.RotationFixed;
        // this.getCamera.positionMode = mw.CameraPositionMode.PositionFixed;
        // let transform = new mw.Transform();
        // transform.position = new mw.Vector(-940, -554.5, 168);
        // transform.rotation = new mw.Rotation(-9, -4.5, 29);
        // this.getCamera.localTransform = transform;
        // SoundService.playSound(GlobalData.openShopSoundId);
        // Camera.switch(this.shopCamera, 5, mw.CameraSwitchBlendFunction.Linear);
        this.onSwitchCamera.call(1);
        InputManagers.getInstance.onPressTouch.add((data) => {
            this.onPressTouch(data);
        });
        InputManagers.getInstance.onReleaseTouch.add((data) => {
            this.onReleaseTouch(data);
        });
    }
    /**关闭商店 */
    closeSkinShop() {
        // this.getCamera.parent = (this.currentPlayer.character);
        // this.getCamera.rotationMode = mw.CameraRotationMode.RotationControl;
        // this.getCamera.positionMode = mw.CameraPositionMode.PositionFollow;
        // let transform = new mw.Transform();
        // transform.position = new mw.Vector(0, 0, 85);
        // transform.rotation = new mw.Rotation(0, 0, 0);
        // this.getCamera.localTransform = transform;
        // this.localPlayer.character.addMovement(this.localPlayer.character.worldTransform.getForwardVector());
        // SoundService.playSound(GlobalData.closeShopSoundId);
        // Camera.switch(this.getCamera);
        this.onSwitchCamera.call(0);
        InputManagers.getInstance.onPressTouch.clear();
        InputManagers.getInstance.onReleaseTouch.clear();
    }
    /**得到商店的NPC */
    get getShopNpc() {
        if (this.shopNpc == null) {
            this.shopNpc = GameObject.findGameObjectById("3BA2AFEA");
        }
        return this.shopNpc;
    }
    /**初始化商店NPC数据 */
    async initShopNPCData() {
        this.shopNpc = await GameObject.asyncFindGameObjectById("3BA2AFEA");
        this.getShopNpc.complexMovementEnabled = false;
        AccountService.downloadData(this.getShopNpc);
        this.cameraAnchor = await GameObject.asyncFindGameObjectById("0DA0D78F");
        let nickName = AccountService.getNickName();
        nickName = (nickName) ? nickName : "playerId:" + this.localPlayerId;
        this.getShopNpc.displayName = nickName;
        this.currentNpcRotZ = this.getShopNpc.localTransform.rotation.z;
        this.tailGo = await GameObject.asyncFindGameObjectById("20024AE7");
        let myCamera = Camera.currentCamera;
        this.shopCamera = await GameObject.asyncSpawn("Camera", {
            replicates: false,
            transform: new mw.Transform(this.getCameraAnchor.worldTransform.position, mw.Rotation.zero, mw.Vector.one)
        });
        this.onSwitchCamera.add((a) => {
            if (a == 1) {
                Camera.switch(this.shopCamera, 0, mw.CameraSwitchBlendFunction.Linear);
            }
            else {
                Camera.switch(myCamera);
            }
        });
    }
    /**更新服装数据 */
    updateClothItemData(id, cloth) {
        let clothGuid = cloth.ClothGuid;
        let clothType = cloth.ClothType;
        if (clothType == 1) {
            let hairGuids = clothGuid.split(',');
            if (this.clothGuids[0] == hairGuids[0] && this.clothGuids[1] == hairGuids[1]) {
                Notice.showDownNotice("已佩戴");
                return;
            }
            this.clothGuids[0] = hairGuids[0];
            this.clothGuids[1] = hairGuids[1];
            this.clothIAA[0] = cloth.IsIAA;
            this.clothIAA[1] = cloth.IsIAA;
        }
        else {
            if (this.clothGuids[clothType] == clothGuid) {
                Notice.showDownNotice("已佩戴");
                return;
            }
            this.clothGuids[clothType] = clothGuid;
            this.clothIAA[clothType] = cloth.IsIAA;
            if (clothType == ClothType.body) {
                for (let i = 0; i <= 5; ++i) {
                    this.clothGuids[i] = "";
                    this.clothIAA[i] = 0;
                }
            }
        }
        this.shopPanel.updateClothItemState(id);
        this.changeClothesToNpc(clothGuid, /* cloth.Animation,*/ clothType);
    }
    /**给NPC换装 */
    changeClothesToNpc(clothGuid, /* animation: string,*/ clothType) {
        switch (clothType) {
            case ClothType.hair:
                let hairGuids = clothGuid.split(',');
                this.getShopNpc.description.advance.hair.frontHair.style = hairGuids[0];
                this.getShopNpc.description.advance.hair.backHair.style = hairGuids[1];
                break;
            case ClothType.upperCloth:
                this.getShopNpc.description.advance.clothing.upperCloth.style = clothGuid;
                break;
            case ClothType.lowerCloth:
                this.getShopNpc.description.advance.clothing.lowerCloth.style = clothGuid;
                break;
            case ClothType.gloves:
                this.getShopNpc.description.advance.clothing.gloves.style = clothGuid;
                break;
            case ClothType.shoe:
                this.getShopNpc.description.advance.clothing.shoes.style = clothGuid;
                break;
            case ClothType.body:
                this.getShopNpc.setDescription([clothGuid]);
                break;
        }
        // if (this.npcAnimation) {
        //     this.npcAnimation.stop();
        //     this.npcAnimation = null;
        // }
        // this.npcAnimation = PlayerManagerExtesion.loadAnimationExtesion(this.getShopNpc, animation, false)
        // this.npcAnimation.play();
    }
    changeClothesToPlayer() {
        this.achievementModuleC.onExecuteAchievementAction.call(13, 1);
        if (this.clothGuids[6] == "") {
            this.changeClothToPlayer();
        }
        else {
            let isAll = true;
            for (let i = 0; i <= 5; ++i) {
                if (this.clothGuids[i] == "") {
                    isAll = false;
                    break;
                }
            }
            if (isAll) {
                this.changeClothToPlayer();
            }
            else {
                if (this.clothGuids[6] != this.currentClothGuids[6]) {
                    this.localPlayer.character.setDescription([this.clothGuids[6]]);
                    this.localPlayer.character.syncDescription();
                    this.currentClothGuids[6] = this.clothGuids[6];
                }
                TimeUtil.delaySecond(1).then(() => {
                    this.changeClothToPlayer();
                });
            }
        }
    }
    /**给角色换装 */
    changeClothToPlayer() {
        this.playEffectAndSoundToPlayer(0);
        if (this.clothGuids[0] != "" && this.clothGuids[0] != this.currentClothGuids[0]) {
            this.localPlayer.character.description.advance.hair.frontHair.style = this.clothGuids[0];
            this.currentClothGuids[0] = this.clothGuids[0];
        }
        TimeUtil.delaySecond(0.2).then(() => {
            if (this.clothGuids[1] != "" && this.clothGuids[1] != this.currentClothGuids[1]) {
                this.localPlayer.character.description.advance.hair.backHair.style = this.clothGuids[1];
                this.currentClothGuids[1] = this.clothGuids[1];
            }
            TimeUtil.delaySecond(0.2).then(() => {
                if (this.clothGuids[2] != "" && this.clothGuids[2] != this.currentClothGuids[2]) {
                    this.localPlayer.character.description.advance.clothing.upperCloth.style = this.clothGuids[2];
                    this.currentClothGuids[2] = this.clothGuids[2];
                }
                TimeUtil.delaySecond(0.2).then(() => {
                    if (this.clothGuids[3] != "" && this.clothGuids[3] != this.currentClothGuids[3]) {
                        this.localPlayer.character.description.advance.clothing.lowerCloth.style = this.clothGuids[3];
                        this.currentClothGuids[3] = this.clothGuids[3];
                    }
                    TimeUtil.delaySecond(0.2).then(() => {
                        if (this.clothGuids[4] != "" && this.clothGuids[4] != this.currentClothGuids[4]) {
                            this.localPlayer.character.description.advance.clothing.gloves.style = this.clothGuids[4];
                            this.currentClothGuids[4] = this.clothGuids[4];
                        }
                        TimeUtil.delaySecond(0.2).then(() => {
                            if (this.clothGuids[5] != "" && this.clothGuids[5] != this.currentClothGuids[5]) {
                                this.localPlayer.character.description.advance.clothing.shoes.style = this.clothGuids[5];
                                this.currentClothGuids[5] = this.clothGuids[5];
                            }
                        });
                    });
                });
            });
        });
        TimeUtil.delaySecond(2).then(() => {
            this.localPlayer.character.syncDescription();
        });
    }
    /**已经看完广告CLoth */
    adsOnCompleteCloth() {
        for (let i = 0; i <= 6; ++i) {
            this.clothIAA[i] = 0;
        }
        this.shopPanel.mIAAImg.visibility = mw.SlateVisibility.Collapsed;
        this.shopPanel.closeShop();
    }
    /**Cloth是否需要ads */
    clothIsNeedAds() {
        let isNeed = false;
        for (let i = 0; i <= 6; ++i) {
            if (this.clothIAA[i] == 1) {
                isNeed = true;
                break;
            }
        }
        return isNeed;
    }
    /**按下 */
    onPressTouch(data) {
        // Console.error("[onPressTouch-data] " + data.x + "/" + data.y);
        if (data.x >= this.limitedTouchXY.x || data.y >= this.limitedTouchXY.y)
            return;
        if (this.x != 0) {
            let x = (data.x - this.x) * this.slideSpeedX;
            // Console.error("x = " + x);
            this.currentNpcRotZ -= x;
            this.getShopNpc.localTransform.rotation = (new mw.Rotation(0, 0, this.currentNpcRotZ));
        }
        this.x = data.x;
    }
    /**释放 */
    onReleaseTouch(data) {
        // Console.error("[onReleaseTouch-data] " + data.x + "/" + data.y);
        this.x = 0;
    }
    /**--------------------------------[商店NPC]-------------------------------- */
    //#endregion
    //#region 武器
    /**--------------------------------[商店武器]-------------------------------- */
    /**使用武器 */
    useWeapon() {
        if (this.weapon == null) {
            Notice.showDownNotice("请选择武器~");
            return;
        }
        if (GlobalData.isOpenIAA) {
            if (this.weaponIsNeedAds()) {
                this.adsTips.showAdTips(this.weapon.id, AdType.Weapon);
            }
            else {
                this.hudModuleC.pickUpWeapon(this.weapon.id);
            }
        }
        else {
            this.hudModuleC.pickUpWeapon(this.weapon.id);
        }
    }
    /**使用武器关闭商店 */
    useWeaponCloseShopPanel() {
        this.shopPanel.closeShop();
    }
    /**更新Weapon数据 */
    updateWeaponItemData(id, weapon) {
        if (this.weapon != null && this.weapon.id == weapon.id) {
            Notice.showDownNotice("已使用~");
            return;
        }
        this.weapon = weapon;
        this.weaponIsIAA = weapon.IsIAA;
        this.shopPanel.updateWeaponItemState(id);
        this.changeWeaponToNPC();
    }
    /**给NPC换武器 */
    changeWeaponToNPC() {
        if (this.npcWeaponModel != null) {
            mwext.GameObjPool.despawn(this.npcWeaponModel);
            this.npcWeaponModel = null;
        }
        let modelGuid = this.weapon.rightWeaponGuid;
        if (!modelGuid)
            return;
        let weaponModel = SpawnManager.modifyPoolSpawn(modelGuid);
        weaponModel.asyncReady().then(() => {
            this.getShopNpc.attachToSlot(weaponModel, mw.HumanoidSlotType.RightHand);
            weaponModel.localTransform.position = (mw.Vector.zero);
            weaponModel.localTransform.rotation = (mw.Rotation.zero);
            weaponModel.worldTransform.scale = (mw.Vector.one);
            this.npcWeaponModel = weaponModel;
            // if (this.npcAnimation) {
            //     this.npcAnimation.stop();
            //     this.npcAnimation = null;
            // }
            // this.npcAnimation = PlayerManagerExtesion.loadAnimationExtesion(this.getShopNpc, this.weapon.AttackAnimationId, false)
            // this.npcAnimation.play();
        });
    }
    /**Weapon是否需要ads */
    weaponIsNeedAds() {
        return (this.weaponIsIAA == 0) ? false : true;
    }
    /**已经看完广告Weapon */
    adsOnCompleteWeapon() {
        this.weaponIsIAA = 0;
        this.shopPanel.mIAAImg.visibility = mw.SlateVisibility.Collapsed;
    }
    /**--------------------------------[商店武器]-------------------------------- */
    //#endregion
    //#region 翅膀
    /**--------------------------------[商店翅膀]-------------------------------- */
    /**使用翅膀 */
    useWing() {
        if (this.wing == null)
            return;
        if (GlobalData.isOpenIAA) {
            if (this.wingIsNeedAds()) {
                this.adsTips.showAdTips(this.wing.id, AdType.Wing);
            }
            else {
                this.hudModuleC.pickUpWing(this.wing.id);
            }
        }
        else {
            this.hudModuleC.pickUpWing(this.wing.id);
        }
    }
    /**使用翅膀关闭商店 */
    useWingCloseShopPanel() {
        this.shopPanel.closeShop();
    }
    /**更新Wing数据 */
    updateWingItemData(id, wing) {
        if (this.wing != null && this.wing.id == wing.id) {
            Notice.showDownNotice("已使用~");
            return;
        }
        this.wing = wing;
        this.wingIsIAA = wing.IsIAA;
        this.shopPanel.updateWingItemState(id);
        this.changeWingToNPC();
    }
    /**给NPC换翅膀 */
    changeWingToNPC() {
        if (this.npcWingEffectId != null) {
            EffectService.stop(this.npcWingEffectId);
        }
        if (!this.wing.WingGuid)
            return;
        this.npcWingEffectId = GeneralManager.rpcPlayEffectOnPlayer(this.wing.WingGuid, this.getShopNpc, mw.HumanoidSlotType.BackOrnamental, 0, this.wing.WingOffset, new mw.Rotation(this.wing.WingRotation), this.wing.WingScale);
    }
    /**Wing是否需要ads */
    wingIsNeedAds() {
        return (this.wingIsIAA == 0) ? false : true;
    }
    /**已经看完广告Wing */
    adsOnCompleteWing() {
        this.wingIsIAA = 0;
        this.shopPanel.mIAAImg.visibility = mw.SlateVisibility.Collapsed;
    }
    /**--------------------------------[商店武器]-------------------------------- */
    //#endregion
    //#region 拖尾
    /**--------------------------------[商店拖尾]-------------------------------- */
    /**使用拖尾 */
    useTail() {
        if (this.tail == null)
            return;
        if (GlobalData.isOpenIAA) {
            if (this.tailIsNeedAds()) {
                this.adsTips.showAdTips(this.tail.id, AdType.Tail);
            }
            else {
                this.hudModuleC.pickUptailEffect(this.tail.id);
            }
        }
        else {
            this.hudModuleC.pickUptailEffect(this.tail.id);
        }
    }
    /**使用拖尾关闭商店 */
    useTailCloseShopPanel() {
        this.shopPanel.closeShop();
    }
    /**更新Tail数据 */
    updateTailItemData(id, tail) {
        if (this.tail != null && this.tail.id == tail.id) {
            Notice.showDownNotice("已使用~");
            return;
        }
        this.tail = tail;
        this.tailIsIAA = tail.IsIAA;
        this.shopPanel.updateTailItemState(id);
        this.changeTailToNPC();
    }
    /**给NPC换拖尾 */
    changeTailToNPC() {
        if (this.npcTailEffectId != null) {
            EffectService.stop(this.npcTailEffectId);
        }
        if (!this.tail.TailGuid)
            return;
        this.npcTailEffectId = GeneralManager.rpcPlayEffectOnGameObject(this.tail.TailGuid, this.tailGo, 0, this.tail.TailOffset, new mw.Rotation(this.tail.TailRotation), this.tail.TailScale);
    }
    /**Tail是否需要ads */
    tailIsNeedAds() {
        return (this.tailIsIAA == 0) ? false : true;
    }
    /**已经看完广告tail */
    adsOnCompleteTail() {
        this.tailIsIAA = 0;
        this.shopPanel.mIAAImg.visibility = mw.SlateVisibility.Collapsed;
    }
    /**--------------------------------[商店武器]-------------------------------- */
    //#endregion
    /**得到当前最大高度 */
    getMaxHeight() {
        return this.data.maxHeight;
    }
    /**得到当前玩家等级 */
    getLevel() {
        return this.data.level;
    }
    /**得到当前玩家击杀人数 */
    getKillCount() {
        return this.data.killCount;
    }
    /**得到是否第一次游戏 */
    getIsFirstGame() {
        return this.data.isFirstGame;
    }
    /**保存完成游戏引导 */
    completeGameGuide() {
        this.server.net_completeGameGuide();
    }
    /**升级&换装特效音效播放 */
    playEffectAndSoundToPlayer(playType) {
        SoundService.playSound(GlobalData.upgradeSoundGuid, 1);
        this.server.net_playEffectAndSoundToPlayer(playType);
    }
    playerLevel(lv) {
        this.onPlayerLevelAction.call(lv);
    }
}
var ClothType;
(function (ClothType) {
    /**后发 108424--前发 108424*/
    ClothType[ClothType["hair"] = 1] = "hair";
    /**上衣 46293-29756*/
    ClothType[ClothType["upperCloth"] = 2] = "upperCloth";
    /**下衣 108421*/
    ClothType[ClothType["lowerCloth"] = 3] = "lowerCloth";
    /**手套 116994--53004*/
    ClothType[ClothType["gloves"] = 4] = "gloves";
    /**鞋 108421*/
    ClothType[ClothType["shoe"] = 5] = "shoe";
    /**整身 52965*/
    ClothType[ClothType["body"] = 6] = "body";
})(ClothType || (ClothType = {}));

var foreign92 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    get ClothType () { return ClothType; },
    default: ShopModuleC
});

/**
 * AUTO GENERATE BY UI EDITOR.
 * WARNING: DO NOT MODIFY THIS FILE,MAY CAUSE CODE LOST.
 * AUTHOR: 爱玩游戏的小胖子
 * UI: UI/module/HUDUI/HUDPanel.ui
 * TIME: 2024.08.04-18.39.53
 */
let HUDPanel_Generate = class HUDPanel_Generate extends UIScript {
    get mJoystick() {
        if (!this.mJoystick_Internal && this.uiWidgetBase) {
            this.mJoystick_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainCanvas/mJoystick');
        }
        return this.mJoystick_Internal;
    }
    get mTouchPad() {
        if (!this.mTouchPad_Internal && this.uiWidgetBase) {
            this.mTouchPad_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainCanvas/mTouchPad');
        }
        return this.mTouchPad_Internal;
    }
    get mFlyCanvas() {
        if (!this.mFlyCanvas_Internal && this.uiWidgetBase) {
            this.mFlyCanvas_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/RightDownCanvas/mFlyCanvas');
        }
        return this.mFlyCanvas_Internal;
    }
    get mFlyMaskBtn() {
        if (!this.mFlyMaskBtn_Internal && this.uiWidgetBase) {
            this.mFlyMaskBtn_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/RightDownCanvas/mFlyCanvas/mFlyMaskBtn');
        }
        return this.mFlyMaskBtn_Internal;
    }
    get mFlyText() {
        if (!this.mFlyText_Internal && this.uiWidgetBase) {
            this.mFlyText_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/RightDownCanvas/mFlyCanvas/mFlyText');
        }
        return this.mFlyText_Internal;
    }
    get mJumpCanvas() {
        if (!this.mJumpCanvas_Internal && this.uiWidgetBase) {
            this.mJumpCanvas_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/RightDownCanvas/mJumpCanvas');
        }
        return this.mJumpCanvas_Internal;
    }
    get mJumpBtn() {
        if (!this.mJumpBtn_Internal && this.uiWidgetBase) {
            this.mJumpBtn_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/RightDownCanvas/mJumpCanvas/mJumpBtn');
        }
        return this.mJumpBtn_Internal;
    }
    get mAttackCanvas() {
        if (!this.mAttackCanvas_Internal && this.uiWidgetBase) {
            this.mAttackCanvas_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/RightDownCanvas/mAttackCanvas');
        }
        return this.mAttackCanvas_Internal;
    }
    get mAttackButton() {
        if (!this.mAttackButton_Internal && this.uiWidgetBase) {
            this.mAttackButton_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/RightDownCanvas/mAttackCanvas/mAttackButton');
        }
        return this.mAttackButton_Internal;
    }
    get mTimeText() {
        if (!this.mTimeText_Internal && this.uiWidgetBase) {
            this.mTimeText_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/RightTopCanvas/ClockCanvas/mTimeText');
        }
        return this.mTimeText_Internal;
    }
    get mRaffleButton() {
        if (!this.mRaffleButton_Internal && this.uiWidgetBase) {
            this.mRaffleButton_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/RightTopCanvas/RaffleCanvas/mRaffleButton');
        }
        return this.mRaffleButton_Internal;
    }
    get mAchButton() {
        if (!this.mAchButton_Internal && this.uiWidgetBase) {
            this.mAchButton_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/RightTopCanvas/AdsCanvas/mAchButton');
        }
        return this.mAchButton_Internal;
    }
    get mAdsButton() {
        if (!this.mAdsButton_Internal && this.uiWidgetBase) {
            this.mAdsButton_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/RightTopCanvas/AchCanvas/mAdsButton');
        }
        return this.mAdsButton_Internal;
    }
    get mSignInBtn() {
        if (!this.mSignInBtn_Internal && this.uiWidgetBase) {
            this.mSignInBtn_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/RightTopCanvas/SignInCanvas/mSignInBtn');
        }
        return this.mSignInBtn_Internal;
    }
    get mRankBtn() {
        if (!this.mRankBtn_Internal && this.uiWidgetBase) {
            this.mRankBtn_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/RightTopCanvas/RankCanvas/mRankBtn');
        }
        return this.mRankBtn_Internal;
    }
    get mMusicBtn() {
        if (!this.mMusicBtn_Internal && this.uiWidgetBase) {
            this.mMusicBtn_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/RightTopCanvas/MusicCanvas/mMusicBtn');
        }
        return this.mMusicBtn_Internal;
    }
    get mLevelBtn() {
        if (!this.mLevelBtn_Internal && this.uiWidgetBase) {
            this.mLevelBtn_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/RightTopCanvas/LevelCanvas/mLevelBtn');
        }
        return this.mLevelBtn_Internal;
    }
    get mShopBtn() {
        if (!this.mShopBtn_Internal && this.uiWidgetBase) {
            this.mShopBtn_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/RightTopCanvas/ShopCanvas/mShopBtn');
        }
        return this.mShopBtn_Internal;
    }
    get mHomeBtn() {
        if (!this.mHomeBtn_Internal && this.uiWidgetBase) {
            this.mHomeBtn_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/RightTopCanvas/HomeCanvas/mHomeBtn');
        }
        return this.mHomeBtn_Internal;
    }
    get mMusicCanvas() {
        if (!this.mMusicCanvas_Internal && this.uiWidgetBase) {
            this.mMusicCanvas_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mMusicCanvas');
        }
        return this.mMusicCanvas_Internal;
    }
    get mCloseMusicBtn() {
        if (!this.mCloseMusicBtn_Internal && this.uiWidgetBase) {
            this.mCloseMusicBtn_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mMusicCanvas/mCloseMusicBtn');
        }
        return this.mCloseMusicBtn_Internal;
    }
    get mMusicText() {
        if (!this.mMusicText_Internal && this.uiWidgetBase) {
            this.mMusicText_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mMusicCanvas/Canvas/mMusicText');
        }
        return this.mMusicText_Internal;
    }
    get mLeftMusicBtn() {
        if (!this.mLeftMusicBtn_Internal && this.uiWidgetBase) {
            this.mLeftMusicBtn_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mMusicCanvas/Canvas/mLeftMusicBtn');
        }
        return this.mLeftMusicBtn_Internal;
    }
    get mOnOffMusicBtn() {
        if (!this.mOnOffMusicBtn_Internal && this.uiWidgetBase) {
            this.mOnOffMusicBtn_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mMusicCanvas/Canvas/mOnOffMusicBtn');
        }
        return this.mOnOffMusicBtn_Internal;
    }
    get mRightMusicBtn() {
        if (!this.mRightMusicBtn_Internal && this.uiWidgetBase) {
            this.mRightMusicBtn_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mMusicCanvas/Canvas/mRightMusicBtn');
        }
        return this.mRightMusicBtn_Internal;
    }
    get mBeFlyingText() {
        if (!this.mBeFlyingText_Internal && this.uiWidgetBase) {
            this.mBeFlyingText_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MiddleBottomCanvas/mBeFlyingText');
        }
        return this.mBeFlyingText_Internal;
    }
    get mExpProgressBar() {
        if (!this.mExpProgressBar_Internal && this.uiWidgetBase) {
            this.mExpProgressBar_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MiddleBottomCanvas/mExpProgressBar');
        }
        return this.mExpProgressBar_Internal;
    }
    get mHpText() {
        if (!this.mHpText_Internal && this.uiWidgetBase) {
            this.mHpText_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/LeftCanvas/mHpText');
        }
        return this.mHpText_Internal;
    }
    get mAttackText() {
        if (!this.mAttackText_Internal && this.uiWidgetBase) {
            this.mAttackText_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/LeftCanvas/mAttackText');
        }
        return this.mAttackText_Internal;
    }
    get mMoveSpeedText() {
        if (!this.mMoveSpeedText_Internal && this.uiWidgetBase) {
            this.mMoveSpeedText_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/LeftCanvas/mMoveSpeedText');
        }
        return this.mMoveSpeedText_Internal;
    }
    get mFlySpeedText() {
        if (!this.mFlySpeedText_Internal && this.uiWidgetBase) {
            this.mFlySpeedText_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/LeftCanvas/mFlySpeedText');
        }
        return this.mFlySpeedText_Internal;
    }
    get mJumpHeightText() {
        if (!this.mJumpHeightText_Internal && this.uiWidgetBase) {
            this.mJumpHeightText_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/LeftCanvas/mJumpHeightText');
        }
        return this.mJumpHeightText_Internal;
    }
    get mPetButton() {
        if (!this.mPetButton_Internal && this.uiWidgetBase) {
            this.mPetButton_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/LeftCanvas/mPetButton');
        }
        return this.mPetButton_Internal;
    }
    get mKillTipCanvas() {
        if (!this.mKillTipCanvas_Internal && this.uiWidgetBase) {
            this.mKillTipCanvas_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mKillTipCanvas');
        }
        return this.mKillTipCanvas_Internal;
    }
    get mKillTipCountCanvas() {
        if (!this.mKillTipCountCanvas_Internal && this.uiWidgetBase) {
            this.mKillTipCountCanvas_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/KillStreakCanvas/mKillTipCountCanvas');
        }
        return this.mKillTipCountCanvas_Internal;
    }
    get mKillTipTextBlock1() {
        if (!this.mKillTipTextBlock1_Internal && this.uiWidgetBase) {
            this.mKillTipTextBlock1_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/KillStreakCanvas/mKillTipCountCanvas/mKillTipTextBlock1');
        }
        return this.mKillTipTextBlock1_Internal;
    }
    get mKillTipTextBlock2() {
        if (!this.mKillTipTextBlock2_Internal && this.uiWidgetBase) {
            this.mKillTipTextBlock2_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/KillStreakCanvas/mKillTipCountCanvas/mKillTipTextBlock2');
        }
        return this.mKillTipTextBlock2_Internal;
    }
    get mKillTipTextBlock3() {
        if (!this.mKillTipTextBlock3_Internal && this.uiWidgetBase) {
            this.mKillTipTextBlock3_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/KillStreakCanvas/mKillTipTextBlock3');
        }
        return this.mKillTipTextBlock3_Internal;
    }
    onAwake() {
        //设置能否每帧触发onUpdate
        this.canUpdate = false;
        this.layer = mw.UILayerBottom;
        this.initButtons();
    }
    initButtons() {
        //按钮添加点击
        //按钮添加点击
        this.mJumpBtn.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick", "mJumpBtn");
        });
        this.mJumpBtn.touchMethod = (mw.ButtonTouchMethod.PreciseTap);
        this.mAttackButton.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick", "mAttackButton");
        });
        this.mAttackButton.touchMethod = (mw.ButtonTouchMethod.PreciseTap);
        this.mRaffleButton.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick", "mRaffleButton");
        });
        this.mRaffleButton.touchMethod = (mw.ButtonTouchMethod.PreciseTap);
        this.mAchButton.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick", "mAchButton");
        });
        this.mAchButton.touchMethod = (mw.ButtonTouchMethod.PreciseTap);
        this.mAdsButton.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick", "mAdsButton");
        });
        this.mAdsButton.touchMethod = (mw.ButtonTouchMethod.PreciseTap);
        this.mSignInBtn.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick", "mSignInBtn");
        });
        this.mSignInBtn.touchMethod = (mw.ButtonTouchMethod.PreciseTap);
        this.mRankBtn.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick", "mRankBtn");
        });
        this.mRankBtn.touchMethod = (mw.ButtonTouchMethod.PreciseTap);
        this.mMusicBtn.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick", "mMusicBtn");
        });
        this.mMusicBtn.touchMethod = (mw.ButtonTouchMethod.PreciseTap);
        this.mLevelBtn.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick", "mLevelBtn");
        });
        this.mLevelBtn.touchMethod = (mw.ButtonTouchMethod.PreciseTap);
        this.mShopBtn.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick", "mShopBtn");
        });
        this.mShopBtn.touchMethod = (mw.ButtonTouchMethod.PreciseTap);
        this.mHomeBtn.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick", "mHomeBtn");
        });
        this.mHomeBtn.touchMethod = (mw.ButtonTouchMethod.PreciseTap);
        this.mCloseMusicBtn.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick", "mCloseMusicBtn");
        });
        this.mCloseMusicBtn.touchMethod = (mw.ButtonTouchMethod.PreciseTap);
        this.mLeftMusicBtn.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick", "mLeftMusicBtn");
        });
        this.mLeftMusicBtn.touchMethod = (mw.ButtonTouchMethod.PreciseTap);
        this.mOnOffMusicBtn.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick", "mOnOffMusicBtn");
        });
        this.mOnOffMusicBtn.touchMethod = (mw.ButtonTouchMethod.PreciseTap);
        this.mRightMusicBtn.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick", "mRightMusicBtn");
        });
        this.mRightMusicBtn.touchMethod = (mw.ButtonTouchMethod.PreciseTap);
        this.mPetButton.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick", "mPetButton");
        });
        this.mPetButton.touchMethod = (mw.ButtonTouchMethod.PreciseTap);
        //按钮多语言
        //文本多语言
        this.initLanguage(this.mFlyText);
        this.initLanguage(this.mTimeText);
        this.initLanguage(this.mMusicText);
        this.initLanguage(this.mBeFlyingText);
        this.initLanguage(this.mHpText);
        this.initLanguage(this.mAttackText);
        this.initLanguage(this.mMoveSpeedText);
        this.initLanguage(this.mFlySpeedText);
        this.initLanguage(this.mJumpHeightText);
        this.initLanguage(this.mKillTipTextBlock1);
        this.initLanguage(this.mKillTipTextBlock2);
        this.initLanguage(this.mKillTipTextBlock3);
        //文本多语言
        this.initLanguage(this.uiWidgetBase.findChildByPath("RootCanvas/RightTopCanvas/RaffleCanvas/TextBlock"));
        this.initLanguage(this.uiWidgetBase.findChildByPath("RootCanvas/RightTopCanvas/AdsCanvas/TextBlock"));
        this.initLanguage(this.uiWidgetBase.findChildByPath("RootCanvas/RightTopCanvas/AchCanvas/TextBlock"));
        this.initLanguage(this.uiWidgetBase.findChildByPath("RootCanvas/RightTopCanvas/SignInCanvas/TextBlock_6"));
        this.initLanguage(this.uiWidgetBase.findChildByPath("RootCanvas/RightTopCanvas/RankCanvas/TextBlock_5"));
        this.initLanguage(this.uiWidgetBase.findChildByPath("RootCanvas/RightTopCanvas/MusicCanvas/TextBlock_4"));
        this.initLanguage(this.uiWidgetBase.findChildByPath("RootCanvas/RightTopCanvas/LevelCanvas/TextBlock_3"));
        this.initLanguage(this.uiWidgetBase.findChildByPath("RootCanvas/RightTopCanvas/ShopCanvas/TextBlock_2"));
        this.initLanguage(this.uiWidgetBase.findChildByPath("RootCanvas/RightTopCanvas/HomeCanvas/TextBlock_1"));
        this.initLanguage(this.uiWidgetBase.findChildByPath("RootCanvas/MiddleBottomCanvas/TextBlock_8"));
        this.initLanguage(this.uiWidgetBase.findChildByPath("RootCanvas/LeftCanvas/mPetButton/TextBlock_7"));
    }
    /*初始化多语言*/
    initLanguage(ui) {
        let call = mw.UIScript.getBehavior("lan");
        if (call && ui) {
            call(ui);
        }
    }
    onShow(...params) { }
    ;
    /*显示panel*/
    show(...param) {
        mw.UIService.showUI(this, this.layer, ...param);
    }
    /*隐藏panel*/
    hide() {
        mw.UIService.hideUI(this);
    }
};
HUDPanel_Generate = __decorate([
    UIBind('UI/module/HUDUI/HUDPanel.ui')
], HUDPanel_Generate);
var HUDPanel_Generate$1 = HUDPanel_Generate;

var foreign129 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: HUDPanel_Generate$1
});

/**
 * AUTO GENERATE BY UI EDITOR.
 * WARNING: DO NOT MODIFY THIS FILE,MAY CAUSE CODE LOST.
 * AUTHOR: 爱玩游戏的小胖子
 * UI: UI/module/HUDUI/KillTipItem.ui
 * TIME: 2024.08.04-18.39.53
 */
let KillTipItem_Generate = class KillTipItem_Generate extends UIScript {
    get mBgImage() {
        if (!this.mBgImage_Internal && this.uiWidgetBase) {
            this.mBgImage_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mBgImage');
        }
        return this.mBgImage_Internal;
    }
    get mMainCanvas() {
        if (!this.mMainCanvas_Internal && this.uiWidgetBase) {
            this.mMainCanvas_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mMainCanvas');
        }
        return this.mMainCanvas_Internal;
    }
    get mKillerTextBlock() {
        if (!this.mKillerTextBlock_Internal && this.uiWidgetBase) {
            this.mKillerTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mMainCanvas/KillerCanvas/mKillerTextBlock');
        }
        return this.mKillerTextBlock_Internal;
    }
    get mKilledTextBlock() {
        if (!this.mKilledTextBlock_Internal && this.uiWidgetBase) {
            this.mKilledTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mMainCanvas/KilledCanvas/mKilledTextBlock');
        }
        return this.mKilledTextBlock_Internal;
    }
    onAwake() {
        //设置能否每帧触发onUpdate
        this.canUpdate = false;
        this.layer = mw.UILayerBottom;
        this.initButtons();
    }
    initButtons() {
        //按钮添加点击
        //按钮添加点击
        //按钮多语言
        //文本多语言
        this.initLanguage(this.mKillerTextBlock);
        this.initLanguage(this.mKilledTextBlock);
        //文本多语言
        this.initLanguage(this.uiWidgetBase.findChildByPath("RootCanvas/mMainCanvas/KillCanvas/KillTextBlock"));
    }
    /*初始化多语言*/
    initLanguage(ui) {
        let call = mw.UIScript.getBehavior("lan");
        if (call && ui) {
            call(ui);
        }
    }
    onShow(...params) { }
    ;
    /*显示panel*/
    show(...param) {
        mw.UIService.showUI(this, this.layer, ...param);
    }
    /*隐藏panel*/
    hide() {
        mw.UIService.hideUI(this);
    }
};
KillTipItem_Generate = __decorate([
    UIBind('UI/module/HUDUI/KillTipItem.ui')
], KillTipItem_Generate);
var KillTipItem_Generate$1 = KillTipItem_Generate;

var foreign130 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: KillTipItem_Generate$1
});

/**
 * AUTHOR: 爱玩游戏的小胖子
 * TIME: 2023.05.25-10.21.12
 */
class HUDPanel extends HUDPanel_Generate$1 {
    constructor() {
        super(...arguments);
        this.hudModuleC = null;
        /**背景音乐按钮事件（true-打开|false-关闭） */
        this.onBgmAction = new Action1();
        /**切换背景音乐（-1前一首|1下一首） */
        this.onSwitchBgmAction = new Action1();
        /**重生事件 */
        this.onRebirthAction = new Action();
        /**注册事件 */
        // private registerActions(): void {
        // 	this.hudModuleC.onUpdateAttackCD.add((cd: number) => {
        // 		this.attackCD = cd;
        // 		Console.error("[更新攻击CD：" + this.attackCD + "]");
        // 	});
        // }
        /**是否打开BGM */
        this.isOpenBGM = true;
        this.curInputIndex = -1;
        /**飞行时间倒计时间隔 */
        this.flyIntervalId = null;
        this.hideKillTipIntervalId = null;
        this.killTipItems = [];
        this.killTipDatas = [];
        //#endregion
        //#region 连杀提示
        this.killTipsTimeOutId1 = null;
        this.killTipsTimeOutId2 = null;
        //#endregion
    }
    /**攻击CD */
    // private attackCD: number = 2;
    /**
     * 构造UI文件成功后，在合适的时机最先初始化一次
     */
    onStart() {
        //设置能否每帧触发onUpdate
        this.canUpdate = false;
        this.layer = mw.UILayerMiddle;
        this.initUI();
        this.initData();
        this.bindButtons();
        // this.registerActions();
    }
    /**初始化数据 */
    initData() {
        this.hudModuleC = ModuleService.getModule(HUDModuleC);
    }
    /**绑定按钮 */
    bindButtons() {
        this.mJumpBtn.onClicked.add(() => {
            this.hudModuleC.onJumpAction.call();
        });
        this.mRankBtn.onClicked.add(() => {
            this.hudModuleC.onOpenRankingAction.call();
        });
        this.mHomeBtn.onClicked.add(() => {
            this.onRebirthAction.call();
        });
        this.mShopBtn.onClicked.add(() => {
            this.hudModuleC.onSkinShopAction.call();
        });
        this.mLevelBtn.onClicked.add(() => {
            this.hudModuleC.onOpenAndCloseCollectionPanelAction.call(true);
        });
        this.mSignInBtn.onClicked.add(() => {
            this.hudModuleC.onOpenSignInAction.call();
        });
        this.mAdsButton.onClicked.add(() => {
            this.hudModuleC.onOpenAdsAction.call();
        });
        this.mAchButton.onClicked.add(() => {
            this.hudModuleC.onOpenAchAction.call();
        });
        this.mPetButton.onClicked.add(() => {
            this.hudModuleC.onOpenPetAction.call();
        });
        this.mRaffleButton.onClicked.add(() => {
            this.hudModuleC.onOpenRaffleAction.call();
        });
        this.initAttackButton();
        this.initMusicButton();
        this.initWingButton();
        this.mFlyCanvas.visibility = mw.SlateVisibility.Collapsed;
    }
    initUI() {
        this.initKillTipItems();
        Utils.setWidgetVisibility(this.mKillTipCountCanvas, mw.SlateVisibility.Collapsed);
        Utils.setWidgetVisibility(this.mKillTipTextBlock3, mw.SlateVisibility.Collapsed);
    }
    /**初始化背景音乐按钮 */
    initMusicButton() {
        this.mMusicCanvas.visibility = mw.SlateVisibility.Collapsed;
        this.mMusicBtn.onClicked.add(() => {
            this.hudModuleC.onMusicAction.call();
        });
        this.mOnOffMusicBtn.onClicked.add(() => {
            this.isOpenBGM = !this.isOpenBGM;
            this.onBgmAction.call(this.isOpenBGM);
            let offOnIcon = (this.isOpenBGM) ? GlobalData.onMusicIconGuid : GlobalData.offMusicIconGuid;
            this.mOnOffMusicBtn.normalImageGuid = offOnIcon;
            this.mOnOffMusicBtn.pressedImageGuid = offOnIcon;
            this.mOnOffMusicBtn.disableImageGuid = offOnIcon;
        });
        this.mLeftMusicBtn.onClicked.add(() => {
            this.onSwitchBgmAction.call(-1);
        });
        this.mRightMusicBtn.onClicked.add(() => {
            this.onSwitchBgmAction.call(1);
        });
        this.mCloseMusicBtn.onClicked.add(() => {
            if (this.mMusicCanvas.visibility == mw.SlateVisibility.Collapsed)
                return;
            this.mMusicCanvas.visibility = mw.SlateVisibility.Collapsed;
        });
        this.mMusicBtn.normalImageColor = new mw.LinearColor(0, 1, 1);
        this.flickerMusicButtonColor();
    }
    /**初始化攻击按钮 */
    initAttackButton() {
        this.atk(0);
    }
    atk(index) {
        this.mAttackButton.onPressed.add(() => {
            if (this.curInputIndex != -1)
                return;
            ColdWeapon.getInstance().attack(index);
            this.curInputIndex = index;
        });
        this.mAttackButton.onReleased.add(() => {
            if (this.curInputIndex != index)
                return;
            ColdWeapon.getInstance().endCharge(true);
            this.curInputIndex = -1;
        });
    }
    /**初始化飞行按钮 */
    initWingButton() {
        this.mFlyMaskBtn.clickedDelegate.add(() => {
            if (!this.hudModuleC.IsFlying) {
                Notice.showDownNotice("正在使用飞行技能");
                return;
            }
            if (!this.hudModuleC.IsCanFly) {
                Notice.showDownNotice("使用蹦床期间不可以使用飞行翅膀哟~");
                return;
            }
            this.hudModuleC.IsFlying = false;
            this.hudModuleC.onFlyOrWalkAction.call();
        });
        this.mFlyMaskBtn.fanShapedValue = 1;
        this.mFlyMaskBtn.enable = true;
        this.mBeFlyingText.visibility = mw.SlateVisibility.Collapsed;
    }
    /**更新飞行按钮CD显示以及按钮可用性 */
    updateFlyButtonCD(cd = GlobalData.wingFlyTime) {
        this.mFlyMaskBtn.enable = false;
        this.mFlyText.visibility = mw.SlateVisibility.SelfHitTestInvisible;
        let tmpCD = cd;
        this.mFlyText.text = tmpCD.toString();
        this.mFlyMaskBtn.fanShapedValue = 0;
        new mw.Tween({ value: 0 }).to({ value: 1 }, tmpCD * 1000).onUpdate((v) => {
            this.mFlyText.text = (tmpCD - v.value * tmpCD).toFixed(1);
            this.mFlyMaskBtn.fanShapedValue = v.value;
        }).start().onComplete(() => {
            this.mFlyMaskBtn.enable = true;
            this.hudModuleC.IsFlying = true;
            this.mFlyText.visibility = mw.SlateVisibility.Collapsed;
        });
    }
    /**更新飞行时间CD */
    updateFlyCD(cd = GlobalData.wingFlyTime) {
        this.mBeFlyingText.visibility = mw.SlateVisibility.SelfHitTestInvisible;
        if (this.flyIntervalId) {
            TimeUtil.clearInterval(this.flyIntervalId);
            this.flyIntervalId = null;
        }
        let tmpCD = cd;
        this.mBeFlyingText.text = "飞行倒计时 " + tmpCD + " 秒";
        --tmpCD;
        this.flyIntervalId = TimeUtil.setInterval(() => {
            this.mBeFlyingText.text = "飞行倒计时 " + tmpCD + " 秒";
            if (tmpCD <= 0) {
                TimeUtil.clearInterval(this.flyIntervalId);
                this.flyIntervalId = null;
                this.mBeFlyingText.visibility = mw.SlateVisibility.Collapsed;
            }
            --tmpCD;
        }, 1);
    }
    /**闪烁音乐按钮 */
    flickerMusicButtonColor() {
        let startFlicker = new Tween$2({ B: 1 })
            .to({ B: 0 }, 0.30 * 1000)
            .onUpdate((v) => {
            this.mMusicBtn.normalImageColor = new mw.LinearColor(0, 1, v.B);
        })
            .onComplete(() => {
            new Tween$2({ R: 0 })
                .to({ R: 1 }, 0.30 * 1000)
                .onUpdate((v) => {
                this.mMusicBtn.normalImageColor = new mw.LinearColor(v.R, 1, 0);
            })
                .onComplete(() => {
                new Tween$2({ G: 1 })
                    .to({ G: 0 }, 0.30 * 1000)
                    .onUpdate((v) => {
                    this.mMusicBtn.normalImageColor = new mw.LinearColor(1, v.G, 0);
                })
                    .onComplete(() => {
                    new Tween$2({ B: 0 })
                        .to({ B: 1 }, 0.30 * 1000)
                        .onUpdate((v) => {
                        this.mMusicBtn.normalImageColor = new mw.LinearColor(1, 0, v.B);
                    })
                        .onComplete(() => {
                        new Tween$2({ R: 1 })
                            .to({ R: 0 }, 0.30 * 1000)
                            .onUpdate((v) => {
                            this.mMusicBtn.normalImageColor = new mw.LinearColor(v.R, 0, 1);
                        })
                            .onComplete(() => {
                            new Tween$2({ G: 0 })
                                .to({ G: 1 }, 0.30 * 1000)
                                .onUpdate((v) => {
                                this.mMusicBtn.normalImageColor = new mw.LinearColor(0, v.G, 1);
                            })
                                .onComplete(() => {
                                startFlicker.start();
                            })
                                .start();
                        })
                            .start();
                    })
                        .start();
                })
                    .start();
            })
                .start();
        })
            .start();
    }
    //#region 击杀提示
    initKillTipItems() {
        for (let i = 0; i < 4; ++i) {
            let killTipItem = UIService.create(KillTipItem);
            killTipItem.uiObject.position = new mw.Vector2(0, 37 * i);
            Utils.setWidgetVisibility(killTipItem.uiObject, mw.SlateVisibility.Collapsed);
            this.mKillTipCanvas.addChild(killTipItem.uiObject);
            this.killTipItems.push(killTipItem);
        }
    }
    killTip(killTipType, killerName, killedName) {
        let killTipData = new KillTipData();
        killTipData.killTipType = killTipType;
        killTipData.killerName = killerName;
        killTipData.killedName = killedName;
        if (this.killTipDatas.length >= 4) {
            this.killTipDatas.shift();
        }
        this.killTipDatas.push(killTipData);
        this.updateKillTipItems();
        this.clearHideKillTipIntervalId();
        this.hideKillTipIntervalId = TimeUtil.setInterval(() => {
            if (this.killTipDatas && this.killTipDatas.length > 0) {
                this.killTipDatas.shift();
                this.updateKillTipItems();
            }
            else {
                this.clearHideKillTipIntervalId();
            }
        }, 5);
    }
    clearHideKillTipIntervalId() {
        if (this.hideKillTipIntervalId) {
            TimeUtil.clearInterval(this.hideKillTipIntervalId);
            this.hideKillTipIntervalId = null;
        }
    }
    updateKillTipItems() {
        for (let i = 0; i < this.killTipDatas.length; ++i) {
            this.killTipItems[i].setInfo(this.killTipDatas[i]);
        }
        for (let i = this.killTipDatas.length; i < 4; ++i) {
            Utils.setWidgetVisibility(this.killTipItems[i].uiObject, mw.SlateVisibility.Collapsed);
        }
    }
    showKillTips1(killTips, killerName, killedName) {
        Notice.showDownNotice("<color=#lime>" + "<size=18>" + killerName + " 击败了 " + killedName + "</size>" + "</color>"
            + "\n" + "<color=#red>" + killTips + "</color>");
    }
    clearKillTipsTimeOutId1() {
        if (this.killTipsTimeOutId1) {
            clearTimeout(this.killTipsTimeOutId1);
            this.killTipsTimeOutId1 = null;
        }
    }
    showKillTips2(killerName, killedName, killTipType) {
        if (killTipType == KillTipType.None)
            return;
        this.clearKillTipsTimeOutId2();
        if (killTipType == KillTipType.Killed) {
            this.mKillTipTextBlock3.text = "你已被 " + killerName + " 击败";
        }
        else if (killTipType == KillTipType.revenge) {
            this.mKillTipTextBlock3.text = "击败 " + killedName + " 完成复仇";
        }
        Utils.setWidgetVisibility(this.mKillTipTextBlock3, mw.SlateVisibility.SelfHitTestInvisible);
        this.killTipsTimeOutId2 = setTimeout(() => {
            Utils.setWidgetVisibility(this.mKillTipTextBlock3, mw.SlateVisibility.Collapsed);
            this.clearKillTipsTimeOutId2();
        }, 3 * 1000);
    }
    clearKillTipsTimeOutId2() {
        if (this.killTipsTimeOutId2) {
            clearTimeout(this.killTipsTimeOutId2);
            this.killTipsTimeOutId2 = null;
        }
    }
}
class KillTipItem extends KillTipItem_Generate$1 {
    onAwake() {
    }
    setInfo(killTipDatas) {
        this.mKillerTextBlock.text = killTipDatas.killerName;
        this.mKilledTextBlock.text = killTipDatas.killedName;
        switch (killTipDatas.killTipType) {
            case KillTipType.None:
                this.mKillerTextBlock.fontColor = mw.LinearColor.white;
                this.mKillerTextBlock.shadowColor = mw.LinearColor.white;
                this.mKilledTextBlock.fontColor = mw.LinearColor.white;
                this.mKilledTextBlock.shadowColor = mw.LinearColor.white;
                break;
            case KillTipType.Killer:
                this.mKillerTextBlock.fontColor = mw.LinearColor.yellow;
                this.mKillerTextBlock.shadowColor = mw.LinearColor.red;
                this.mKilledTextBlock.fontColor = mw.LinearColor.white;
                this.mKilledTextBlock.shadowColor = mw.LinearColor.white;
                break;
            case KillTipType.Killed:
                this.mKillerTextBlock.fontColor = mw.LinearColor.white;
                this.mKillerTextBlock.shadowColor = mw.LinearColor.white;
                this.mKilledTextBlock.fontColor = mw.LinearColor.yellow;
                this.mKilledTextBlock.shadowColor = mw.LinearColor.red;
                break;
        }
        Utils.setWidgetVisibility(this.uiObject, mw.SlateVisibility.SelfHitTestInvisible);
        setTimeout(() => {
            this.mBgImage.size = new mw.Vector2(this.mMainCanvas.size.x + 20, this.mMainCanvas.size.y);
        }, 1);
    }
}

var foreign79 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    KillTipItem: KillTipItem,
    default: HUDPanel
});

class HUDModuleC extends ModuleC {
    constructor() {
        super(...arguments);
        this.hudPanel = null;
        /**皮肤商店模块 */
        this.shopModuleC = null;
        this.achievementModuleC = null;
        this.guidePanel = null;
        this.adTips = null;
        this.petPanel = null;
        /**跳跃事件 */
        this.onJumpAction = new Action();
        /**背景音乐事件 */
        this.onMusicAction = new Action();
        /**打开排行榜的事件 */
        this.onOpenRankingAction = new Action();
        /**打开皮肤商店 */
        this.onSkinShopAction = new Action();
        /**打开关闭收集Panel */
        this.onOpenAndCloseCollectionPanelAction = new Action1();
        /**打开签到界面 */
        this.onOpenSignInAction = new Action();
        this.onOpenSignInAction1 = new Action();
        /**打开抽奖界面 */
        this.onOpenAdsAction = new Action();
        /**打开成就界面 */
        this.onOpenAchAction = new Action();
        /**打开宠物界面界面 */
        this.onOpenPetAction = new Action();
        /**打开宠物抽奖界面界面 */
        this.onOpenRaffleAction = new Action();
        /**当前播放的背景音乐 */
        this.currentBgmIndex = 1;
        /**背景音乐 */
        this.bgmMusics = [];
        /**全局UI点击音效唯一标识 */
        this.uiClickSoundId = null;
        this.cameraAnchorLen = 0;
        this.curCameraAnchorLen = 0;
        this.locs = [
            new mw.Vector(2430, 1560, 300),
            new mw.Vector(-1000, 1560, 300),
            new mw.Vector(-1926, 2580, 300),
            new mw.Vector(-2000, -570, 330),
            new mw.Vector(2400, 210, 300),
            new mw.Vector(-135, -1930, 280),
            new mw.Vector(-2500, 500, 400),
            new mw.Vector(-2500, -3000, 400),
            new mw.Vector(-15000, 15000, 2000),
            new mw.Vector(-3400, -600, 450),
            new mw.Vector(-9000, 15000, 2500),
            new mw.Vector(-11000, 14000, 500),
        ];
        this.rots = [
            new mw.Rotation(0, -10, 180),
            new mw.Rotation(0, -10, 0),
            new mw.Rotation(0, -10, 10),
            new mw.Rotation(0, -25, 25.5),
            new mw.Rotation(0, 30, 0),
            new mw.Rotation(0, 0, -90),
            new mw.Rotation(0, -45, 180),
            new mw.Rotation(0, -40, 180),
            new mw.Rotation(0, -20, 170),
            new mw.Rotation(0, -10, 180),
            new mw.Rotation(0, -26, 180),
            new mw.Rotation(0, -30, 150),
        ];
        /**玩家身上的相机 */
        this.camera = null;
        //#region  翅膀
        /**---------------------------------【翅膀】--------------------------------- */
        /**储存所有所有客户端的翅膀 */
        this.wingMap = new Map();
        /**飞行OR行走状态切换的事件 */
        this.onFlyOrWalkAction = new Action();
        /**是否可以飞 */
        this.isCanFly = true;
        /**是否正在飞行 */
        this.isFlying = false;
        /**---------------------------------【翅膀】--------------------------------- */
        //#endregion
        //#region 拖尾特效
        /**------------------------------【拖尾特效】------------------------------*/
        /**储存所有所有客户端的拖尾特效 */
        this.tailEffectMap = new Map();
        /**------------------------------【拖尾特效】------------------------------*/
        //#endregion
        //#region 攻击
        /**------------------------------【武器-攻击】------------------------------*/
        /**当前客户端所持有的武器ID */
        this.weaponId = 0;
        /**攻击事件 */
        // public onAttackAction: Action = new Action();
        /**更新当前武器CD */
        // public onUpdateAttackCD: Action1<number> = new Action1<number>();
        /**初始化武器数据 */
        // private initWeaponData(): void {
        //     let weapon = GameConfig.ColdWeapon.getElement(this.weaponId);
        //     this.baseAttackValue = weapon.hitDamage;
        // }
        /**攻击 */
        // private attack(): void {
        //     this.server.net_playAniEffSound(this.weaponId);
        //     let weapons = GameConfig.Weapon.getElement(this.weaponId);
        //     let attackDelayTime = weapons.AttackDelayTime;
        //     TimeUtil.delaySecond(Number(attackDelayTime)).then(() => {
        //         this.attackDetection(weapons);
        //     });
        //     this.localPlayer.character.movementEnabled = false;
        //     TimeUtil.delaySecond(Number(weapons.AttackTime)).then(() => {
        //         this.localPlayer.character.movementEnabled = true;
        //     });
        // }
        /**攻击检测 */
        // private attackDetection(weapons: IWeaponElement): void {
        //     let goList: mw.GameObject[] = [];
        //     let attackType = weapons.AttackType;
        //     switch (attackType) {
        //         case AttackType.RectangleDetection:
        //             goList = this.rectangleDetection(weapons);
        //             break;
        //         case AttackType.CircularDetection:
        //             goList = this.circularDetection(weapons);
        //             break;
        //         case AttackType.CylindricalDetection:
        //             goList = this.cylindricalDetection(weapons);
        //             break;
        //         default:
        //             Console.error("attackType = " + attackType + "|[检测类型数据出错了]");
        //             break;
        //     }
        //     Console.error("[len]:" + goList.length);
        //     if (goList.length == 0) return;
        //     let playerIds: number[] = [];
        //     let aiIds: string[] = [];
        //     for (const go of goList) {
        //         if (PlayerManagerExtesion.isCharacter(go)) {
        //             let char = go as mw.Character;
        //             let playerId = char.player.playerId;
        //             if (char.player.playerId == this.localPlayerId) continue;
        //             playerIds.push(playerId);
        //             this.flyText(weapons.HurtValue + this.curAttackValue, char.worldTransform.position, true);
        //         }
        //         if (!go || !go.gameObjectId) continue;
        //         if (go.tag == "Boss" && go instanceof mw.Character) {
        //             this.flyText(weapons.HurtValue + this.curAttackValue, go.worldTransform.position, true);
        //             PrefabEvent.PrefabEvtFight.hurt(this.localPlayer.userId, go.gameObjectId, weapons.HurtValue + this.curAttackValue);
        //         }
        //     }
        //     Console.error("[playerIds.Length] " + playerIds.length);
        //     if (playerIds.length == 0 && aiIds.length == 0) return;
        //     this.server.net_attackPlayer(playerIds, aiIds, weapons.ImpulseValue, weapons.HurtValue + this.curAttackValue, this.weaponId);
        // }
        this.exp = 0;
        this.maxHp = 100;
        this.baseAttackValue = 0;
        this.curAttackValue = 0;
        this.curMaxMoveSpeed = 0; //450
        this.curMaxFlySpeed = 0; //800
        this.curMaxJumpHeight = 0; //100
        //#endregion
        //#region jump
        this.currentJumpTime = 0;
        this.secondJumpAniID = "150691";
        this.grilStompingEffect = "132627";
        this.boyStompingEffect = "130743";
        this.landingEffects = ["89128", "89129", "89130"];
        this.landingEffectId = "89089";
        this.landingSoundId = "122568";
        this.girlJumpSoundId = "101208";
        this.boyJumpSoundId = "121734";
        this.isStartTime = false;
        this.playerScale = 1;
        //#endregion
        //#region 连杀提示
        this.killCountMap = new Map();
        this.revengePlayerIdMap = new Set();
        //#endregion
    }
    /** 当脚本被实例后，会在第一帧更新前调用此函数 */
    onStart() {
        this.initData();
        this.registerActions();
        this.registerEvents();
    }
    /**初始化数据 */
    initData() {
        this.hudPanel = mw.UIService.getUI(HUDPanel);
        this.shopModuleC = ModuleService.getModule(ShopModuleC);
        this.achievementModuleC = ModuleService.getModule(AchievementModuleC);
        this.adTips = mw.UIService.getUI(AdTips);
        this.petPanel = mw.UIService.getUI(PetPanel);
        this.bgmMusics = GameConfig.Music.getAllElement();
    }
    /**注册事件 */
    registerActions() {
        this.onJumpAction.add(this.playerJump.bind(this));
        this.hudPanel.onBgmAction.add((isOpenBGM) => {
            if (isOpenBGM) {
                this.playBGM(0);
            }
            else {
                SoundService.stopBGM();
            }
        });
        this.hudPanel.onSwitchBgmAction.add(this.playBGM.bind(this));
        this.onMusicAction.add(() => {
            if (this.hudPanel.mMusicCanvas.visibility == mw.SlateVisibility.SelfHitTestInvisible)
                return;
            this.hudPanel.mMusicCanvas.visibility = mw.SlateVisibility.SelfHitTestInvisible;
        });
        this.hudPanel.onRebirthAction.add(this.rebirthHome.bind(this));
        this.shopModuleC.onSwitchCameraAction.add((isOpenSkinShop) => {
            this.hudPanel.mJoystick.resetJoyStick();
            isOpenSkinShop ? this.hudPanel.hide() : this.hudPanel.show();
        });
        // this.onAttackAction.add(this.attack.bind(this));
        this.onFlyOrWalkAction.add(() => {
            this.switchToFlyingOrWalking();
        });
        this.onOpenAdsAction.add(this.ads.bind(this));
    }
    /**注册事件 */
    registerEvents() {
        Event.addLocalListener("IsCanFly", this.wingIsCanFly.bind(this));
    }
    onEnterScene(sceneType) {
        this.hudPanel.show();
        // this.hudPanel.mAttackMaskBtn.visibility = mw.SlateVisibility.Collapsed;
        this.registerGlobalClickSound();
        this.delayedOperation();
        // this.initWeaponData();
        this.initPlayerData();
        TimeUtil.delaySecond(10).then(() => {
            this.initGameGuide();
            this.pickUpWeapon(Utils.getRandomInteger(1, 3));
        });
    }
    onUpdate(dt) {
        this.updateJumpTime(dt);
    }
    /**延迟执行的测试用例 */
    delayedOperation() {
        TimeUtil.delaySecond(10).then(() => {
            this.playWaterSound();
            this.playBGM(0);
            if (GlobalData.isHideHeadUI) {
                this.localPlayer.character.displayName = "";
            }
            if (GlobalData.isOpenTest) {
                mw.UIService.getUI(Test).show();
            }
        });
    }
    /**注册全局点击音效 */
    registerGlobalClickSound() {
        /**全局UI点击音效 */
        Event.addLocalListener("PlayButtonClick", () => {
            if (this.uiClickSoundId) {
                // Console.error("[停止上一次的点击音效]");
                SoundService.stopSound(this.uiClickSoundId);
                this.uiClickSoundId = null;
            }
            this.uiClickSoundId = SoundService.playSound(GlobalData.uiClickSoundGuid);
        });
    }
    /**播放水声 */
    playWaterSound() {
        let worldPos = [
            new mw.Vector(1000, -1435, 50),
            new mw.Vector(1000, -685, 50),
            new mw.Vector(600, -1060, 50),
            new mw.Vector(1360, -1060, 50)
        ];
        for (let i = 0; i < worldPos.length; ++i) {
            SoundService.play3DSound(GlobalData.waterSoundGuid, worldPos[i], 0, 1);
        }
    }
    /**播放背景音乐 */
    playBGM(bgmIndex) {
        this.currentBgmIndex = this.currentBgmIndex + bgmIndex;
        if (this.currentBgmIndex > this.bgmMusics.length) {
            this.currentBgmIndex = 1;
        }
        else if (this.currentBgmIndex < 1) {
            this.currentBgmIndex = this.bgmMusics.length;
        }
        let bgmId = this.bgmMusics[this.currentBgmIndex - 1].Guid;
        SoundService.playBGM(bgmId);
        this.hudPanel.mMusicText.text = this.bgmMusics[this.currentBgmIndex - 1].Annotation;
        this.achievementModuleC.onExecuteAchievementAction.call(16, 1);
    }
    /**显示时间 */
    showTime(time) {
        if (!this.hudPanel || !this.hudPanel.mTimeText)
            return;
        this.hudPanel.mTimeText.text = time;
    }
    net_rebirthHome() {
        this.rebirthHome();
        Notice.showDownNotice("获得5秒无敌防御");
    }
    /**回家 */
    rebirthHome() {
        let index = Utils.getRandomInteger(0, 3);
        this.localPlayer.character.worldTransform.position = GlobalData.homeLocs[index];
        this.localPlayer.character.worldTransform.rotation = GlobalData.homeRots[index];
        Camera.currentCamera.worldTransform.clone().rotation = GlobalData.homeRots[index];
        this.shopModuleC.playEffectAndSoundToPlayer(2);
        // this.hudPanel.mAttackMaskBtn.visibility = mw.SlateVisibility.Collapsed;
    }
    /**随机传送 */
    randomPortal() {
        let index = Utils.getRandomInteger(0, 3);
        this.localPlayer.character.worldTransform.position = GlobalData.portalLocs[index];
        this.shopModuleC.playEffectAndSoundToPlayer(2);
        // this.hudPanel.mAttackMaskBtn.visibility = mw.SlateVisibility.Visible;
    }
    /**初始化游戏引导 */
    async initGameGuide() {
        if (this.shopModuleC == null) {
            this.shopModuleC = ModuleService.getModule(ShopModuleC);
        }
        if (this.shopModuleC.getIsFirstGame()) {
            // this.cameraAnchorLen = this.locs.length;
            // this.guidePanel = mw.UIService.getUI(GuidePanel);
            // this.guidePanel.show();
            // let myCamera = Camera.currentCamera;
            // let cameraArray = new Array<Camera>();
            // for (let i = 0; i < this.cameraAnchorLen; ++i) {
            //     let camera = await GameObject.asyncSpawn("Camera") as Camera;
            //     camera.worldTransform.position = this.locs[i];
            //     cameraArray.push(camera);
            //     camera.onSwitchComplete.add(() => {
            //         Console.log("当前摄像机序号 " + i);
            //         this.curCameraAnchorLen = i;
            //     });
            // }
            // this.guidePanel.onNextAction.add(() => {
            //     if (this.curCameraAnchorLen > this.cameraAnchorLen) return;
            //     // this.nextCamerTransform();
            //     if (this.curCameraAnchorLen >= this.cameraAnchorLen) {
            //         Camera.switch(myCamera);
            //         this.shopModuleC.completeGameGuide();
            //         this.curCameraAnchorLen++;
            //         return;
            //     }
            //     Camera.switch(cameraArray[this.curCameraAnchorLen++], 1, mw.CameraSwitchBlendFunction.Linear);
            // });
            this.onOpenPetAction.call();
            this.onOpenSignInAction1.call();
            ModuleService.getModule(CollectionModuleC).startGuide(2);
            this.firstGame();
            this.setCurAttackValue(500);
            this.setMaxHp(10000);
            TimeUtil.delaySecond(1).then(() => {
                this.shopModuleC.completeGameGuide();
            });
        }
        else {
            this.onOpenAchAction.call();
            this.onOpenPetAction.call();
            this.onOpenSignInAction1.call();
        }
    }
    /**拿到相机 */
    get getCamera() {
        if (this.camera == null) {
            this.camera = Camera.currentCamera;
        }
        return this.camera;
    }
    /**下一个游戏视角 */
    nextCamerTransform() {
        if (this.curCameraAnchorLen >= this.cameraAnchorLen) {
            // this.getCamera.parent = (this.currentPlayer.character);
            this.getCamera.rotationMode = mw.CameraRotationMode.RotationControl;
            this.getCamera.positionMode = mw.CameraPositionMode.PositionFollow;
            let transform = new mw.Transform();
            transform.position = new mw.Vector(0, 0, 85);
            transform.rotation = new mw.Rotation(0, 0, 0);
            this.getCamera.localTransform = transform;
            this.localPlayer.character.addMovement(this.localPlayer.character.worldTransform.getForwardVector());
            this.shopModuleC.completeGameGuide();
            this.curCameraAnchorLen++;
            return;
        }
        if (this.curCameraAnchorLen == 0) {
            this.getCamera.rotationMode = mw.CameraRotationMode.RotationFixed;
            this.getCamera.positionMode = mw.CameraPositionMode.PositionFixed;
        }
        let transform = new mw.Transform();
        transform.position = this.locs[this.curCameraAnchorLen];
        transform.rotation = this.rots[this.curCameraAnchorLen++];
        this.getCamera.localTransform = transform;
    }
    /**本客户端进入游戏同步其他客户端数据 */
    net_enterGameSnycData(wingPlayerIds, wingIds, tailEffectplayerIds, tailEffectIds /*,
    weaponPlayerIds: number[], weaponIds: number[]*/) {
        if (wingPlayerIds.length > 0) {
            this.syncWing(wingPlayerIds, wingIds);
        }
        if (tailEffectplayerIds.length > 0) {
            this.snycTailEffect(tailEffectplayerIds, tailEffectIds);
        }
        // if (weaponPlayerIds.length < 0) {
        //     this.syncWeaponData(weaponPlayerIds, weaponIds);
        // }
    }
    /**某个客户端玩家离开游戏同步给其他客户端 */
    net_exitGameSyncData(playerId) {
        this.exitGameDeleteWing(playerId);
        this.exitGameDeletetailEffect(playerId);
        // this.exitGameDeleteWeapon(playerId);
    }
    /**拾取翅膀 */
    pickUpWing(id) {
        this.achievementModuleC.onExecuteAchievementAction.call(14, 1);
        this.server.net_pickWing(id);
        this.shopModuleC.useWingCloseShopPanel();
        if (this.hudPanel.mFlyCanvas.visibility == mw.SlateVisibility.Collapsed && id > 1) {
            this.onFlyOrWalkAction.call();
            this.hudPanel.mFlyCanvas.visibility = mw.SlateVisibility.SelfHitTestInvisible;
        }
        else if (this.hudPanel.mFlyCanvas.visibility == mw.SlateVisibility.SelfHitTestInvisible && id == 1) {
            this.hudPanel.mFlyCanvas.visibility = mw.SlateVisibility.Collapsed;
        }
    }
    /**拾取翅膀（所有客户端） */
    net_pickUpWing(playerId, id) {
        this.equipWing(playerId, id);
    }
    /**玩家离开游戏删除翅膀 */
    exitGameDeleteWing(playerId) {
        if (this.wingMap.has(playerId)) {
            EffectService.stop(this.wingMap.get(playerId));
            this.wingMap.delete(playerId);
        }
    }
    /**装备翅膀 */
    async equipWing(playerId, id) {
        let effectId = null;
        if (this.wingMap.has(playerId)) {
            effectId = this.wingMap.get(playerId);
            EffectService.stop(effectId);
        }
        let wing = GameConfig.Wing.getElement(id);
        if (wing.WingGuid == null)
            return;
        let player = await Player.asyncGetPlayer(playerId);
        effectId = GeneralManager.rpcPlayEffectOnPlayer(wing.WingGuid, player, mw.HumanoidSlotType.BackOrnamental, 0, wing.WingOffset, new mw.Rotation(wing.WingRotation), wing.WingScale);
        this.wingMap.set(playerId, effectId);
    }
    /**本客户端同步其他客户端的翅膀数据 */
    syncWing(wingPlayerIds, wingIds) {
        let playerCount = wingPlayerIds.length;
        --playerCount;
        this.equipWing(wingPlayerIds[playerCount], wingIds[playerCount]);
        let intervalId = TimeUtil.setInterval(() => {
            --playerCount;
            if (playerCount < 0) {
                TimeUtil.clearInterval(intervalId);
                return;
            }
            this.equipWing(wingPlayerIds[playerCount], wingIds[playerCount]);
            Console.error("[我看看你执行几次]");
        }, 0.1);
    }
    /**是否可以飞 */
    get IsCanFly() {
        return this.isCanFly;
    }
    /**是否可以飞 */
    set IsCanFly(isCanFly) {
        this.isCanFly = isCanFly;
    }
    /**是否正在飞行 */
    get IsFlying() {
        return this.isFlying;
    }
    /**是否正在飞行 */
    set IsFlying(isFlying) {
        this.isFlying = isFlying;
    }
    /**切换飞行或行走状态 */
    switchToFlyingOrWalking() {
        this.localPlayer.character.switchToFlying();
        this.hudPanel.updateFlyCD();
        TimeUtil.delaySecond(GlobalData.wingFlyTime).then(() => {
            this.localPlayer.character.switchToWalking();
            this.hudPanel.updateFlyButtonCD();
        });
    }
    /**翅膀是否可以使用 */
    wingIsCanFly(isCanFly) {
        this.IsCanFly = isCanFly;
    }
    /**拾取拖尾特效 */
    pickUptailEffect(id) {
        this.achievementModuleC.onExecuteAchievementAction.call(15, 1);
        this.shopModuleC.useTailCloseShopPanel();
        this.server.net_pickTailEffect(id);
    }
    /**拾取拖尾特效（所有客户端） */
    net_pickUpTailEffect(playerId, id) {
        this.equiptailEffect(playerId, id);
    }
    /**玩家进入游戏同步其他玩家身上的拖尾特效 */
    snycTailEffect(tailEffectplayerIds, tailEffectIds) {
        let playerCount = tailEffectplayerIds.length;
        --playerCount;
        this.equiptailEffect(tailEffectplayerIds[playerCount], tailEffectIds[playerCount]);
        let intervalId = TimeUtil.setInterval(() => {
            --playerCount;
            if (playerCount < 0) {
                TimeUtil.clearInterval(intervalId);
                return;
            }
            this.equiptailEffect(tailEffectplayerIds[playerCount], tailEffectIds[playerCount]);
            Console.error("[我看看你执行几次]");
        }, 0.1);
    }
    /**玩家离开游戏删除拖尾特效 */
    exitGameDeletetailEffect(playerId) {
        if (this.tailEffectMap.has(playerId)) {
            EffectService.stop(this.tailEffectMap.get(playerId));
            this.tailEffectMap.delete(playerId);
        }
    }
    /**装备拖尾特效 */
    async equiptailEffect(playerId, id) {
        let effectId = null;
        if (this.tailEffectMap.has(playerId)) {
            effectId = this.tailEffectMap.get(playerId);
            EffectService.stop(effectId);
        }
        let tail = GameConfig.Tail.getElement(id);
        if (tail.TailGuid == null)
            return;
        let player = await Player.asyncGetPlayer(playerId);
        effectId = GeneralManager.rpcPlayEffectOnPlayer(tail.TailGuid, player, mw.HumanoidSlotType.BackOrnamental, 0, tail.TailOffset, new mw.Rotation(tail.TailRotation), tail.TailScale);
        this.tailEffectMap.set(playerId, effectId);
    }
    flyText(damage, hitPoint, isSelf = false) {
        let fontColor = Utils.randomColor();
        FlyText.instance.showFlyText("-" + damage, hitPoint, fontColor[0], fontColor[1]);
        if (!isSelf)
            return;
        ExplosiveCoins.instance.explosiveCoins(new mw.Vector(hitPoint.x, hitPoint.y, hitPoint.z / 2), damage, Utils.getRandomInteger(5, 10));
        this.exp++;
        this.hudPanel.mExpProgressBar.currentValue = this.exp / 50;
        if (this.exp >= 50) {
            this.exp = 0;
            this.server.net_addLevel();
            this.setCurAttackValue(50);
            this.setMaxHp(500);
            this.shopModuleC.playEffectAndSoundToPlayer(1);
        }
    }
    net_FlyText(hp) {
        this.flyText(hp, this.localPlayer.character.worldTransform.position);
    }
    net_flyText(damage, hitPoint) {
        let fontColor = Utils.randomColor();
        FlyText.instance.showFlyText("-" + damage, hitPoint, fontColor[0], fontColor[1]);
    }
    net_onSelfAtkPlayer(damage, hitPoint) {
        Console.error("net_onSelfAtkPlayer");
        let fontColor = Utils.randomColor();
        FlyText.instance.showFlyText("-" + damage, hitPoint, fontColor[0], fontColor[1]);
    }
    /**矩形检测 */
    // private rectangleDetection(weapons: IWeaponElement): mw.GameObject[] {
    //     let startLocation = this.localPlayer.character.worldTransform.position;
    //     let forwardVector = this.localPlayer.character.worldTransform.getForwardVector();
    //     let forwardMultiply = forwardVector.multiply(weapons.AttackRange[0]);
    //     let endLocation = new mw.Vector(startLocation.x + forwardMultiply.x, startLocation.y + forwardMultiply.y, startLocation.z + forwardMultiply.z);
    //     let goList = GeneralManager.modiftboxOverlap(startLocation, endLocation, weapons.AttackRange[1], weapons.AttackRange[2], mw.SystemUtil.isPIE);
    //     return goList;
    // }
    /**圆形检测 */
    // private circularDetection(weapons: IWeaponElement): mw.GameObject[] {
    //     let playerLoc = this.localPlayer.character.worldTransform.position;
    //     let forwardVector = this.localPlayer.character.worldTransform.getForwardVector();
    //     let forwardMultiply = forwardVector.multiply(weapons.AttackRange[0]);
    //     let startLocation = new mw.Vector(playerLoc.x + forwardMultiply.x, playerLoc.y + forwardMultiply.y, playerLoc.z + forwardMultiply.z + weapons.AttackRange[1]);
    //     let goList = QueryUtil.sphereOverlap(startLocation, weapons.AttackRange[2], mw.SystemUtil.isPIE);
    //     return goList;
    // }
    /**圆柱形检测 */
    // private cylindricalDetection(weapons: IWeaponElement): mw.GameObject[] {
    //     let playerLoc = this.localPlayer.character.worldTransform.position;
    //     let forwardVector = this.localPlayer.character.worldTransform.getForwardVector();
    //     let forwardMultiply = forwardVector.multiply(weapons.AttackRange[0]);
    //     let startLocation = new mw.Vector(playerLoc.x + forwardMultiply.x, playerLoc.y + forwardMultiply.y, playerLoc.z + forwardMultiply.z);
    //     let goList = QueryUtil.capsuleOverlap(startLocation, weapons.AttackRange[1], weapons.AttackRange[2], mw.SystemUtil.isPIE);
    //     return goList;
    // }
    /**播放攻击动画、特效、音效（服务端同步给所有客户端执行某个客户端的攻击表现） */
    // public net_playAniEffSound(playerId: number, weaponId: number): void {
    // this.playAniEffSound_StoC(playerId, weaponId);
    // }
    /**播放攻击动画、特效、音效（服务端同步给所有客户端执行某个客户端的攻击表现） */
    // private async playAniEffSound_StoC(playerId: number, weaponId: number): Promise<void> {
    //     let player = await Player.asyncGetPlayer(playerId);
    //     let weapons = GameConfig.Weapon.getElement(weaponId);
    //     if (!weapons.AttackAnimationId) return;
    //     if (player && player.character) player.character.loadAnimation(weapons.AttackAnimationId).play();
    //     let startLocation = player.character.worldTransform.position;
    //     let forwardVector = player.character.worldTransform.getForwardVector();
    //     let forwardMultiply = forwardVector.multiply(weapons.EffectOffset);
    //     let offset = new mw.Vector(startLocation.x + forwardMultiply.x, startLocation.y + forwardMultiply.y, startLocation.z + forwardMultiply.z);
    //     let tmpRot = new mw.Rotation(forwardVector, mw.Vector.zero);
    //     let rot = new mw.Rotation(tmpRot.x + weapons.EffectRot.x, tmpRot.y + weapons.EffectRot.y, tmpRot.z + weapons.EffectRot.z);
    //     TimeUtil.delaySecond(Number(weapons.AttackDelayTime)).then(async () => {
    //         GeneralManager.rpcPlayEffectAtLocation(
    //             weapons.AttackEffectId,
    //             offset,
    //             1,
    //             rot,
    //             weapons.EffectScale
    //         );
    //         SoundService.play3DSound(weapons.AttackSound, player.character);
    //     });
    // }
    /**播放受击特效 */
    // public net_playHitEffect(playerIds: number[], weaponId: number): void {
    // this.playHitEffect_StoC(playerIds, weaponId);
    // }
    /**播放受击特效 */
    // public async playHitEffect_StoC(playerIds: number[], weaponId: number): Promise<void> {
    //     let weapon = GameConfig.Weapon.getElement(weaponId);
    //     for (const playerId of playerIds) {
    //         let player = await Player.asyncGetPlayer(playerId);
    //         GeneralManager.rpcPlayEffectOnPlayer(
    //             weapon.HitEffect,
    //             player,
    //             mw.HumanoidSlotType.Root,
    //             1,
    //             weapon.HitEffectOffset,
    //             new mw.Rotation(weapon.HitEffectRot),
    //             weapon.HitEffectScale
    //         );
    //         if (weapon.HitSound == null ||
    //             player == undefined || player == null ||
    //             player.character == undefined || player.character == null) continue;
    //         SoundService.play3DSound(
    //             weapon.HitSound,
    //             player.character,
    //             1,
    //             10000
    //         );
    //     }
    // }
    //#endregion
    //#region 武器拾取
    /**每个客户端都存储所有玩家的武器 */
    // private weaponModelMap: Map<number, mw.GameObject> = new Map<number, mw.GameObject>();
    /**拾取武器 */
    pickUpWeapon(id) {
        if (this.weaponId == id)
            return;
        this.weaponId = id;
        const userInstance = ColdWeapon.getInstance();
        userInstance.register(GameConfig.ColdWeapon.getElement(id));
        Notice.showDownNotice("使用成功");
        // let weapon = GameConfig.ColdWeapon.getElement(id);
        // this.onUpdateAttackCD.call(Number(weapon.WeaponCD));
        // this.baseAttackValue = weapon.HurtValue;
        // this.hudPanel.mAttackText.text = "攻击力：" + (this.baseAttackValue + this.curAttackValue);
        // this.achievementModuleC.onExecuteAchievementAction.call(12, 1);
        // this.shopModuleC.useWeaponCloseShopPanel();
        // this.server.net_pickUpWeapon(id);
    }
    /**拾取武器（服务端通知所有客户端） */
    // public net_pickUpWeapon(playerId: number, id: number): void {
    //     this.destoryWeapon(playerId);
    //     this.spawnWeapon(playerId, id);
    // }
    /**进入房间的玩家同步其他玩家所持有武器数据(服务端通知本客户端) */
    // private syncWeaponData(weaponPlayerIds: number[], weaponIds: number[]): void {
    //     if (weaponPlayerIds.length == 0) return;
    //     for (let i = 0; i < weaponPlayerIds.length; ++i) {
    //         let player = Player.getPlayer(weaponPlayerIds[i]);
    //         let playerId = player.playerId;
    //         this.spawnWeapon(playerId, weaponIds[i]);
    //     }
    // }
    /**离开房间的玩家同步其他玩家所持有武器数据(服务端通知所有客户端) */
    // private exitGameDeleteWeapon(playerId: number): void {
    //     this.destoryWeapon(playerId);
    // }
    /**销毁武器 */
    // private destoryWeapon(playerId: number): void {
    //     if (this.weaponModelMap.has(playerId)) {
    //         mwext.GameObjPool.despawn(this.weaponModelMap.get(playerId));
    //         this.weaponModelMap.delete(playerId);
    //     }
    // }
    /**生成武器 */
    // private spawnWeapon(playerId: number, id: number): void {
    //     let modelGuid = GameConfig.Weapon.getElement(id).WeaponGuid;
    //     if (!modelGuid) return;
    //     let weaponModel = SpawnManager.modifyPoolSpawn(modelGuid);
    //     weaponModel.asyncReady().then(async () => {
    //         let player = await Player.asyncGetPlayer(playerId);
    //         if (!player.character) return;
    //         player.character.attachToSlot(weaponModel, mw.HumanoidSlotType.RightHand);
    //         weaponModel.localTransform.position = (mw.Vector.zero);
    //         weaponModel.localTransform.rotation = (mw.Rotation.zero);
    //         weaponModel.worldTransform.scale = (mw.Vector.one);
    //         this.weaponModelMap.set(playerId, weaponModel);
    //         Console.error("playerId = " + playerId + " 的玩家已使用guid = " + modelGuid + " 的武器");
    //     });
    // }
    /**------------------------------【武器】------------------------------*/
    //#endregion
    //#region 属性
    ads() {
        if (GlobalData.isOpenIAA) {
            this.adTips.showAdTips(1, AdType.AdsReward);
        }
        else {
            this.adsReward();
        }
    }
    adsReward() {
        let index = Utils.getRandomInteger(0, 4);
        switch (index) {
            case 0:
                this.setCurAttackValue(100);
                break;
            case 1:
                this.setMaxHp(500);
                break;
            case 2:
                this.setMaxMoveSpeed(25);
                break;
            case 3:
                this.setMaxFlySpeed(25);
                break;
            case 4:
                this.setMaxJumpHeight(25);
                break;
        }
        this.achievementModuleC.ach(1);
        this.server.net_addLevel();
        this.shopModuleC.playEffectAndSoundToPlayer(1);
    }
    firstGame() {
        this.server.net_addLevel1();
        this.shopModuleC.playEffectAndSoundToPlayer(1);
    }
    firstGame2() {
        this.server.net_addLevel2();
        this.shopModuleC.playEffectAndSoundToPlayer(1);
    }
    addLv(lv) {
        this.server.net_addLevel3(lv);
        this.shopModuleC.playEffectAndSoundToPlayer(1);
    }
    net_killAch() {
        this.achievementModuleC.onExecuteAchievementAction.call(5, 1);
    }
    get getAtk() {
        return this.curAttackValue;
    }
    /**初始化玩家数据 */
    initPlayerData() {
        this.curMaxMoveSpeed = this.localPlayer.character.maxWalkSpeed;
        this.curMaxFlySpeed = this.localPlayer.character.maxFlySpeed;
        this.curMaxJumpHeight = this.localPlayer.character.maxJumpHeight;
        this.maxHp = this.data.maxHp;
        this.curAttackValue = this.data.hurt;
        this.initPlayerHUDPanel();
    }
    /**初始化HUDPanel */
    initPlayerHUDPanel() {
        this.hudPanel.mHpText.text = "最大生命值：" + this.maxHp;
        this.hudPanel.mAttackText.text = "攻击力：" + (this.baseAttackValue + this.curAttackValue);
        this.hudPanel.mMoveSpeedText.text = "移动速度：" + this.curMaxMoveSpeed;
        this.hudPanel.mFlySpeedText.text = "飞行速度：" + this.curMaxFlySpeed;
        this.hudPanel.mJumpHeightText.text = "跳跃高度：" + this.curMaxJumpHeight;
    }
    /**设置最大血量 */
    setMaxHp(hpValue) {
        // if (this.maxHp >= 999) return;
        this.maxHp += hpValue;
        this.hudPanel.mHpText.text = "最大生命值：" + this.maxHp;
        this.shopModuleC.playEffectAndSoundToPlayer(3);
        this.server.net_setMaxHp(this.maxHp);
    }
    /**设置当前血量 */
    setCurHp(curHp) {
        this.shopModuleC.playEffectAndSoundToPlayer(3);
        this.server.net_setCurHp(curHp);
    }
    /**设置当前攻击力 */
    setCurAttackValue(curAttackValue) {
        // if (this.curAttackValue >= 999) return;
        this.curAttackValue += curAttackValue;
        this.hudPanel.mAttackText.text = "攻击力：" + (this.baseAttackValue + this.curAttackValue);
        this.shopModuleC.playEffectAndSoundToPlayer(3);
        this.server.net_setCurAttackValue(this.curAttackValue);
    }
    /**设置最大移动速度 */
    setMaxMoveSpeed(addMoveSpeed) {
        if (this.curMaxMoveSpeed >= 999)
            return;
        this.curMaxMoveSpeed += addMoveSpeed;
        this.hudPanel.mMoveSpeedText.text = "移动速度：" + this.curMaxMoveSpeed;
        this.localPlayer.character.maxWalkSpeed = this.curMaxMoveSpeed;
        this.shopModuleC.playEffectAndSoundToPlayer(3);
    }
    /**设置最大飞行速度 */
    setMaxFlySpeed(addFlySpeed) {
        if (this.curMaxFlySpeed >= 1500)
            return;
        this.curMaxFlySpeed += addFlySpeed;
        this.hudPanel.mFlySpeedText.text = "飞行速度：" + this.curMaxFlySpeed;
        this.localPlayer.character.maxFlySpeed = this.curMaxFlySpeed;
        this.shopModuleC.playEffectAndSoundToPlayer(3);
    }
    /**设置最大跳跃高度 */
    setMaxJumpHeight(addJumpHeight) {
        if (this.curMaxJumpHeight >= 999)
            return;
        this.curMaxJumpHeight += addJumpHeight;
        this.hudPanel.mJumpHeightText.text = "跳跃高度：" + this.curMaxJumpHeight;
        this.localPlayer.character.maxJumpHeight = this.curMaxJumpHeight;
        this.shopModuleC.playEffectAndSoundToPlayer(3);
    }
    /**
     * 更新跳跃状态
     * @param dt
     * @returns
     */
    updateJumpTime(dt) {
        if (!this.isStartTime)
            return;
        if (!this.localPlayer.character.isJumping) {
            this.currentJumpTime = 0;
            this.isStartTime = false;
            let effectId = this.landingEffects[Utils.getRandomInteger(0, 2)];
            let startLoc = this.localPlayer.character.worldTransform.position;
            let capsuleHalfHeight = this.localPlayer.character.collisionExtent.z / 2;
            let effectOffset = new mw.Vector(startLoc.x, startLoc.y, startLoc.z - capsuleHalfHeight * this.playerScale);
            this.server.net_playLandEffectAndSound([effectId, this.landingEffectId], effectOffset, this.landingSoundId, this.playerScale);
        }
    }
    /**
     * JUmp
     * @returns
     */
    playerJump() {
        if (this.localPlayer.character.isJumping && this.currentJumpTime >= 2)
            return;
        this.currentJumpTime++;
        if (this.currentJumpTime == 2) {
            PlayerManagerExtesion.rpcPlayAnimation(this.localPlayer.character, this.secondJumpAniID, 1);
            let stompingEffectId = "";
            let soundId = "";
            if (this.IsGirl()) {
                soundId = this.girlJumpSoundId;
                stompingEffectId = this.grilStompingEffect;
            }
            else {
                soundId = this.boyJumpSoundId;
                stompingEffectId = this.boyStompingEffect;
            }
            this.server.net_playStompingEffectAndSound(stompingEffectId, soundId, this.playerScale);
        }
        this.localPlayer.character.jump();
        this.isStartTime = true;
    }
    /**
     * 判断是否是女
     * @returns
     */
    IsGirl() {
        let somatotype = Player.localPlayer.character.description.advance.base.characterSetting.somatotype;
        if (somatotype == mw.SomatotypeV2.AnimeFemale
            || somatotype == mw.SomatotypeV2.LowpolyAdultFemale
            || somatotype == mw.SomatotypeV2.RealisticAdultFemale
            || somatotype == mw.SomatotypeV2.CartoonyFemale)
            return true;
        return false;
    }
    //#endregion
    //#region 击杀提示
    net_killTip(killerPlayerId, killerName, killedPlayerId, killedName) {
        let killTipType = KillTipType.None;
        if (killerPlayerId == this.localPlayer.playerId) {
            killTipType = KillTipType.Killer;
        }
        else if (killedPlayerId == this.localPlayer.playerId) {
            killTipType = KillTipType.Killed;
        }
        this.hudPanel.killTip(killTipType, killerName, killedName);
        this.killTipsSound(killerPlayerId, killerName, killedPlayerId, killedName);
    }
    killTipsSound(killerPlayerId, killerName, killedPlayerId, killedName) {
        let killTipType = KillTipType.None;
        if (killedPlayerId == this.localPlayer.playerId) {
            killTipType = KillTipType.Killed;
            if (!this.revengePlayerIdMap.has(killerPlayerId))
                this.revengePlayerIdMap.add(killerPlayerId);
            SoundService.playSound("294343", 1);
        }
        else if (killerPlayerId == this.localPlayer.playerId && this.revengePlayerIdMap.has(killedPlayerId)) {
            killTipType = KillTipType.revenge;
            this.revengePlayerIdMap.delete(killedPlayerId);
            SoundService.playSound("294342", 1);
        }
        this.hudPanel.showKillTips2(killerName, killedName, killTipType);
        if (this.killCountMap.has(killedPlayerId))
            this.killCountMap.delete(killedPlayerId);
        let killCount = 0;
        if (this.killCountMap.has(killerPlayerId)) {
            killCount = this.killCountMap.get(killerPlayerId);
        }
        killCount++;
        this.killCountMap.set(killerPlayerId, killCount);
        if (killCount <= 1)
            return;
        let soundId = "";
        let killCountTips = "";
        switch (killCount) {
            case 2:
                soundId = "65877";
                killCountTips = "连续消灭2人！势不可当！";
                break;
            case 3:
                soundId = "65874";
                killCountTips = "连续消灭3人！勇冠三军！";
                break;
            case 4:
                soundId = "65873";
                killCountTips = "连续消灭4人！无人能敌！";
                break;
            case 5:
                soundId = "65881";
                killCountTips = "连续消灭5人！横扫千军！";
                break;
            case 6:
                soundId = "65871";
                killCountTips = "连续消灭6人！接近神了！";
                break;
            case 7:
                soundId = "65879";
                killCountTips = "连续消灭7人！超越神了！";
                break;
            default:
                soundId = "65879";
                killCountTips = "连续消灭" + Utils.numChangeToCN(killCount) + "人！超越神了！";
                break;
        }
        SoundService.playSound(soundId, 1);
        this.hudPanel.showKillTips1(killCountTips, killerName, killedName);
    }
}
var AttackType;
(function (AttackType) {
    /**矩形检测 */
    AttackType[AttackType["RectangleDetection"] = 1] = "RectangleDetection";
    /**圆形检测 */
    AttackType[AttackType["CircularDetection"] = 2] = "CircularDetection";
    /**圆柱形检测 */
    AttackType[AttackType["CylindricalDetection"] = 3] = "CylindricalDetection";
})(AttackType || (AttackType = {}));
class KillTipData {
}
var KillTipType;
(function (KillTipType) {
    KillTipType[KillTipType["None"] = 0] = "None";
    KillTipType[KillTipType["Killer"] = 1] = "Killer";
    KillTipType[KillTipType["Killed"] = 2] = "Killed";
    KillTipType[KillTipType["revenge"] = 3] = "revenge";
})(KillTipType || (KillTipType = {}));

var foreign76 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    KillTipData: KillTipData,
    get KillTipType () { return KillTipType; },
    default: HUDModuleC
});

class Achievement {
    constructor(achId, progress, isOnComplete, isTips) {
        this.achId = achId;
        this.progress = progress;
        this.isOnComplete = isOnComplete;
        this.isTips = isTips;
    }
}
class AchievementData extends Subdata {
    constructor() {
        super(...arguments);
        this.isFirstAch = true;
    }
    initDefaultData() {
        this.achievementStage = {};
        this.isFirstAch = true;
    }
    /**
     * 保存成就数据
     */
    async saveAchievementStage(achievementId, achievementType, progress, isOnComplete) {
        let nextId = GameConfig.Achievements.getElement(achievementId).NextId;
        let achievement = null;
        if (this.achievementStage[achievementType]) {
            achievement = this.achievementStage[achievementType];
            if (isOnComplete) {
                if (nextId != 0) {
                    achievement.achId = nextId;
                    achievement.progress = progress;
                    achievement.isOnComplete = false;
                    achievement.isTips = [false, false, false, false];
                }
                else {
                    achievement.isOnComplete = true;
                }
            }
            else {
                achievement.progress = progress;
            }
        }
        else {
            if (isOnComplete) {
                if (nextId != 0) {
                    achievement = new Achievement(nextId, progress, false, [false, false, false, false]);
                }
                else {
                    achievement = new Achievement(achievementId, progress, true, [true, true, true, true]);
                }
            }
            else {
                achievement = new Achievement(achievementId, progress, false, [false, false, false, false]);
            }
        }
        this.achievementStage[achievementType] = achievement;
        await this.save(true);
    }
    /**
     * 保存成就提示
     * @param achievementType 成就类型
     * @param isTipsIndex 提示索引
     */
    async saveAchievementTipStage(achievementType, isTipsIndex) {
        if (this.achievementStage[achievementType]) {
            let achievement = this.achievementStage[achievementType];
            achievement.isTips[isTipsIndex] = true;
            this.achievementStage[achievementType] = achievement;
            await this.save(true);
        }
    }
    saveFirstAch(value) {
        this.isFirstAch = value;
        this.save(true);
    }
}
__decorate([
    Decorator.persistence()
], AchievementData.prototype, "achievementStage", void 0);
__decorate([
    Decorator.persistence()
], AchievementData.prototype, "isFirstAch", void 0);

var foreign54 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    Achievement: Achievement,
    default: AchievementData
});

/**
 * AUTO GENERATE BY UI EDITOR.
 * WARNING: DO NOT MODIFY THIS FILE,MAY CAUSE CODE LOST.
 * AUTHOR: 爱玩游戏的小胖子
 * UI: UI/module/Achievement/AchievementMain.ui
 * TIME: 2024.08.04-18.39.53
 */
let AchievementMain_Generate = class AchievementMain_Generate extends UIScript {
    get mScrollBox() {
        if (!this.mScrollBox_Internal && this.uiWidgetBase) {
            this.mScrollBox_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/Canvas/mScrollBox');
        }
        return this.mScrollBox_Internal;
    }
    get mContentCanvas() {
        if (!this.mContentCanvas_Internal && this.uiWidgetBase) {
            this.mContentCanvas_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/Canvas/mScrollBox/mContentCanvas');
        }
        return this.mContentCanvas_Internal;
    }
    get mCloseButton() {
        if (!this.mCloseButton_Internal && this.uiWidgetBase) {
            this.mCloseButton_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/Canvas/mCloseButton');
        }
        return this.mCloseButton_Internal;
    }
    get mRecycleCanvas() {
        if (!this.mRecycleCanvas_Internal && this.uiWidgetBase) {
            this.mRecycleCanvas_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mRecycleCanvas');
        }
        return this.mRecycleCanvas_Internal;
    }
    onAwake() {
        //设置能否每帧触发onUpdate
        this.canUpdate = false;
        this.layer = mw.UILayerBottom;
        this.initButtons();
    }
    initButtons() {
        //按钮添加点击
        //按钮添加点击
        this.mCloseButton.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick", "mCloseButton");
        });
        this.mCloseButton.touchMethod = (mw.ButtonTouchMethod.PreciseTap);
        //按钮多语言
        //文本多语言
        //文本多语言
        this.initLanguage(this.uiWidgetBase.findChildByPath("RootCanvas/TextBlock"));
    }
    /*初始化多语言*/
    initLanguage(ui) {
        let call = mw.UIScript.getBehavior("lan");
        if (call && ui) {
            call(ui);
        }
    }
    onShow(...params) { }
    ;
    /*显示panel*/
    show(...param) {
        mw.UIService.showUI(this, this.layer, ...param);
    }
    /*隐藏panel*/
    hide() {
        mw.UIService.hideUI(this);
    }
};
AchievementMain_Generate = __decorate([
    UIBind('UI/module/Achievement/AchievementMain.ui')
], AchievementMain_Generate);
var AchievementMain_Generate$1 = AchievementMain_Generate;

var foreign122 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: AchievementMain_Generate$1
});

class AchievementPanel extends AchievementMain_Generate$1 {
    constructor() {
        super(...arguments);
        this.achievementModuleC = null;
        this.mContentCanvasSizeX = 0;
        this.achievementItems = [];
        this.currentItemIndex = 0;
    }
    /**
     * 构造UI文件成功后，在合适的时机最先初始化一次
     */
    onStart() {
        //设置能否每帧触发onUpdate
        this.canUpdate = false;
        this.layer = mw.UILayerMiddle;
        this.initDatas();
        this.bindButtons();
    }
    initDatas() {
        this.achievementModuleC = ModuleService.getModule(AchievementModuleC);
        this.mContentCanvasSizeX = this.mContentCanvas.size.x;
    }
    /**按钮绑定 */
    bindButtons() {
        this.mCloseButton.onClicked.add(() => {
            this.hide();
        });
    }
    onShow(...params) {
        Console.error("[AchievementPanel--onShow]");
        this.updatePanelData();
    }
    onHide() {
        Console.error("[AchievementPanel--onHide]");
        this.recycleAchievementItems();
    }
    /**更新面板数据 */
    updatePanelData() {
        this.currentItemIndex = 0;
        this.mScrollBox.scrollOffset = 0;
        this.mContentCanvas.position = mw.Vector2.zero;
        this.mContentCanvas.size = new mw.Vector(this.mContentCanvasSizeX, 0);
        let achievementGradeMap = this.achievementModuleC.getAchievementGradeMap();
        let onCompleteAchievement = [];
        for (let [key, value] of achievementGradeMap) {
            for (let i = 0; i < value.length; ++i) {
                if (value[i].isOnComplete) {
                    onCompleteAchievement.push(value[i]);
                    continue;
                }
                this.sapwnAchievementItems(value[i]);
            }
        }
        for (let i = 0; i < onCompleteAchievement.length; ++i) {
            this.sapwnAchievementItems(onCompleteAchievement[i]);
        }
        this.mContentCanvas.size = new mw.Vector(this.mContentCanvasSizeX, this.currentItemIndex * GlobalData.itemPositionInterval);
        Console.error("[this.currentItemIndex] = ", this.currentItemIndex);
    }
    /**生成成就Item */
    sapwnAchievementItems(achievement) {
        let achievementItem = ObjectPoolServices.getPool(AchievementItem).spawn();
        achievementItem.initAchievementItemData(achievement);
        this.mContentCanvas.addChild(achievementItem.achievementItem);
        achievementItem.achievementItem.position = this.getCurrentItemPosition();
        //TODO--achievementItem.achievementItem.size = new mw.Vector2(260, 260);
        this.achievementItems.push(achievementItem);
    }
    getCurrentItemPosition() {
        return new mw.Vector2(0, this.currentItemIndex++ * GlobalData.itemPositionInterval);
    }
    /**回收成就item */
    recycleAchievementItems() {
        if (this.achievementItems.length <= 0)
            return;
        for (let i = 0; i < this.achievementItems.length; ++i) {
            this.achievementItems[i].recycle();
            this.mRecycleCanvas.addChild(this.achievementItems[i].achievementItem);
        }
        this.achievementItems.length = 0;
    }
}
/**二级背包列表 */
class AchievementItem {
    /**生成Item */
    constructor() {
        /**内容介绍 */
        this.mText_AMdetial = undefined;
        /**背景 */
        this.mImage_GradeBG = undefined;
        /**BG */
        this.mBgImage_1 = undefined;
        /**进度条 */
        this.mProgressBar = undefined;
        /**难易程度类型 */
        this.mText_Grade = undefined;
        /**当前任务名字 */
        this.mText_AMname = undefined;
        /**下一个任务显示的Canvas */
        this.mCanvas_Pointto = undefined;
        /**下一个任务的名字 */
        this.mText_NextLevel = undefined;
        /**指向下一个任务的箭头 */
        this.mImage_Point = undefined;
        /**进度百分比 */
        this.mText_lording = undefined;
        this.achievementItem = mw.createUIByName("module/Achievement/AchievementItem");
        this.mText_AMdetial = this.achievementItem.findChildByPath("RootCanvas/Canvas/DetailCanvas/mText_AMdetial");
        this.mText_Grade = this.achievementItem.findChildByPath("RootCanvas/Canvas/mText_Grade");
        this.mBgImage_1 = this.achievementItem.findChildByPath("RootCanvas/Canvas/DetailCanvas/mBgImage_1");
        this.mText_AMname = this.achievementItem.findChildByPath("RootCanvas/Canvas/mText_AMname");
        this.mCanvas_Pointto = this.achievementItem.findChildByPath("RootCanvas/Canvas/mCanvas_Pointto");
        this.mText_NextLevel = this.achievementItem.findChildByPath("RootCanvas/Canvas/mCanvas_Pointto/mText_NextLevel");
        this.mImage_Point = this.achievementItem.findChildByPath("RootCanvas/Canvas/mCanvas_Pointto/mImage_Point");
        this.mText_lording = this.achievementItem.findChildByPath("RootCanvas/Canvas/mText_lording");
        this.mImage_GradeBG = this.achievementItem.findChildByPath("RootCanvas/Canvas/mImage_GradeBG");
        this.mProgressBar = this.achievementItem.findChildByPath("RootCanvas/Canvas/mProgressBar");
    }
    /**填充item数据 */
    initAchievementItemData(achievement) {
        let achievementsElement = GameConfig.Achievements.getElement(achievement.achId);
        let st = achievementsElement.AMdetail;
        switch (achievementsElement.RewardType) {
            case 1:
                st += "，奖励等级+" + achievementsElement.RewardNum;
                break;
            case 2:
                st += "，奖励血量+" + achievementsElement.RewardNum;
                break;
            case 3:
                st += "，奖励攻击力+" + achievementsElement.RewardNum;
                break;
        }
        this.mText_AMdetial.text = st;
        let gradeType = (achievement.isOnComplete) ? GradeType.Complete : achievementsElement.Grade;
        this.updateGradeBGColorAndText(gradeType);
        this.updateAchievementProgressAndName(achievement, achievementsElement);
    }
    /**根据难易程度更新背景颜色 */
    updateGradeBGColorAndText(gradeType) {
        let gradeBGColor = [];
        let gradeText = "";
        switch (gradeType) {
            case GradeType.Easy:
                gradeBGColor = GlobalData.easyImageBgColor;
                gradeText = "容易";
                break;
            case GradeType.Simple:
                gradeBGColor = GlobalData.simpleImageBgColor;
                gradeText = "简单";
                break;
            case GradeType.Medium:
                gradeBGColor = GlobalData.mediumImageBgColor;
                gradeText = "中等";
                break;
            case GradeType.Difficult:
                gradeBGColor = GlobalData.difficultImageBgColor;
                gradeText = "困难";
                break;
            case GradeType.Crazy:
                gradeBGColor = GlobalData.crazyImageBgColor;
                gradeText = "疯狂";
                break;
            case GradeType.Complete:
                gradeBGColor = GlobalData.completeImageBgColor;
                gradeText = "完成";
                break;
        }
        this.mImage_GradeBG.setImageColorDecimal(gradeBGColor[0], gradeBGColor[1], gradeBGColor[2], gradeBGColor[3]);
        this.mBgImage_1.setImageColorDecimal(gradeBGColor[0], gradeBGColor[1], gradeBGColor[2], gradeBGColor[3]);
        this.mText_Grade.text = gradeText;
    }
    /**更新进度条和成就名字 */
    updateAchievementProgressAndName(achievement, achievementsElement) {
        if (achievement.isOnComplete) {
            this.mProgressBar.visibility = mw.SlateVisibility.Collapsed;
            this.mText_lording.visibility = mw.SlateVisibility.Collapsed;
            this.mCanvas_Pointto.visibility = mw.SlateVisibility.Collapsed;
            this.mText_AMname.text = achievementsElement.Name;
        }
        else {
            this.mProgressBar.visibility = mw.SlateVisibility.HitTestInvisible;
            this.mText_lording.visibility = mw.SlateVisibility.SelfHitTestInvisible;
            let currentValue = 0;
            if (achievementsElement.TragetNum == 0) {
                currentValue = 0;
            }
            else {
                currentValue = achievement.progress / achievementsElement.TragetNum;
            }
            this.mProgressBar.currentValue = currentValue;
            this.mText_lording.text = Math.round(currentValue * 100) + "%";
            this.mText_AMname.text = achievementsElement.Name;
            if (achievementsElement.NextId) {
                this.mText_NextLevel.text = GameConfig.Achievements.getElement(achievementsElement.NextId).Name;
                this.mCanvas_Pointto.visibility = mw.SlateVisibility.SelfHitTestInvisible;
            }
            else {
                this.mCanvas_Pointto.visibility = mw.SlateVisibility.Collapsed;
            }
        }
    }
    /**回收 */
    recycle() {
        ObjectPoolServices.getPool(AchievementItem).return(this);
    }
}
var GradeType;
(function (GradeType) {
    /**容易 */
    GradeType[GradeType["Easy"] = 1] = "Easy";
    /**简单 */
    GradeType[GradeType["Simple"] = 2] = "Simple";
    /**中等 */
    GradeType[GradeType["Medium"] = 3] = "Medium";
    /**困难 */
    GradeType[GradeType["Difficult"] = 4] = "Difficult";
    /**疯狂 */
    GradeType[GradeType["Crazy"] = 5] = "Crazy";
    /**已完成 */
    GradeType[GradeType["Complete"] = 6] = "Complete";
})(GradeType || (GradeType = {}));

var foreign57 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    get GradeType () { return GradeType; },
    default: AchievementPanel
});

/**
 * AUTO GENERATE BY UI EDITOR.
 * WARNING: DO NOT MODIFY THIS FILE,MAY CAUSE CODE LOST.
 * AUTHOR: 爱玩游戏的小胖子
 * UI: UI/module/Achievement/Completed.ui
 * TIME: 2024.08.04-18.39.53
 */
let Completed_Generate = class Completed_Generate extends UIScript {
    get mCanvas() {
        if (!this.mCanvas_Internal && this.uiWidgetBase) {
            this.mCanvas_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mCanvas');
        }
        return this.mCanvas_Internal;
    }
    get mText_AMname() {
        if (!this.mText_AMname_Internal && this.uiWidgetBase) {
            this.mText_AMname_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mCanvas/mText_AMname');
        }
        return this.mText_AMname_Internal;
    }
    get mProgressBar() {
        if (!this.mProgressBar_Internal && this.uiWidgetBase) {
            this.mProgressBar_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mCanvas/mProgressBar');
        }
        return this.mProgressBar_Internal;
    }
    get mText_Target() {
        if (!this.mText_Target_Internal && this.uiWidgetBase) {
            this.mText_Target_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mCanvas/mText_Target');
        }
        return this.mText_Target_Internal;
    }
    get mText_Finish() {
        if (!this.mText_Finish_Internal && this.uiWidgetBase) {
            this.mText_Finish_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mCanvas/mText_Finish');
        }
        return this.mText_Finish_Internal;
    }
    onAwake() {
        //设置能否每帧触发onUpdate
        this.canUpdate = false;
        this.layer = mw.UILayerBottom;
        this.initButtons();
    }
    initButtons() {
        //按钮添加点击
        //按钮添加点击
        //按钮多语言
        //文本多语言
        this.initLanguage(this.mText_AMname);
        this.initLanguage(this.mText_Target);
        this.initLanguage(this.mText_Finish);
        //文本多语言
    }
    /*初始化多语言*/
    initLanguage(ui) {
        let call = mw.UIScript.getBehavior("lan");
        if (call && ui) {
            call(ui);
        }
    }
    onShow(...params) { }
    ;
    /*显示panel*/
    show(...param) {
        mw.UIService.showUI(this, this.layer, ...param);
    }
    /*隐藏panel*/
    hide() {
        mw.UIService.hideUI(this);
    }
};
Completed_Generate = __decorate([
    UIBind('UI/module/Achievement/Completed.ui')
], Completed_Generate);
var Completed_Generate$1 = Completed_Generate;

var foreign123 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: Completed_Generate$1
});

class CompletedPanel extends Completed_Generate$1 {
    constructor() {
        super(...arguments);
        this.topVector2 = new mw.Vector2(0, 0);
        this.downVector2 = new mw.Vector2(0, 0);
        this.topToDownTween = null;
        this.downToTopTween = null;
    }
    /**
     * 构造UI文件成功后，在合适的时机最先初始化一次
     */
    onStart() {
        //设置能否每帧触发onUpdate
        this.canUpdate = false;
        this.layer = mw.UILayerMiddle;
        this.initDatas();
    }
    /**初始化数据 */
    initDatas() {
        let positionX = this.rootCanvas.size.x / 2 - this.mCanvas.size.x / 2;
        this.topVector2 = new mw.Vector2(positionX, -this.mCanvas.size.y);
        this.downVector2 = new mw.Vector2(positionX, 0);
    }
    onShow(...params) {
        if (this.topToDownTween != null)
            this.topToDownTween.stop();
        if (this.downToTopTween != null)
            this.downToTopTween.stop();
        this.mCanvas.position = this.topVector2;
        this.topToDownTween = new mw.Tween({ x: this.topVector2.x, y: this.topVector2.y })
            .to({ x: this.downVector2.x, y: this.downVector2.y }, 0.3 * 1000)
            .onUpdate((v) => {
            this.mCanvas.position = new mw.Vector2(v.x, v.y);
        })
            .onComplete(() => {
            TimeUtil.delaySecond(2).then(() => {
                this.downToTopTween = new mw.Tween({ x: this.downVector2.x, y: this.downVector2.y }).
                    to({ x: this.topVector2.x, y: this.topVector2.y }, 0.3 * 1000)
                    .onUpdate((v) => {
                    this.mCanvas.position = new mw.Vector2(v.x, v.y);
                })
                    .onComplete(() => {
                    this.hide();
                })
                    .start();
            });
        })
            .start();
    }
    /**
     * 达到条件提示25% 50% 75% 100%
     * @param achId 成就
     * @param isOnComplete 是否完成
     * @param progress 进度
     * @param tragetNum 目标数
     * @param currentValue 当前值
     */
    showCompletedTips(achId, isOnComplete, progress = 0, tragetNum = 0, currentValue) {
        let achievementsElement = GameConfig.Achievements.getElement(achId);
        this.mText_AMname.text = achievementsElement.Name;
        if (isOnComplete) {
            this.mProgressBar.visibility = mw.SlateVisibility.Collapsed;
            this.mText_Target.visibility = mw.SlateVisibility.Collapsed;
            this.mText_Finish.visibility = mw.SlateVisibility.SelfHitTestInvisible;
        }
        else {
            this.mProgressBar.visibility = mw.SlateVisibility.SelfHitTestInvisible;
            this.mText_Target.visibility = mw.SlateVisibility.SelfHitTestInvisible;
            this.mText_Finish.visibility = mw.SlateVisibility.Collapsed;
            this.mProgressBar.currentValue = currentValue;
            this.mText_Target.text = progress + "/" + tragetNum;
        }
        this.show();
    }
}

var foreign58 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: CompletedPanel
});

class AchievementModuleC extends ModuleC {
    constructor() {
        super(...arguments);
        this.hudModuleC = null;
        this.achievementpanel = null;
        this.completedPanel = null;
        /**执行成就（参数成就类型-对应次数） */
        this.onExecuteAchievementAction = new Action2();
        /**成就表数据 */
        this.achievements = [];
        /**根据难易程度分类 */
        this.achievementGradeMap = new Map();
        /**根据成就类型分类 */
        this.achievementJudgeMap = new Map();
    }
    /** 当脚本被实例后，会在第一帧更新前调用此函数 */
    onStart() {
        this.initDatas();
        this.bindActions();
    }
    /**初始化数据 */
    initDatas() {
        this.hudModuleC = ModuleService.getModule(HUDModuleC);
        this.achievementpanel = mw.UIService.getUI(AchievementPanel);
        this.completedPanel = mw.UIService.getUI(CompletedPanel);
        this.initAchievements();
    }
    onEnterScene(sceneType) {
        TimeUtil.delaySecond(12).then(() => {
            if (this.data.isFirstAch) {
                let num = ModuleService.getModule(ShopModuleC).getLevel();
                this.ach(num);
                this.onExecuteAchievementAction.call(1, num);
                this.server.net_saveFirstAch(false);
            }
        });
    }
    /**时间绑定 */
    bindActions() {
        this.hudModuleC.onOpenAchAction.add(() => {
            this.achievementpanel.show();
        });
        Event.addLocalListener("achMaxHight", (value) => {
            this.onExecuteAchievementAction.call(6, value);
        });
        Event.addLocalListener("dianji", (value) => {
            this.onExecuteAchievementAction.call(8, value);
        });
        Event.addLocalListener("achSit", (value) => {
            this.onExecuteAchievementAction.call(11, value);
        });
        Event.addLocalListener("achDance", (value) => {
            this.onExecuteAchievementAction.call(10, value);
        });
        Event.addLocalListener("RaffAch", (value) => {
            this.onExecuteAchievementAction.call(17, value);
        });
        Event.addLocalListener("achUse", (value) => {
            this.onExecuteAchievementAction.call(18, value);
        });
        this.onExecuteAchievementAction.add(this.executeAchievementAction.bind(this));
    }
    /**初始化成就数据 */
    initAchievements() {
        this.achievements = GameConfig.Achievements.getAllElement();
        for (let i = 0; i < this.achievements.length; ++i) {
            let judge = this.achievements[i].Judge;
            if (this.achievementJudgeMap.has(judge))
                continue;
            if (this.data.achievementStage[judge]) {
                let achId = this.data.achievementStage[judge].achId;
                this.achievementJudgeMap.set(judge, this.achievements[achId - 1]);
            }
            else {
                this.achievementJudgeMap.set(judge, this.achievements[i]);
            }
        }
        // oTraceError("[AchievementModuleC--initAchievements] achievementJudgeMap.size = ", this.achievementJudgeMap.size);
    }
    /**获取成就数据 */
    getAchievementGradeMap() {
        this.achievementGradeMap.clear();
        for (let [key, value] of this.achievementJudgeMap) {
            let grade = value.Grade;
            let arr = [];
            if (this.achievementGradeMap.has(grade)) {
                arr = this.achievementGradeMap.get(grade);
            }
            if (this.data.achievementStage[key]) {
                arr.push(this.data.achievementStage[key]);
            }
            else {
                arr.push(new Achievement(value.id, 0, false, [false, false, false, false]));
            }
            this.achievementGradeMap.set(grade, arr);
        }
        this.sortAchievementGradeMap();
        return this.achievementGradeMap;
    }
    /**排序 */
    sortAchievementGradeMap() {
        for (let [key, value] of this.achievementGradeMap) {
            value.sort((a, b) => {
                return b.progress - a.progress;
            });
        }
        let arrayObj = Array.from(this.achievementGradeMap);
        arrayObj.sort((a, b) => {
            return a[0] - b[0];
        });
        this.achievementGradeMap = new Map(arrayObj);
    }
    /**执行成就 */
    executeAchievementAction(achievementType, num) {
        this.saveAchievementStage(achievementType, num);
    }
    /**保存成就数据 */
    async saveAchievementStage(achievementType, num) {
        let progress = 0;
        let tragetNum = 0;
        let achievementId = 0;
        let isOnComplete = false;
        if (this.data.achievementStage[achievementType]) {
            let achievement = this.data.achievementStage[achievementType];
            if (achievement.isOnComplete) {
                Console.error("[成就ID为" + achievement.achId + "的成就已完成]");
                return;
            }
            else {
                progress = achievement.progress + num;
                tragetNum = GameConfig.Achievements.getElement(achievement.achId).TragetNum;
                achievementId = achievement.achId;
                isOnComplete = (progress >= tragetNum) ? true : false;
                if (isOnComplete)
                    progress = 0;
            }
        }
        else {
            if (!this.achievementJudgeMap.has(achievementType)) {
                Console.error("[成就类型为" + achievementType + "的成就不存在]");
                return;
            }
            let achievementsElement = this.achievementJudgeMap.get(achievementType);
            progress = num;
            tragetNum = achievementsElement.TragetNum;
            achievementId = achievementsElement.id;
            isOnComplete = (progress >= tragetNum) ? true : false;
            if (isOnComplete)
                progress = 0;
        }
        await this.server.net_saveAchievementStage(achievementId, achievementType, progress, isOnComplete);
        await this.achievementTips(achievementId, achievementType, progress, tragetNum, isOnComplete);
    }
    /**成就提示 */
    async achievementTips(achievementId, achievementType, progress, tragetNum, isOnComplete) {
        Console.error("[成就ID为" + achievementId + "的成就进度为" + progress + "/" + tragetNum + "]");
        let currentValue = Number((progress / tragetNum).toFixed(2));
        if (isOnComplete) {
            this.completedPanel.showCompletedTips(achievementId, isOnComplete, progress, tragetNum, currentValue);
            let achE = GameConfig.Achievements.getElement(achievementId);
            switch (achE.RewardType) {
                case 1:
                    this.hudModuleC.addLv(achE.RewardNum);
                    break;
                case 2:
                    this.hudModuleC.setMaxHp(achE.RewardNum);
                    break;
                case 3:
                    this.hudModuleC.setCurAttackValue(achE.RewardNum);
                    break;
            }
        }
        else {
            let isTips = true;
            let isTipsIndex = -1;
            let achievement = this.data.achievementStage[achievementType];
            if (currentValue >= 0.25 && currentValue < 0.5) {
                isTips = achievement.isTips[0];
                isTipsIndex = 0;
            }
            else if (currentValue >= 0.5 && currentValue < 0.75) {
                isTips = achievement.isTips[1];
                isTipsIndex = 1;
            }
            else if (currentValue >= 0.75 && currentValue < 0.9) {
                isTips = achievement.isTips[2];
                isTipsIndex = 2;
            }
            else if (currentValue >= 0.9 && currentValue < 1) {
                isTips = achievement.isTips[3];
                isTipsIndex = 3;
            }
            if (isTips || isTipsIndex == -1)
                return;
            await this.server.net_saveAchievementTipStage(achievementType, isTipsIndex);
            this.completedPanel.showCompletedTips(achievementId, isOnComplete, progress, tragetNum, currentValue);
        }
    }
    ach(num) {
        this.onExecuteAchievementAction.call(2, num);
        this.onExecuteAchievementAction.call(20, num);
        this.onExecuteAchievementAction.call(21, num);
        this.onExecuteAchievementAction.call(22, num);
        this.onExecuteAchievementAction.call(23, num);
        this.onExecuteAchievementAction.call(24, num);
        this.onExecuteAchievementAction.call(25, num);
        this.onExecuteAchievementAction.call(26, num);
        this.onExecuteAchievementAction.call(27, num);
        this.onExecuteAchievementAction.call(28, num);
        this.onExecuteAchievementAction.call(29, num);
    }
}

var foreign55 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: AchievementModuleC
});

/**
 * AUTO GENERATE BY UI EDITOR.
 * WARNING: DO NOT MODIFY THIS FILE,MAY CAUSE CODE LOST.
 * AUTHOR: 爱玩游戏的小胖子
 * UI: UI/module/CollectionUI/CollectionPanel.ui
 * TIME: 2024.08.04-18.39.53
 */
let CollectionPanel_Generate = class CollectionPanel_Generate extends UIScript {
    get mCollectionBtn1() {
        if (!this.mCollectionBtn1_Internal && this.uiWidgetBase) {
            this.mCollectionBtn1_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainCanvas/MiddleCanvas/CollectionTypeCanvas/mCollectionBtn1');
        }
        return this.mCollectionBtn1_Internal;
    }
    get mCollectionBtn2() {
        if (!this.mCollectionBtn2_Internal && this.uiWidgetBase) {
            this.mCollectionBtn2_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainCanvas/MiddleCanvas/CollectionTypeCanvas/mCollectionBtn2');
        }
        return this.mCollectionBtn2_Internal;
    }
    get mCollectionBtn3() {
        if (!this.mCollectionBtn3_Internal && this.uiWidgetBase) {
            this.mCollectionBtn3_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainCanvas/MiddleCanvas/CollectionTypeCanvas/mCollectionBtn3');
        }
        return this.mCollectionBtn3_Internal;
    }
    get mCollectionBtn4() {
        if (!this.mCollectionBtn4_Internal && this.uiWidgetBase) {
            this.mCollectionBtn4_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainCanvas/MiddleCanvas/CollectionTypeCanvas/mCollectionBtn4');
        }
        return this.mCollectionBtn4_Internal;
    }
    get mScrollBox() {
        if (!this.mScrollBox_Internal && this.uiWidgetBase) {
            this.mScrollBox_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainCanvas/MiddleCanvas/mScrollBox');
        }
        return this.mScrollBox_Internal;
    }
    get mContentCanvas() {
        if (!this.mContentCanvas_Internal && this.uiWidgetBase) {
            this.mContentCanvas_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainCanvas/MiddleCanvas/mScrollBox/mContentCanvas');
        }
        return this.mContentCanvas_Internal;
    }
    get mCloseBtn() {
        if (!this.mCloseBtn_Internal && this.uiWidgetBase) {
            this.mCloseBtn_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainCanvas/mCloseBtn');
        }
        return this.mCloseBtn_Internal;
    }
    get mRecycleCanvas() {
        if (!this.mRecycleCanvas_Internal && this.uiWidgetBase) {
            this.mRecycleCanvas_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainCanvas/mRecycleCanvas');
        }
        return this.mRecycleCanvas_Internal;
    }
    onAwake() {
        //设置能否每帧触发onUpdate
        this.canUpdate = false;
        this.layer = mw.UILayerBottom;
        this.initButtons();
    }
    initButtons() {
        //按钮添加点击
        //按钮添加点击
        this.mCollectionBtn1.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick", "mCollectionBtn1");
        });
        this.mCollectionBtn1.touchMethod = (mw.ButtonTouchMethod.PreciseTap);
        this.mCollectionBtn2.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick", "mCollectionBtn2");
        });
        this.mCollectionBtn2.touchMethod = (mw.ButtonTouchMethod.PreciseTap);
        this.mCollectionBtn3.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick", "mCollectionBtn3");
        });
        this.mCollectionBtn3.touchMethod = (mw.ButtonTouchMethod.PreciseTap);
        this.mCollectionBtn4.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick", "mCollectionBtn4");
        });
        this.mCollectionBtn4.touchMethod = (mw.ButtonTouchMethod.PreciseTap);
        this.mCloseBtn.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick", "mCloseBtn");
        });
        this.mCloseBtn.touchMethod = (mw.ButtonTouchMethod.PreciseTap);
        //按钮多语言
        //文本多语言
        //文本多语言
        this.initLanguage(this.uiWidgetBase.findChildByPath("RootCanvas/MainCanvas/MiddleCanvas/CollectionTypeCanvas/mCollectionBtn1/TextBlock"));
        this.initLanguage(this.uiWidgetBase.findChildByPath("RootCanvas/MainCanvas/MiddleCanvas/CollectionTypeCanvas/mCollectionBtn2/TextBlock_1"));
        this.initLanguage(this.uiWidgetBase.findChildByPath("RootCanvas/MainCanvas/MiddleCanvas/CollectionTypeCanvas/mCollectionBtn3/TextBlock_2"));
        this.initLanguage(this.uiWidgetBase.findChildByPath("RootCanvas/MainCanvas/MiddleCanvas/CollectionTypeCanvas/mCollectionBtn4/TextBlock_3"));
    }
    /*初始化多语言*/
    initLanguage(ui) {
        let call = mw.UIScript.getBehavior("lan");
        if (call && ui) {
            call(ui);
        }
    }
    onShow(...params) { }
    ;
    /*显示panel*/
    show(...param) {
        mw.UIService.showUI(this, this.layer, ...param);
    }
    /*隐藏panel*/
    hide() {
        mw.UIService.hideUI(this);
    }
};
CollectionPanel_Generate = __decorate([
    UIBind('UI/module/CollectionUI/CollectionPanel.ui')
], CollectionPanel_Generate);
var CollectionPanel_Generate$1 = CollectionPanel_Generate;

var foreign125 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: CollectionPanel_Generate$1
});

/**
 * AUTO GENERATE BY UI EDITOR.
 * WARNING: DO NOT MODIFY THIS FILE,MAY CAUSE CODE LOST.
 * AUTHOR: 爱玩游戏的小胖子
 * UI: UI/module/CollectionUI/CollectionItemTip.ui
 * TIME: 2024.08.04-18.39.53
 */
let CollectionItemTip_Generate = class CollectionItemTip_Generate extends UIScript {
    get mCloseButton() {
        if (!this.mCloseButton_Internal && this.uiWidgetBase) {
            this.mCloseButton_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mCloseButton');
        }
        return this.mCloseButton_Internal;
    }
    get mIconImage() {
        if (!this.mIconImage_Internal && this.uiWidgetBase) {
            this.mIconImage_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainCanvas/IconCanvas/mIconImage');
        }
        return this.mIconImage_Internal;
    }
    get mOwnText() {
        if (!this.mOwnText_Internal && this.uiWidgetBase) {
            this.mOwnText_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainCanvas/mOwnText');
        }
        return this.mOwnText_Internal;
    }
    get mNameText() {
        if (!this.mNameText_Internal && this.uiWidgetBase) {
            this.mNameText_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainCanvas/mNameText');
        }
        return this.mNameText_Internal;
    }
    get mUseText() {
        if (!this.mUseText_Internal && this.uiWidgetBase) {
            this.mUseText_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainCanvas/mUseCanvas/mUseButton/mUseText');
        }
        return this.mUseText_Internal;
    }
    get mUseButton() {
        if (!this.mUseButton_Internal && this.uiWidgetBase) {
            this.mUseButton_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainCanvas/mUseCanvas/mUseButton');
        }
        return this.mUseButton_Internal;
    }
    get mUseCanvas() {
        if (!this.mUseCanvas_Internal && this.uiWidgetBase) {
            this.mUseCanvas_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainCanvas/mUseCanvas');
        }
        return this.mUseCanvas_Internal;
    }
    onAwake() {
        //设置能否每帧触发onUpdate
        this.canUpdate = false;
        this.layer = mw.UILayerBottom;
        this.initButtons();
    }
    initButtons() {
        //按钮添加点击
        //按钮添加点击
        this.mCloseButton.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick", "mCloseButton");
        });
        this.mCloseButton.touchMethod = (mw.ButtonTouchMethod.PreciseTap);
        this.mUseButton.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick", "mUseButton");
        });
        this.mUseButton.touchMethod = (mw.ButtonTouchMethod.PreciseTap);
        //按钮多语言
        //文本多语言
        this.initLanguage(this.mOwnText);
        this.initLanguage(this.mNameText);
        this.initLanguage(this.mUseText);
        //文本多语言
    }
    /*初始化多语言*/
    initLanguage(ui) {
        let call = mw.UIScript.getBehavior("lan");
        if (call && ui) {
            call(ui);
        }
    }
    onShow(...params) { }
    ;
    /*显示panel*/
    show(...param) {
        mw.UIService.showUI(this, this.layer, ...param);
    }
    /*隐藏panel*/
    hide() {
        mw.UIService.hideUI(this);
    }
};
CollectionItemTip_Generate = __decorate([
    UIBind('UI/module/CollectionUI/CollectionItemTip.ui')
], CollectionItemTip_Generate);
var CollectionItemTip_Generate$1 = CollectionItemTip_Generate;

var foreign124 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: CollectionItemTip_Generate$1
});

/**
 * AUTHOR: 爱玩游戏的小胖子
 * TIME: 2023.06.19-22.01.22
 */
class CollectionItemPanel extends CollectionItemTip_Generate$1 {
    constructor() {
        super(...arguments);
        this.hudModuleC = null;
        this.adTips = null;
        this.collectionPanel = null;
        this.useCount = 2;
        this.addType = 0;
        this.addValue = 0;
    }
    /**
     * 构造UI文件成功后，在合适的时机最先初始化一次
     */
    onStart() {
        //设置能否每帧触发onUpdate
        this.canUpdate = false;
        this.layer = mw.UILayerMiddle;
        this.initDatas();
        this.bindButtons();
    }
    /**初始化数据 */
    initDatas() {
        this.hudModuleC = ModuleService.getModule(HUDModuleC);
        this.adTips = mw.UIService.getUI(AdTips);
        this.collectionPanel = mw.UIService.getUI(CollectionPanel);
        this.useCount = 2;
    }
    /**按钮绑定 */
    bindButtons() {
        this.mCloseButton.onClicked.add(() => {
            this.hide();
        });
        this.mUseButton.onClicked.add(() => {
            if (this.useCount > 0) {
                Event.dispatchToLocal("achUse", 1);
                switch (this.addType) {
                    case 1:
                        this.hudModuleC.setMaxHp(this.addValue);
                        break;
                    case 2:
                        this.hudModuleC.setCurHp(this.addValue);
                        break;
                    case 3:
                        this.hudModuleC.setCurAttackValue(this.addValue);
                        break;
                    case 4:
                        this.hudModuleC.setMaxMoveSpeed(this.addValue);
                        break;
                    case 5:
                        this.hudModuleC.setMaxFlySpeed(this.addValue);
                        break;
                    case 6:
                        this.hudModuleC.setMaxJumpHeight(this.addValue);
                        break;
                }
                --this.useCount;
                this.collectionPanel.hide();
            }
            else {
                if (GlobalData.isOpenIAA) {
                    this.adTips.showAdTips(1, AdType.AddCount);
                }
                else {
                    this.getReward();
                }
            }
            this.hide();
        });
    }
    /**得到奖励 */
    getReward() {
        this.useCount = 2;
    }
    /**显示 */
    showCollectionItemTip(icon, name, isOwn, addType, addValue) {
        this.mIconImage.imageGuid = icon;
        this.mNameText.text = name;
        this.mOwnText.text = (isOwn) ? "已获得" : "未获得";
        this.mUseCanvas.visibility = (isOwn) ? mw.SlateVisibility.SelfHitTestInvisible : mw.SlateVisibility.Collapsed;
        this.addType = addType;
        this.addValue = addValue;
        if (this.useCount > 0) {
            switch (addType) {
                case 1:
                    this.mUseText.text = "增加最大生命值\n+" + addValue;
                    break;
                case 2:
                    this.mUseText.text = "恢复当前生命值\n+" + addValue;
                    break;
                case 3:
                    this.mUseText.text = "增加攻击力\n+" + addValue;
                    break;
                case 4:
                    this.mUseText.text = "增加移动速度\n+" + addValue;
                    break;
                case 5:
                    this.mUseText.text = "增加飞行速度\n+" + addValue;
                    break;
                case 6:
                    this.mUseText.text = "增加跳跃高度\n+" + addValue;
                    break;
            }
        }
        else {
            this.mUseText.text = "增加2次使用次数";
        }
        this.show();
    }
}

var foreign71 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: CollectionItemPanel
});

/**
 * AUTHOR: 爱玩游戏的小胖子
 * TIME: 2023.06.18-19.23.27
 */
class CollectionPanel extends CollectionPanel_Generate$1 {
    constructor() {
        super(...arguments);
        this.collectionModuleC = null;
        this.onFindTipsAction = new Action1();
        /**记录当前点击的页签按钮 */
        this.currentCollectionTypeBtn = this.mCollectionBtn1;
        /**记录当前点击的页签 */
        this.currentCollectionType = CollectionType.FightingSkill;
        /**Content子集位置 */
        this.currentChildIndex = 1;
        //#region 收集
        /**--------------------------[收集]-------------------------- */
        this.collections = [];
        this.fightingSkills = [];
        this.gongs = [];
        this.elixirs = [];
        this.anomalousFires = [];
        /**储存当前页签下的CollectionItem */
        this.collectionItems = [];
        /**--------------------------[收集]-------------------------- */
        //#endregion
    }
    /**
     * 构造UI文件成功后，在合适的时机最先初始化一次
     */
    onStart() {
        //设置能否每帧触发onUpdate
        this.canUpdate = false;
        this.layer = mw.UILayerMiddle;
        this.initDatas();
        this.bindButtons();
        this.registerActions();
    }
    /**初始化数据 */
    initDatas() {
        this.collectionModuleC = ModuleService.getModule(CollectionModuleC);
        this.initCollectionData();
    }
    /**按钮绑定 */
    bindButtons() {
        this.mCloseBtn.onClicked.add(() => {
            this.hide();
        });
        this.bindCollectionTypeButtons();
    }
    /**绑定Collection类型按钮 */
    bindCollectionTypeButtons() {
        this.currentCollectionTypeBtn = this.mCollectionBtn1;
        this.currentCollectionType = CollectionType.FightingSkill;
        this.currentCollectionTypeBtn.normalImageColor = GlobalData.collectionTypeSelectColor;
        for (let i = 1; i <= 4; ++i) {
            this['mCollectionBtn' + i].onClicked.add(() => {
                this.updateCollectionType(i, this['mCollectionBtn' + i]);
            });
        }
    }
    /**注册事件 */
    registerActions() {
    }
    /**更新Collection类型（更新显示内容） */
    updateCollectionType(collectionType, collectionTypeButton) {
        if (this.currentCollectionType == collectionType)
            return;
        this.currentCollectionType = collectionType;
        if (this.currentCollectionTypeBtn) {
            this.currentCollectionTypeBtn.normalImageColor = GlobalData.collectionTypeNormalColor;
        }
        this.currentCollectionTypeBtn = collectionTypeButton;
        this.currentCollectionTypeBtn.normalImageColor = GlobalData.collectionTypeSelectColor;
        this.showCollectionContentPanel(this.currentCollectionType);
    }
    onShow(...params) {
        this.showCollectionContentPanel(this.currentCollectionType);
    }
    /**布局位置Cloth */
    getCollectionChildPos() {
        let x = (((this.currentChildIndex - 1) % 5) * 225) + 50;
        let y = (Math.ceil(this.currentChildIndex / 5) - 1) * 225;
        ++this.currentChildIndex;
        return new mw.Vector2(x, y);
    }
    /**给NPC换武器 */
    // public onChangeWeaponToNPCAnction: Action2<number, IWeaponElement> = new Action2<number, IWeaponElement>();
    /**初始化Collection数据 */
    initCollectionData() {
        this.collections = GameConfig.Collection.getAllElement();
        for (let i = 0; i < this.collections.length; ++i) {
            let collectionElement = this.collections[i];
            switch (collectionElement.CollectionType) {
                case CollectionType.FightingSkill:
                    this.fightingSkills.push(collectionElement);
                    break;
                case CollectionType.Gong:
                    this.gongs.push(collectionElement);
                    break;
                case CollectionType.Elixir:
                    this.elixirs.push(collectionElement);
                    break;
                case CollectionType.AnomalousFire:
                    this.anomalousFires.push(collectionElement);
                    break;
            }
        }
        this.showCollectionContentPanel(this.currentCollectionType);
    }
    /**显示的Collection内容 */
    showCollectionContentPanel(currentCollectionType) {
        this.currentChildIndex = 1;
        this.mScrollBox.scrollOffset = 0;
        this.mContentCanvas.position = new mw.Vector2(0, 0);
        this.mContentCanvas.size = new mw.Vector2(1200, 0);
        if (this.collectionItems.length > 0) {
            this.recycleCurrentCollectionItems();
        }
        let tmpCollections = [];
        switch (currentCollectionType) {
            case CollectionType.FightingSkill:
                tmpCollections = this.fightingSkills;
                break;
            case CollectionType.Gong:
                tmpCollections = this.gongs;
                break;
            case CollectionType.Elixir:
                tmpCollections = this.elixirs;
                break;
            case CollectionType.AnomalousFire:
                tmpCollections = this.anomalousFires;
                break;
        }
        for (let i = 0; i < tmpCollections.length; ++i) {
            let collectionItem = ObjectPoolServices.getPool(CollectionItem).spawn();
            let collection = tmpCollections[i];
            collectionItem.initData(collection.id, collection.CollectionIcon, this.collectionModuleC.isOwnItem(collection.id), collection.Annotation, collection.AddType, collection.AddValue);
            this.mContentCanvas.addChild(collectionItem.collectionItem);
            collectionItem.collectionItem.size = new mw.Vector2(200, 200);
            collectionItem.collectionItem.position = this.getCollectionChildPos();
            this.collectionItems.push(collectionItem);
        }
        --this.currentChildIndex;
        let y = 0;
        if (this.currentChildIndex % 5 == 0) {
            y = (this.currentChildIndex / 5) * 225;
        }
        else {
            y = (Math.ceil(this.currentChildIndex / 5)) * 225;
        }
        this.mContentCanvas.size = new mw.Vector2(1200, y);
    }
    /**回收当前页签下的内容CollectionItem */
    recycleCurrentCollectionItems() {
        if (this.collectionItems.length == 0)
            return;
        this.collectionItems.forEach((collection) => {
            collection.recycleItem();
            this.mRecycleCanvas.addChild(collection.collectionItem);
        });
        this.collectionItems.length = 0;
    }
}
/**Collection */
class CollectionItem {
    /**生成Item */
    constructor() {
        this.mBgImage = undefined;
        this.mIconBtn = undefined;
        this.mAdsTipBtn = undefined;
        this.mAdsTipImg = undefined;
        this.mAdsTipCanvas = undefined;
        this.id = null;
        this.isSelect = false;
        this.collectionItem = mw.createUIByName("module/CollectionUI/CollectItem");
        this.mBgImage = this.collectionItem.findChildByPath("RootCanvas/Canvas/mBgImage");
        this.mIconBtn = this.collectionItem.findChildByPath("RootCanvas/Canvas/mIconBtn");
        this.mAdsTipCanvas = this.collectionItem.findChildByPath("RootCanvas/Canvas/mAdsTipCanvas");
        this.mAdsTipBtn = this.collectionItem.findChildByPath("RootCanvas/Canvas/mAdsTipCanvas/mAdsTipBtn");
        this.mAdsTipImg = this.collectionItem.findChildByPath("RootCanvas/Canvas/mAdsTipCanvas/mAdsTipImg");
    }
    /**填充数据 */
    initData(id, icon, isOwn, name, addType, addValue) {
        this.id = id;
        this.mIconBtn.normalImageGuid = icon;
        this.mIconBtn.pressedImageGuid = icon;
        this.mIconBtn.disableImageGuid = icon;
        this.mIconBtn.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick");
            if (!GlobalData.delayClick) {
                Notice.showDownNotice("小手别点太快");
                return;
            }
            GlobalData.delayClick = false;
            TimeUtil.delaySecond(1).then(() => {
                GlobalData.delayClick = true;
            });
            mw.UIService.getUI(CollectionItemPanel).showCollectionItemTip(icon, name, isOwn, addType, addValue);
        });
        this.mIconBtn.normalImageColor = (isOwn == true) ? GlobalData.collectionItemIconOwnColor : GlobalData.collectionItemIconNoOwnColor;
        this.mIconBtn.touchMethod = mw.ButtonTouchMethod.PreciseTap;
        this.mAdsTipBtn.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick");
            mw.UIService.getUI(CollectionPanel).onFindTipsAction.call(this.id);
        });
        this.mAdsTipCanvas.visibility = (isOwn == true) ? mw.SlateVisibility.Collapsed : mw.SlateVisibility.SelfHitTestInvisible;
        this.mAdsTipBtn.touchMethod = mw.ButtonTouchMethod.PreciseTap;
    }
    /**选中状态 */
    selectState() {
        this.isSelect = true;
    }
    /**取消选中状态 */
    cancleSelectState() {
        this.isSelect = false;
    }
    /**回收Item */
    recycleItem() {
        this.mIconBtn.onClicked.clear();
        ObjectPoolServices.getPool(CollectionItem).return(this);
    }
}
var CollectionType;
(function (CollectionType) {
    /**斗技 */
    CollectionType[CollectionType["FightingSkill"] = 1] = "FightingSkill";
    /**功法 */
    CollectionType[CollectionType["Gong"] = 2] = "Gong";
    /**丹药 */
    CollectionType[CollectionType["Elixir"] = 3] = "Elixir";
    /**异火 */
    CollectionType[CollectionType["AnomalousFire"] = 4] = "AnomalousFire";
})(CollectionType || (CollectionType = {}));

var foreign72 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    get CollectionType () { return CollectionType; },
    default: CollectionPanel
});

class CollectionModuleC extends ModuleC {
    constructor() {
        super(...arguments);
        this.hudModuleC = null;
        this.shopModuleC = null;
        this.achievementModuleC = null;
        this.collectionPanel = null;
        this.itemVector3Map = new Map();
        this.adTips = null;
        /**引导目标点特效ID */
        this.targetGuideEffectId = null;
        /**引导间隔标识 */
        this.guideIntervalId = null;
        /**引导线特效ID */
        this.guideEffectIds = [];
        /**记录上一次玩家的坐标 */
        this.prePlayerLoc = mw.Vector.zero;
    }
    /** 当脚本被实例后，会在第一帧更新前调用此函数 */
    onStart() {
        this.initDatas();
        this.registerActions();
    }
    /**初始化数据 */
    initDatas() {
        this.hudModuleC = ModuleService.getModule(HUDModuleC);
        this.shopModuleC = ModuleService.getModule(ShopModuleC);
        this.achievementModuleC = ModuleService.getModule(AchievementModuleC);
        this.collectionPanel = mw.UIService.getUI(CollectionPanel);
        this.adTips = mw.UIService.getUI(AdTips);
    }
    /**注册事件 */
    registerActions() {
        this.hudModuleC.onOpenAndCloseCollectionPanelAction.add((isOpen) => {
            isOpen ? this.collectionPanel.show() : this.collectionPanel.hide();
        });
        this.collectionPanel.onFindTipsAction.add(this.findItemTips.bind(this));
    }
    onEnterScene(sceneType) {
        TimeUtil.setInterval(() => {
            if (GlobalData.isOpenIAA) {
                this.adTips.showAdTips(1, AdType.RandomGetId);
            }
            else {
                this.randomGetId();
            }
        }, 60);
    }
    /**找Item的提示 */
    findItemTips(id) {
        if (GlobalData.isOpenIAA) {
            this.adTips.showAdTips(id, AdType.Tips);
        }
        else {
            this.startGuide(id);
        }
    }
    /**保存每个Item的位置 */
    setItemVector3(id, value) {
        Console.error("[id] = " + id);
        this.itemVector3Map.set(id, value);
    }
    /**得到某个Item在场景的位置 */
    getItemLoc(id) {
        if (!this.itemVector3Map.has(id)) {
            Notice.showDownNotice("游戏出Bug啦~");
            return mw.Vector.zero;
        }
        return this.itemVector3Map.get(id);
    }
    randomGetId() {
        if (!this.itemVector3Map || this.itemVector3Map.size == 0) {
            Notice.showDownNotice("你已经获得所有皮肤~");
            return;
        }
        let randomList = [];
        this.itemVector3Map.forEach((value, key) => {
            randomList.push(key);
        });
        let randomId = randomList[Utils.getRandomInteger(0, randomList.length - 1)];
        this.startGuide(randomId);
    }
    /**开始引导 */
    startGuide(id) {
        this.collectionPanel.hide();
        let targetLoc = this.getItemLoc(id);
        if (targetLoc.x == 0 && targetLoc.y == 0 && targetLoc.z == 0)
            return;
        if (this.targetGuideEffectId) {
            EffectService.stop(this.targetGuideEffectId);
            this.targetGuideEffectId = null;
        }
        this.targetGuideEffectId = GeneralManager.rpcPlayEffectAtLocation(GlobalData.targetEffectGuid, targetLoc, 0, mw.Rotation.zero, mw.Vector.one.multiply(0.5));
        if (this.guideIntervalId) {
            TimeUtil.clearInterval(this.guideIntervalId);
            this.guideIntervalId = null;
        }
        this.guideIntervalId = TimeUtil.setInterval(() => {
            let playerLoc = this.localPlayer.character.worldTransform.position;
            if (Math.abs(playerLoc.x - this.prePlayerLoc.x) < 0.1 && Math.abs(playerLoc.y - this.prePlayerLoc.y) < 0.1 && Math.abs(playerLoc.z - this.prePlayerLoc.z) < 0.1)
                return;
            this.prePlayerLoc = playerLoc;
            let distance = mw.Vector.distance(playerLoc, targetLoc);
            if (distance <= 100) {
                TimeUtil.clearInterval(this.guideIntervalId);
                this.guideIntervalId = null;
                if (this.targetGuideEffectId) {
                    EffectService.stop(this.targetGuideEffectId);
                    this.targetGuideEffectId = null;
                }
                if (this.guideEffectIds.length != 0) {
                    this.guideEffectIds.forEach((effectId) => {
                        EffectService.stop(effectId);
                    });
                    this.guideEffectIds.length = 0;
                }
                Notice.showDownNotice("已到达目标点附近");
                return;
            }
            let pointNum = Math.floor(distance / 100);
            let locs = Utils.getCurvePointsInNum([playerLoc, targetLoc], pointNum);
            if (pointNum > 35) {
                pointNum = 35;
            }
            if (this.guideEffectIds.length == 0) {
                for (let i = 1; i < pointNum; ++i) {
                    let effectId = GeneralManager.rpcPlayEffectAtLocation(GlobalData.guideEffectGuid, new mw.Vector(locs[i].x, locs[i].y, locs[i].z - 85), 0, mw.Rotation.zero, mw.Vector.one.multiply(2));
                    this.guideEffectIds.push(effectId);
                }
            }
            else {
                if (this.guideEffectIds.length == pointNum) {
                    for (let i = 1; i < pointNum; ++i) {
                        EffectService.getEffectById(this.guideEffectIds[i - 1]).then((effect) => {
                            if (effect)
                                effect.worldTransform.position = (new mw.Vector(locs[i].x, locs[i].y, locs[i].z - 85));
                        });
                    }
                    EffectService.stop(this.guideEffectIds[pointNum - 1]);
                    this.guideEffectIds.length = pointNum - 1;
                }
                else if (this.guideEffectIds.length < pointNum) {
                    for (let i = 0; i < this.guideEffectIds.length; ++i) {
                        EffectService.getEffectById(this.guideEffectIds[i]).then((effect) => {
                            if (effect)
                                effect.worldTransform.position = (new mw.Vector(locs[i + 1].x, locs[i + 1].y, locs[i + 1].z - 85));
                        });
                    }
                    for (let i = this.guideEffectIds.length; i < pointNum - 1; ++i) {
                        let effectId = GeneralManager.rpcPlayEffectAtLocation(GlobalData.guideEffectGuid, new mw.Vector(locs[i + 1].x, locs[i + 1].y, locs[i + 1].z - 85), 0, mw.Rotation.zero, mw.Vector.one.multiply(2));
                        this.guideEffectIds.push(effectId);
                    }
                }
                else if (this.guideEffectIds.length > pointNum) {
                    for (let i = 0; i < pointNum; ++i) {
                        EffectService.getEffectById(this.guideEffectIds[i]).then((effect) => {
                            if (!locs[i + 1])
                                return;
                            if (effect)
                                effect.worldTransform.position = (new mw.Vector(locs[i + 1].x, locs[i + 1].y, locs[i + 1].z - 85));
                        });
                    }
                    for (let i = pointNum; i < this.guideEffectIds.length; ++i) {
                        EffectService.stop(this.guideEffectIds[i]);
                    }
                    this.guideEffectIds.length = pointNum;
                }
            }
        }, 0.1);
    }
    /**是否已拥有这个Item */
    isOwnItem(id) {
        let itemList = this.data.itemList;
        if (itemList.length == 0)
            return false;
        if (!itemList.includes(id))
            return false;
        return true;
    }
    /**得到当前已拥有的Item个数 */
    getItemListCount() {
        return this.data.itemList.length;
    }
    /**保存获得的Item */
    saveAcquiredItem(id) {
        this.shopModuleC.playEffectAndSoundToPlayer(1);
        this.achievementModuleC.onExecuteAchievementAction.call(1, 1);
        this.achievementModuleC.ach(1);
        this.server.net_saveAcquiredItem(id);
        if (this.itemVector3Map.has(id))
            this.itemVector3Map.delete(id);
    }
}

var foreign69 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: CollectionModuleC
});

/**
 * AUTO GENERATE BY UI EDITOR.
 * WARNING: DO NOT MODIFY THIS FILE,MAY CAUSE CODE LOST.
 * AUTHOR: 爱玩游戏的小胖子
 * UI: UI/module/SignInUI/SignInPanel.ui
 * TIME: 2024.08.04-18.39.54
 */
let SignInPanel_Generate = class SignInPanel_Generate extends UIScript {
    get mSignInBtn1() {
        if (!this.mSignInBtn1_Internal && this.uiWidgetBase) {
            this.mSignInBtn1_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainCanvas/Canvas/Canvas_1/mSignInBtn1');
        }
        return this.mSignInBtn1_Internal;
    }
    get mSignInTxt1() {
        if (!this.mSignInTxt1_Internal && this.uiWidgetBase) {
            this.mSignInTxt1_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainCanvas/Canvas/Canvas_1/mSignInBtn1/mSignInTxt1');
        }
        return this.mSignInTxt1_Internal;
    }
    get mReawrdImage1() {
        if (!this.mReawrdImage1_Internal && this.uiWidgetBase) {
            this.mReawrdImage1_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainCanvas/Canvas/Canvas_1/mReawrdImage1');
        }
        return this.mReawrdImage1_Internal;
    }
    get mSignInBtn2() {
        if (!this.mSignInBtn2_Internal && this.uiWidgetBase) {
            this.mSignInBtn2_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainCanvas/Canvas/Canvas_2/mSignInBtn2');
        }
        return this.mSignInBtn2_Internal;
    }
    get mSignInTxt2() {
        if (!this.mSignInTxt2_Internal && this.uiWidgetBase) {
            this.mSignInTxt2_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainCanvas/Canvas/Canvas_2/mSignInBtn2/mSignInTxt2');
        }
        return this.mSignInTxt2_Internal;
    }
    get mReawrdImage2() {
        if (!this.mReawrdImage2_Internal && this.uiWidgetBase) {
            this.mReawrdImage2_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainCanvas/Canvas/Canvas_2/mReawrdImage2');
        }
        return this.mReawrdImage2_Internal;
    }
    get mSignInBtn3() {
        if (!this.mSignInBtn3_Internal && this.uiWidgetBase) {
            this.mSignInBtn3_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainCanvas/Canvas/Canvas_3/mSignInBtn3');
        }
        return this.mSignInBtn3_Internal;
    }
    get mSignInTxt3() {
        if (!this.mSignInTxt3_Internal && this.uiWidgetBase) {
            this.mSignInTxt3_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainCanvas/Canvas/Canvas_3/mSignInBtn3/mSignInTxt3');
        }
        return this.mSignInTxt3_Internal;
    }
    get mReawrdImage3() {
        if (!this.mReawrdImage3_Internal && this.uiWidgetBase) {
            this.mReawrdImage3_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainCanvas/Canvas/Canvas_3/mReawrdImage3');
        }
        return this.mReawrdImage3_Internal;
    }
    get mSignInBtn4() {
        if (!this.mSignInBtn4_Internal && this.uiWidgetBase) {
            this.mSignInBtn4_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainCanvas/Canvas/Canvas_4/mSignInBtn4');
        }
        return this.mSignInBtn4_Internal;
    }
    get mSignInTxt4() {
        if (!this.mSignInTxt4_Internal && this.uiWidgetBase) {
            this.mSignInTxt4_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainCanvas/Canvas/Canvas_4/mSignInBtn4/mSignInTxt4');
        }
        return this.mSignInTxt4_Internal;
    }
    get mReawrdImage4() {
        if (!this.mReawrdImage4_Internal && this.uiWidgetBase) {
            this.mReawrdImage4_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainCanvas/Canvas/Canvas_4/mReawrdImage4');
        }
        return this.mReawrdImage4_Internal;
    }
    get mSignInBtn5() {
        if (!this.mSignInBtn5_Internal && this.uiWidgetBase) {
            this.mSignInBtn5_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainCanvas/Canvas/Canvas_5/mSignInBtn5');
        }
        return this.mSignInBtn5_Internal;
    }
    get mSignInTxt5() {
        if (!this.mSignInTxt5_Internal && this.uiWidgetBase) {
            this.mSignInTxt5_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainCanvas/Canvas/Canvas_5/mSignInBtn5/mSignInTxt5');
        }
        return this.mSignInTxt5_Internal;
    }
    get mReawrdImage5() {
        if (!this.mReawrdImage5_Internal && this.uiWidgetBase) {
            this.mReawrdImage5_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainCanvas/Canvas/Canvas_5/mReawrdImage5');
        }
        return this.mReawrdImage5_Internal;
    }
    get mSignInBtn6() {
        if (!this.mSignInBtn6_Internal && this.uiWidgetBase) {
            this.mSignInBtn6_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainCanvas/Canvas/Canvas_6/mSignInBtn6');
        }
        return this.mSignInBtn6_Internal;
    }
    get mSignInTxt6() {
        if (!this.mSignInTxt6_Internal && this.uiWidgetBase) {
            this.mSignInTxt6_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainCanvas/Canvas/Canvas_6/mSignInBtn6/mSignInTxt6');
        }
        return this.mSignInTxt6_Internal;
    }
    get mReawrdImage6() {
        if (!this.mReawrdImage6_Internal && this.uiWidgetBase) {
            this.mReawrdImage6_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainCanvas/Canvas/Canvas_6/mReawrdImage6');
        }
        return this.mReawrdImage6_Internal;
    }
    get mSignInBtn7() {
        if (!this.mSignInBtn7_Internal && this.uiWidgetBase) {
            this.mSignInBtn7_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainCanvas/Canvas/Canvas_7/mSignInBtn7');
        }
        return this.mSignInBtn7_Internal;
    }
    get mSignInTxt7() {
        if (!this.mSignInTxt7_Internal && this.uiWidgetBase) {
            this.mSignInTxt7_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainCanvas/Canvas/Canvas_7/mSignInBtn7/mSignInTxt7');
        }
        return this.mSignInTxt7_Internal;
    }
    get mReawrdImage7() {
        if (!this.mReawrdImage7_Internal && this.uiWidgetBase) {
            this.mReawrdImage7_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainCanvas/Canvas/Canvas_7/mReawrdImage7');
        }
        return this.mReawrdImage7_Internal;
    }
    get mCloseButton() {
        if (!this.mCloseButton_Internal && this.uiWidgetBase) {
            this.mCloseButton_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainCanvas/mCloseButton');
        }
        return this.mCloseButton_Internal;
    }
    onAwake() {
        //设置能否每帧触发onUpdate
        this.canUpdate = false;
        this.layer = mw.UILayerBottom;
        this.initButtons();
    }
    initButtons() {
        //按钮添加点击
        //按钮添加点击
        this.mSignInBtn1.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick", "mSignInBtn1");
        });
        this.mSignInBtn1.touchMethod = (mw.ButtonTouchMethod.PreciseTap);
        this.mSignInBtn2.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick", "mSignInBtn2");
        });
        this.mSignInBtn2.touchMethod = (mw.ButtonTouchMethod.PreciseTap);
        this.mSignInBtn3.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick", "mSignInBtn3");
        });
        this.mSignInBtn3.touchMethod = (mw.ButtonTouchMethod.PreciseTap);
        this.mSignInBtn4.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick", "mSignInBtn4");
        });
        this.mSignInBtn4.touchMethod = (mw.ButtonTouchMethod.PreciseTap);
        this.mSignInBtn5.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick", "mSignInBtn5");
        });
        this.mSignInBtn5.touchMethod = (mw.ButtonTouchMethod.PreciseTap);
        this.mSignInBtn6.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick", "mSignInBtn6");
        });
        this.mSignInBtn6.touchMethod = (mw.ButtonTouchMethod.PreciseTap);
        this.mSignInBtn7.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick", "mSignInBtn7");
        });
        this.mSignInBtn7.touchMethod = (mw.ButtonTouchMethod.PreciseTap);
        this.mCloseButton.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick", "mCloseButton");
        });
        this.mCloseButton.touchMethod = (mw.ButtonTouchMethod.PreciseTap);
        //按钮多语言
        //文本多语言
        this.initLanguage(this.mSignInTxt1);
        this.initLanguage(this.mSignInTxt2);
        this.initLanguage(this.mSignInTxt3);
        this.initLanguage(this.mSignInTxt4);
        this.initLanguage(this.mSignInTxt5);
        this.initLanguage(this.mSignInTxt6);
        this.initLanguage(this.mSignInTxt7);
        //文本多语言
        this.initLanguage(this.uiWidgetBase.findChildByPath("RootCanvas/MainCanvas/Canvas/Canvas_1/TextBlock"));
        this.initLanguage(this.uiWidgetBase.findChildByPath("RootCanvas/MainCanvas/Canvas/Canvas_1/TextBlock_1"));
        this.initLanguage(this.uiWidgetBase.findChildByPath("RootCanvas/MainCanvas/Canvas/Canvas_1/TextBlock_1_1"));
        this.initLanguage(this.uiWidgetBase.findChildByPath("RootCanvas/MainCanvas/Canvas/Canvas_2/TextBlock"));
        this.initLanguage(this.uiWidgetBase.findChildByPath("RootCanvas/MainCanvas/Canvas/Canvas_2/TextBlock_1"));
        this.initLanguage(this.uiWidgetBase.findChildByPath("RootCanvas/MainCanvas/Canvas/Canvas_2/TextBlock_1_1"));
        this.initLanguage(this.uiWidgetBase.findChildByPath("RootCanvas/MainCanvas/Canvas/Canvas_3/TextBlock"));
        this.initLanguage(this.uiWidgetBase.findChildByPath("RootCanvas/MainCanvas/Canvas/Canvas_3/TextBlock_1"));
        this.initLanguage(this.uiWidgetBase.findChildByPath("RootCanvas/MainCanvas/Canvas/Canvas_3/TextBlock_1_1"));
        this.initLanguage(this.uiWidgetBase.findChildByPath("RootCanvas/MainCanvas/Canvas/Canvas_4/TextBlock"));
        this.initLanguage(this.uiWidgetBase.findChildByPath("RootCanvas/MainCanvas/Canvas/Canvas_4/TextBlock_1"));
        this.initLanguage(this.uiWidgetBase.findChildByPath("RootCanvas/MainCanvas/Canvas/Canvas_4/TextBlock_1_1"));
        this.initLanguage(this.uiWidgetBase.findChildByPath("RootCanvas/MainCanvas/Canvas/Canvas_5/TextBlock"));
        this.initLanguage(this.uiWidgetBase.findChildByPath("RootCanvas/MainCanvas/Canvas/Canvas_5/TextBlock_1"));
        this.initLanguage(this.uiWidgetBase.findChildByPath("RootCanvas/MainCanvas/Canvas/Canvas_5/TextBlock_1_1"));
        this.initLanguage(this.uiWidgetBase.findChildByPath("RootCanvas/MainCanvas/Canvas/Canvas_6/TextBlock"));
        this.initLanguage(this.uiWidgetBase.findChildByPath("RootCanvas/MainCanvas/Canvas/Canvas_6/TextBlock_1"));
        this.initLanguage(this.uiWidgetBase.findChildByPath("RootCanvas/MainCanvas/Canvas/Canvas_6/TextBlock_1_1"));
        this.initLanguage(this.uiWidgetBase.findChildByPath("RootCanvas/MainCanvas/Canvas/Canvas_7/TextBlock"));
        this.initLanguage(this.uiWidgetBase.findChildByPath("RootCanvas/MainCanvas/Canvas/Canvas_7/TextBlock_1"));
        this.initLanguage(this.uiWidgetBase.findChildByPath("RootCanvas/MainCanvas/Canvas/Canvas_7/TextBlock_1_1"));
        this.initLanguage(this.uiWidgetBase.findChildByPath("RootCanvas/MainCanvas/Canvas/Canvas_7/TextBlock_1_2"));
        this.initLanguage(this.uiWidgetBase.findChildByPath("RootCanvas/MainCanvas/TextBlock_3"));
        this.initLanguage(this.uiWidgetBase.findChildByPath("RootCanvas/MainCanvas/TextBlock_4"));
    }
    /*初始化多语言*/
    initLanguage(ui) {
        let call = mw.UIScript.getBehavior("lan");
        if (call && ui) {
            call(ui);
        }
    }
    onShow(...params) { }
    ;
    /*显示panel*/
    show(...param) {
        mw.UIService.showUI(this, this.layer, ...param);
    }
    /*隐藏panel*/
    hide() {
        mw.UIService.hideUI(this);
    }
};
SignInPanel_Generate = __decorate([
    UIBind('UI/module/SignInUI/SignInPanel.ui')
], SignInPanel_Generate);
var SignInPanel_Generate$1 = SignInPanel_Generate;

var foreign144 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: SignInPanel_Generate$1
});

/**
 * AUTHOR: 爱玩游戏的小胖子
 * TIME: 2023.06.26-16.29.14
 */
class SignInPanel extends SignInPanel_Generate$1 {
    constructor() {
        super(...arguments);
        this.signInModuleC = null;
        this.adTips = null;
        this.mSignInBtns = [];
        // private mSignInTxts: mw.TextBlock[] = [];
        this.mRewardImages = [];
        this.isSignIns = [];
        this.whatDay = 0;
    }
    /**
     * 构造UI文件成功后，在合适的时机最先初始化一次
     */
    onStart() {
        //设置能否每帧触发onUpdate
        this.canUpdate = false;
        this.layer = mw.UILayerMiddle;
        this.initDatas();
        this.bindButton();
    }
    /**初始化数据 */
    initDatas() {
        this.signInModuleC = ModuleService.getModule(SignInModuleC);
        this.adTips = mw.UIService.getUI(AdTips);
        for (let i = 1; i <= 7; ++i) {
            this.mSignInBtns.push(this['mSignInBtn' + i]);
            this.mSignInBtns[i - 1].renderOpacity = 0;
            this.mSignInBtns[i - 1].onClicked.add(() => {
                this.bindSignInButton(i - 1);
            });
            // this.mSignInTxts.push((this['mSignInTxt' + i] as mw.TextBlock));
            // this.mSignInTxts[i - 1].visibility = mw.SlateVisibility.Collapsed;
            this.mRewardImages.push(this['mReawrdImage' + i]);
            this.mRewardImages[i - 1].visibility = mw.SlateVisibility.Collapsed;
        }
    }
    /**按钮绑定 */
    bindButton() {
        this.mCloseButton.onClicked.add(() => {
            this.hide();
        });
    }
    bindSignInButton(index) {
        if (this.isSignIns[index]) {
            Notice.showDownNotice("已领取哟~");
        }
        else {
            if (index < this.whatDay) {
                if (GlobalData.isOpenIAA) {
                    this.adTips.showAdTips(index, AdType.SignIn);
                }
                else {
                    this.signInModuleC.saveIsSignIns(index);
                }
            }
            else if (index == this.whatDay) {
                this.signInModuleC.saveIsSignIns(index);
            }
            else {
                Notice.showDownNotice("未到领取时间哟~");
            }
        }
    }
    onShow(...params) {
        this.isSignIns = this.signInModuleC.getIsSignIns();
        this.whatDay = Number(Utils.getWhatDay()) - 1;
        for (let i = 0; i < this.isSignIns.length; ++i) {
            if (this.isSignIns[i]) {
                this.mRewardImages[i].visibility = mw.SlateVisibility.SelfHitTestInvisible;
                this.mSignInBtns[i].renderOpacity = 0;
            }
            else {
                if (i < this.whatDay) {
                    this.mSignInBtns[i].renderOpacity = 0.75;
                }
                else {
                    this.mSignInBtns[i].renderOpacity = 0;
                }
                this.mRewardImages[i].visibility = mw.SlateVisibility.Collapsed;
            }
        }
    }
}

var foreign98 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: SignInPanel
});

class SignInModuleC extends ModuleC {
    constructor() {
        super(...arguments);
        this.hudModuleC = null;
        this.signInPanel = null;
        this.isSignIns = [];
    }
    /** 当脚本被实例后，会在第一帧更新前调用此函数 */
    onStart() {
        this.initData();
        this.registerAction();
    }
    /**初始化数据 */
    initData() {
        this.hudModuleC = ModuleService.getModule(HUDModuleC);
        this.signInPanel = mw.UIService.getUI(SignInPanel);
    }
    /**注册事件 */
    registerAction() {
        this.hudModuleC.onOpenSignInAction.add(() => {
            this.signInPanel.show();
        });
        this.hudModuleC.onOpenSignInAction1.add(() => {
            this.isMonday();
        });
    }
    onEnterScene(sceneType) {
        // TimeUtil.delaySecond(5).then(() => {
        //     this.isMonday();
        // });
    }
    /**是否是星期一 */
    isMonday() {
        let curWhatDay = Utils.getDay();
        this.isSignIns = this.data.isSignIns;
        this.resetDays();
        if (this.data.lastDay != curWhatDay) {
            this.resetDay();
            this.saveLastDay(curWhatDay);
            if (Utils.getWhatDay() == "1") {
                this.resetIsSignIns();
            }
        }
        this.signInPanel.show();
    }
    resetDay() {
        let j = Number(Utils.getWhatDay()) - 1;
        for (let i = j; i < 7; ++i) {
            if (this.isSignIns[i]) {
                this.isSignIns[i] = false;
            }
        }
    }
    resetDays() {
        let j = Number(Utils.getWhatDay()) - 1;
        for (let i = j + 1; i < 7; ++i) {
            if (this.isSignIns[i]) {
                this.isSignIns[i] = false;
            }
        }
    }
    /**得到是否已经签到的数组 */
    getIsSignIns() {
        return this.isSignIns;
    }
    /**
     * 保存当天是否已经签到
     * @param day 当天
     */
    saveIsSignIns(day) {
        this.getSignInReward(day);
        this.isSignIns[day] = true;
        this.server.net_saveIsSignIns(day);
    }
    /**重置签到 */
    resetIsSignIns() {
        for (let i = 0; i < 7; ++i) {
            this.isSignIns[i] = false;
        }
        this.server.net_resetIsSignIns();
    }
    /**
     * 记录今天是那一天
     * @param whatDay 那一天
     */
    saveLastDay(whatDay) {
        this.server.net_saveLastDay(whatDay);
    }
    /**得到签到奖励 */
    getSignInReward(day) {
        this.signInPanel.hide();
        switch (day) {
            case 0:
                this.hudModuleC.setCurAttackValue(100);
                this.hudModuleC.setMaxHp(1000);
                Notice.showDownNotice("得到奖励攻击力+100生命值+1000");
                break;
            case 1:
                this.hudModuleC.setCurAttackValue(200);
                this.hudModuleC.setMaxHp(2000);
                Notice.showDownNotice("得到奖励攻击力+200生命值+2000");
                break;
            case 2:
                this.hudModuleC.setCurAttackValue(300);
                this.hudModuleC.setMaxHp(3000);
                Notice.showDownNotice("得到奖励攻击力+300生命值+3000");
                break;
            case 3:
                this.hudModuleC.setCurAttackValue(400);
                this.hudModuleC.setMaxHp(4000);
                Notice.showDownNotice("得到奖励攻击力+400生命值+4000");
                break;
            case 4:
                this.hudModuleC.setCurAttackValue(500);
                this.hudModuleC.setMaxHp(5000);
                Notice.showDownNotice("得到奖励攻击力+500生命值+5000");
                break;
            case 5:
                this.hudModuleC.setCurAttackValue(600);
                this.hudModuleC.setMaxHp(6000);
                Notice.showDownNotice("得到奖励攻击力+600生命值+6000");
                break;
            case 6:
                this.hudModuleC.firstGame2();
                this.hudModuleC.setCurAttackValue(700);
                this.hudModuleC.setMaxHp(7000);
                Notice.showDownNotice("得到奖励攻击力+700生命值+7000");
                break;
        }
    }
}

var foreign96 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: SignInModuleC
});

class AdsModuleC extends ModuleC {
    constructor() {
        super(...arguments);
        /**商店模块 */
        this.shopModuleC = null;
        this.hudModuleC = null;
        this.collectionModuleC = null;
        this.signInModuleC = null;
        this.petRafflePanel = null;
        /**广告面板 */
        this.adTips = null;
        this.collectionItemPanel = null;
    }
    /** 当脚本被实例后，会在第一帧更新前调用此函数 */
    onStart() {
        this.initData();
        this.registerActions();
    }
    /**初始化数据 */
    initData() {
        this.hudModuleC = ModuleService.getModule(HUDModuleC);
        this.shopModuleC = ModuleService.getModule(ShopModuleC);
        this.collectionModuleC = ModuleService.getModule(CollectionModuleC);
        this.signInModuleC = ModuleService.getModule(SignInModuleC);
        this.adTips = mw.UIService.getUI(AdTips);
        this.petRafflePanel = mw.UIService.getUI(PetRafflePanel);
        this.collectionItemPanel = mw.UIService.getUI(CollectionItemPanel);
    }
    /**注册事件 */
    registerActions() {
        this.adTips.onWatchAdsAction.add(this.playAds.bind(this));
    }
    /**播放广告 */
    playAds(id, adType) {
        this.getReward(id, adType);
    }
    /**获得奖励 */
    getReward(id, adType) {
        switch (adType) {
            case AdType.ChangeCloth:
                this.shopModuleC.onSaveClothAction.call();
                this.shopModuleC.adsOnCompleteCloth();
                break;
            case AdType.Weapon:
                this.hudModuleC.pickUpWeapon(id);
                this.shopModuleC.adsOnCompleteWeapon();
                break;
            case AdType.Wing:
                this.hudModuleC.pickUpWing(id);
                this.shopModuleC.adsOnCompleteWing();
                break;
            case AdType.Tail:
                this.hudModuleC.pickUptailEffect(id);
                this.shopModuleC.adsOnCompleteTail();
                break;
            case AdType.Tips:
                this.collectionModuleC.startGuide(id);
                break;
            case AdType.AddCount:
                this.collectionItemPanel.getReward();
                break;
            case AdType.AdsReward:
                this.hudModuleC.adsReward();
                break;
            case AdType.SignIn:
                this.signInModuleC.saveIsSignIns(id);
                break;
            case AdType.Raffle:
                this.petRafflePanel.getRaffle();
                break;
            case AdType.RandomGetId:
                this.collectionModuleC.randomGetId();
                break;
        }
    }
}
var AdType;
(function (AdType) {
    /**换装 */
    AdType[AdType["ChangeCloth"] = 1] = "ChangeCloth";
    /**武器 */
    AdType[AdType["Weapon"] = 2] = "Weapon";
    /**翅膀 */
    AdType[AdType["Wing"] = 3] = "Wing";
    /**拖尾 */
    AdType[AdType["Tail"] = 4] = "Tail";
    /**提示 */
    AdType[AdType["Tips"] = 5] = "Tips";
    /**增加使用次数 */
    AdType[AdType["AddCount"] = 6] = "AddCount";
    /**AdsReward */
    AdType[AdType["AdsReward"] = 7] = "AdsReward";
    /**SignIn */
    AdType[AdType["SignIn"] = 8] = "SignIn";
    /**Raffle */
    AdType[AdType["Raffle"] = 9] = "Raffle";
    AdType[AdType["RandomGetId"] = 10] = "RandomGetId";
})(AdType || (AdType = {}));

var foreign59 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    get AdType () { return AdType; },
    default: AdsModuleC
});

/**
 * AUTO GENERATE BY UI EDITOR.
 * WARNING: DO NOT MODIFY THIS FILE,MAY CAUSE CODE LOST.
 * AUTHOR: 爱玩游戏的小胖子
 * UI: UI/common/AdTips.ui
 * TIME: 2024.08.04-18.39.52
 */
let AdTips_Generate = class AdTips_Generate extends UIScript {
    get mTitleTxt() {
        if (!this.mTitleTxt_Internal && this.uiWidgetBase) {
            this.mTitleTxt_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/Canvas/Canvas_1/mTitleTxt');
        }
        return this.mTitleTxt_Internal;
    }
    get mContentTxt() {
        if (!this.mContentTxt_Internal && this.uiWidgetBase) {
            this.mContentTxt_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/Canvas/Canvas_1/mContentTxt');
        }
        return this.mContentTxt_Internal;
    }
    get mNoBtn() {
        if (!this.mNoBtn_Internal && this.uiWidgetBase) {
            this.mNoBtn_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/Canvas/Canvas_1/mNoBtn');
        }
        return this.mNoBtn_Internal;
    }
    get mYesBtn() {
        if (!this.mYesBtn_Internal && this.uiWidgetBase) {
            this.mYesBtn_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/Canvas/Canvas_1/mYesBtn');
        }
        return this.mYesBtn_Internal;
    }
    onAwake() {
        //设置能否每帧触发onUpdate
        this.canUpdate = false;
        this.layer = mw.UILayerBottom;
        this.initButtons();
    }
    initButtons() {
        //按钮添加点击
        this.mNoBtn.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick", "mNoBtn");
        });
        this.initLanguage(this.mNoBtn);
        this.mNoBtn.touchMethod = (mw.ButtonTouchMethod.PreciseTap);
        //按钮添加点击
        //按钮多语言
        //文本多语言
        this.initLanguage(this.mTitleTxt);
        this.initLanguage(this.mContentTxt);
        //文本多语言
    }
    /*初始化多语言*/
    initLanguage(ui) {
        let call = mw.UIScript.getBehavior("lan");
        if (call && ui) {
            call(ui);
        }
    }
    onShow(...params) { }
    ;
    /*显示panel*/
    show(...param) {
        mw.UIService.showUI(this, this.layer, ...param);
    }
    /*隐藏panel*/
    hide() {
        mw.UIService.hideUI(this);
    }
};
AdTips_Generate = __decorate([
    UIBind('UI/common/AdTips.ui')
], AdTips_Generate);
var AdTips_Generate$1 = AdTips_Generate;

var foreign109 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: AdTips_Generate$1
});

class AdTips extends AdTips_Generate$1 {
    constructor() {
        super(...arguments);
        /**点击看广告事件 */
        this.onWatchAdsAction = new Action2();
        /**配置表的ID */
        this.id = -1;
        this.adType = -1;
    }
    /**
     * 构造UI文件成功后，在合适的时机最先初始化一次
     */
    onStart() {
        //设置能否每帧触发onUpdate
        this.canUpdate = false;
        this.layer = mw.UILayerMiddle;
        this.initData();
        this.bindButtons();
    }
    /**初始化数据 */
    initData() {
    }
    /**按钮绑定 */
    bindButtons() {
        this.mYesBtn.onClose.add(this.onClickYesBtn.bind(this));
        this.mNoBtn.onClicked.add(() => {
            if (!this.visible)
                return;
            this.hide();
        });
    }
    onClickYesBtn(isSuccess) {
        if (!isSuccess) {
            Notice.showDownNotice("获取失败，请重试");
            return;
        }
        this.hideAdTips();
        this.onWatchAdsAction.call(this.id, this.adType);
    }
    /**显示此界面 */
    showAdTips(id, adType) {
        // if (this.visible) return;
        this.id = id;
        this.adType = adType;
        this.show();
    }
    /**隐藏此界面 */
    hideAdTips() {
        if (!this.visible)
            return;
        this.hide();
    }
    onShow(...params) {
        switch (this.adType) {
            case AdType.ChangeCloth:
                this.mContentTxt.text = "可以穿戴这套服装哟~";
                break;
            case AdType.Weapon:
                this.mContentTxt.text = "可以使用这个厉害的武器哟~";
                break;
            case AdType.Wing:
                this.mContentTxt.text = "可以使用超快翅膀飞行哟~";
                break;
            case AdType.Tail:
                this.mContentTxt.text = "可以使用这个帅气的拖尾哟~";
                break;
            case AdType.Tips:
                this.mContentTxt.text = "可以帮你找到它哟~";
                break;
            case AdType.AddCount:
                this.mContentTxt.text = "可以增加2次使用次数哟~";
                break;
            case AdType.AdsReward:
                this.mContentTxt.text = "可以随机提升攻击力、最大生命值、移动速度、飞行速度、跳跃高度。";
                break;
            case AdType.SignIn:
                this.mContentTxt.text = "可以补签哟~";
                break;
            case AdType.Raffle:
                this.mContentTxt.text = "可以免费抽奖哟~";
                break;
            case AdType.RandomGetId:
                this.mContentTxt.text = "带你去找皮肤~";
                break;
        }
        Console.error("[AdTips-onShow]");
    }
}

var foreign1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: AdTips
});

/**
 * AUTO GENERATE BY UI EDITOR.
 * WARNING: DO NOT MODIFY THIS FILE,MAY CAUSE CODE LOST.
 * AUTHOR: 爱玩游戏的小胖子
 * UI: UI/module/CollectionUI/CollectionTip.ui
 * TIME: 2024.08.04-18.39.53
 */
let CollectionTip_Generate = class CollectionTip_Generate extends UIScript {
    get mCloseBtn() {
        if (!this.mCloseBtn_Internal && this.uiWidgetBase) {
            this.mCloseBtn_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mCloseBtn');
        }
        return this.mCloseBtn_Internal;
    }
    get mIconImage() {
        if (!this.mIconImage_Internal && this.uiWidgetBase) {
            this.mIconImage_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainCanvas/IconCanvas/mIconImage');
        }
        return this.mIconImage_Internal;
    }
    get mNameText() {
        if (!this.mNameText_Internal && this.uiWidgetBase) {
            this.mNameText_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainCanvas/TextCanvas/mNameText');
        }
        return this.mNameText_Internal;
    }
    onAwake() {
        //设置能否每帧触发onUpdate
        this.canUpdate = false;
        this.layer = mw.UILayerBottom;
        this.initButtons();
    }
    initButtons() {
        //按钮添加点击
        //按钮添加点击
        this.mCloseBtn.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick", "mCloseBtn");
        });
        this.mCloseBtn.touchMethod = (mw.ButtonTouchMethod.PreciseTap);
        //按钮多语言
        //文本多语言
        this.initLanguage(this.mNameText);
        //文本多语言
        this.initLanguage(this.uiWidgetBase.findChildByPath("RootCanvas/MainCanvas/TextCanvas/TextBlock"));
    }
    /*初始化多语言*/
    initLanguage(ui) {
        let call = mw.UIScript.getBehavior("lan");
        if (call && ui) {
            call(ui);
        }
    }
    onShow(...params) { }
    ;
    /*显示panel*/
    show(...param) {
        mw.UIService.showUI(this, this.layer, ...param);
    }
    /*隐藏panel*/
    hide() {
        mw.UIService.hideUI(this);
    }
};
CollectionTip_Generate = __decorate([
    UIBind('UI/module/CollectionUI/CollectionTip.ui')
], CollectionTip_Generate);
var CollectionTip_Generate$1 = CollectionTip_Generate;

var foreign126 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: CollectionTip_Generate$1
});

/**
 * AUTHOR: 爱玩游戏的小胖子
 * TIME: 2023.06.19-19.56.33
 */
class CollectionTipPanel extends CollectionTip_Generate$1 {
    /**
     * 构造UI文件成功后，在合适的时机最先初始化一次
     */
    onStart() {
        //设置能否每帧触发onUpdate
        this.canUpdate = false;
        this.layer = mw.UILayerMiddle;
        this.initDatas();
        this.bindButtons();
    }
    /**初始化数据 */
    initDatas() {
    }
    /**按钮绑定 */
    bindButtons() {
        this.mCloseBtn.onClicked.add(() => {
            this.hide();
        });
    }
    /**显示 */
    showCollectionTip(icon, name) {
        this.mIconImage.imageGuid = icon;
        this.mNameText.text = name;
        this.show();
    }
}

var foreign73 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: CollectionTipPanel
});

let Collections = class Collections extends mw.Script {
    constructor() {
        super(...arguments);
        /**----------------------------------------[客户端]---------------------------------------- */
        this.collectionTipPanel = null;
        this.collectionModuleC = null;
        /**宝箱Guid */
        this.treasureBoxGuids = ["20910", "20915", "20959", "21008", "21013", "21006", "141901", "141896"];
        this.collections = null;
        this.treasureBoxGos = [];
        /**----------------------------------------[服务端]---------------------------------------- */
    }
    /** 当脚本被实例后，会在第一帧更新前调用此函数 */
    onStart() {
        if (mw.SystemUtil.isClient()) {
            this.onStartC();
        }
        else if (mw.SystemUtil.isServer()) {
            this.onStartS();
        }
    }
    /**
     * 周期函数 每帧执行
     * 此函数执行需要将this.useUpdate赋值为true
     * @param dt 当前帧与上一帧的延迟 / 秒
     */
    onUpdate(dt) {
        if (mw.SystemUtil.isClient()) {
            this.onUpdateC(dt);
        }
        else if (mw.SystemUtil.isServer()) {
            this.onUpdateS(dt);
        }
    }
    get getCollectionTipPanel() {
        if (this.collectionTipPanel == null) {
            this.collectionTipPanel = mw.UIService.getUI(CollectionTipPanel);
        }
        return this.collectionTipPanel;
    }
    get getCollectionModuleC() {
        if (this.collectionModuleC == null) {
            this.collectionModuleC = ModuleService.getModule(CollectionModuleC);
        }
        return this.collectionModuleC;
    }
    /**客户端的onStart */
    async onStartC() {
        await ModuleService.ready();
        this.collections = GameConfig.Collection;
        TimeUtil.delaySecond(5).then(() => {
            this.findGameObject();
        });
    }
    /**find GameObject */
    findGameObject() {
        let length = this.collections.getAllElement().length;
        let i = 0;
        let interval = TimeUtil.setInterval(async () => {
            let collection = this.collections.getElement(i + 1);
            let triggerGuid = collection.TriggerGuid;
            let trigger = null;
            if (triggerGuid) {
                trigger = await GameObject.asyncFindGameObjectById(triggerGuid);
                trigger.asyncReady().then(() => {
                    trigger.onEnter.add((char) => {
                        this.onEnterTrigger(char, collection.id, collection.CollectionIcon, collection.Annotation, collection.CollectionType);
                    });
                    // Console.error("id = " + id);
                });
            }
            let id = collection.id;
            let treasureBoxGuid = "";
            switch (collection.CollectionType) {
                case CollectionType.FightingSkill:
                    treasureBoxGuid = this.getCollectionModuleC.isOwnItem(id) ? this.treasureBoxGuids[1] : this.treasureBoxGuids[0];
                    break;
                case CollectionType.Gong:
                    treasureBoxGuid = this.getCollectionModuleC.isOwnItem(id) ? this.treasureBoxGuids[3] : this.treasureBoxGuids[2];
                    break;
                case CollectionType.Elixir:
                    treasureBoxGuid = this.getCollectionModuleC.isOwnItem(id) ? this.treasureBoxGuids[5] : this.treasureBoxGuids[4];
                    break;
                case CollectionType.AnomalousFire:
                    treasureBoxGuid = this.getCollectionModuleC.isOwnItem(id) ? this.treasureBoxGuids[7] : this.treasureBoxGuids[6];
                    break;
            }
            let pos = trigger.worldTransform.position;
            this.getCollectionModuleC.setItemVector3(id, pos);
            let treasureBoxGo = await SpawnManager.asyncSpawn({
                guid: treasureBoxGuid,
                replicates: false,
                transform: new mw.Transform(new mw.Vector(pos.x, pos.y, pos.z - 50), trigger.worldTransform.rotation, mw.Vector.one)
            });
            this.treasureBoxGos.push(treasureBoxGo);
            ++i;
            if (i >= length) {
                TimeUtil.clearInterval(interval);
            }
        }, 0.2);
    }
    /**玩家进入触发器 */
    onEnterTrigger(char, id, icon, name, collectionType) {
        if (char != Player.localPlayer.character)
            return;
        if (this.getCollectionModuleC.isOwnItem(id)) {
            Notice.showDownNotice("宝箱是空的哎~");
            return;
        }
        this.getCollectionModuleC.saveAcquiredItem(id);
        this.getCollectionTipPanel.showCollectionTip(icon, name);
        this.changeTreasureBox(id, collectionType);
    }
    /**更换宝箱 */
    async changeTreasureBox(id, collectionType) {
        let treasureBoxGuid = "";
        switch (collectionType) {
            case CollectionType.FightingSkill:
                treasureBoxGuid = this.treasureBoxGuids[1];
                break;
            case CollectionType.Gong:
                treasureBoxGuid = this.treasureBoxGuids[3];
                break;
            case CollectionType.Elixir:
                treasureBoxGuid = this.treasureBoxGuids[5];
                break;
            case CollectionType.AnomalousFire:
                treasureBoxGuid = this.treasureBoxGuids[7];
                break;
        }
        let tmpATreasureBox = this.treasureBoxGos[id - 1];
        let treasureBoxGo = await SpawnManager.asyncSpawn({
            guid: treasureBoxGuid,
            replicates: false,
            transform: tmpATreasureBox.worldTransform
        });
        tmpATreasureBox.destroy();
        this.treasureBoxGos[id - 1] = treasureBoxGo;
    }
    /**客户端的onUpdate */
    onUpdateC(dt) {
    }
    /**----------------------------------------[客户端]---------------------------------------- */
    /**----------------------------------------[服务端]---------------------------------------- */
    /**服务端的onStart */
    onStartS() {
    }
    /**服务端的onUpdate */
    onUpdateS(dt) {
    }
};
Collections = __decorate([
    Component
], Collections);
var Collections$1 = Collections;

var foreign2 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: Collections$1
});

/**
 * AUTO GENERATE BY UI EDITOR.
 * WARNING: DO NOT MODIFY THIS FILE,MAY CAUSE CODE LOST.
 * AUTHOR: 爱玩游戏的小胖子
 * UI: UI/common/ConfirmPanel.ui
 * TIME: 2024.08.04-18.39.52
 */
let ConfirmPanel_Generate = class ConfirmPanel_Generate extends UIScript {
    get mTitleTextBlock() {
        if (!this.mTitleTextBlock_Internal && this.uiWidgetBase) {
            this.mTitleTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainCanvas/mTitleTextBlock');
        }
        return this.mTitleTextBlock_Internal;
    }
    get mContentTextBlock() {
        if (!this.mContentTextBlock_Internal && this.uiWidgetBase) {
            this.mContentTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainCanvas/mContentTextBlock');
        }
        return this.mContentTextBlock_Internal;
    }
    get mSureButton() {
        if (!this.mSureButton_Internal && this.uiWidgetBase) {
            this.mSureButton_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainCanvas/mSureButton');
        }
        return this.mSureButton_Internal;
    }
    get mSureTextBlock() {
        if (!this.mSureTextBlock_Internal && this.uiWidgetBase) {
            this.mSureTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainCanvas/mSureButton/mSureTextBlock');
        }
        return this.mSureTextBlock_Internal;
    }
    get mCancleButton() {
        if (!this.mCancleButton_Internal && this.uiWidgetBase) {
            this.mCancleButton_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainCanvas/mCancleButton');
        }
        return this.mCancleButton_Internal;
    }
    get mCancleTextBlock() {
        if (!this.mCancleTextBlock_Internal && this.uiWidgetBase) {
            this.mCancleTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainCanvas/mCancleButton/mCancleTextBlock');
        }
        return this.mCancleTextBlock_Internal;
    }
    onAwake() {
        //设置能否每帧触发onUpdate
        this.canUpdate = false;
        this.layer = mw.UILayerBottom;
        this.initButtons();
    }
    initButtons() {
        //按钮添加点击
        //按钮添加点击
        this.mSureButton.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick", "mSureButton");
        });
        this.mSureButton.touchMethod = (mw.ButtonTouchMethod.PreciseTap);
        this.mCancleButton.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick", "mCancleButton");
        });
        this.mCancleButton.touchMethod = (mw.ButtonTouchMethod.PreciseTap);
        //按钮多语言
        //文本多语言
        this.initLanguage(this.mTitleTextBlock);
        this.initLanguage(this.mContentTextBlock);
        this.initLanguage(this.mSureTextBlock);
        this.initLanguage(this.mCancleTextBlock);
        //文本多语言
    }
    /*初始化多语言*/
    initLanguage(ui) {
        let call = mw.UIScript.getBehavior("lan");
        if (call && ui) {
            call(ui);
        }
    }
    onShow(...params) { }
    ;
    /*显示panel*/
    show(...param) {
        mw.UIService.showUI(this, this.layer, ...param);
    }
    /*隐藏panel*/
    hide() {
        mw.UIService.hideUI(this);
    }
};
ConfirmPanel_Generate = __decorate([
    UIBind('UI/common/ConfirmPanel.ui')
], ConfirmPanel_Generate);
var ConfirmPanel_Generate$1 = ConfirmPanel_Generate;

var foreign110 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: ConfirmPanel_Generate$1
});

class ConfirmPanel extends ConfirmPanel_Generate$1 {
    constructor() {
        super(...arguments);
        this.callback = null;
    }
    /**
     * 构造UI文件成功后，在合适的时机最先初始化一次
     */
    onStart() {
        //设置能否每帧触发onUpdate
        this.canUpdate = false;
        this.layer = UILayerMiddle;
        this.bindButton();
    }
    bindButton() {
        this.mSureButton.onClicked.add(() => {
            this.hide();
            if (this.callback)
                this.callback();
        });
        this.mCancleButton.onClicked.add(() => {
            this.hide();
        });
    }
    confirmTips(callback, contentText, yesText = "购买", noText = "取消", titleText = "提示") {
        this.mSureTextBlock.text = yesText;
        this.mCancleTextBlock.text = noText;
        this.mTitleTextBlock.text = titleText;
        this.mContentTextBlock.text = contentText;
        this.callback = callback;
        this.show();
    }
}

var foreign3 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: ConfirmPanel
});

var OnClickType;
(function (OnClickType) {
    /**坐 */
    OnClickType[OnClickType["Sit"] = 1] = "Sit";
    /**震荡 */
    OnClickType[OnClickType["Shake"] = 2] = "Shake";
    /**跳舞 */
    OnClickType[OnClickType["Dance"] = 3] = "Dance";
})(OnClickType || (OnClickType = {}));
var AchievementType;
(function (AchievementType) {
    /**1-获取宝箱 */
    AchievementType[AchievementType["achType1"] = 1] = "achType1";
    /**2-提升等级 */
    AchievementType[AchievementType["achType2"] = 2] = "achType2";
    /**3-提升攻击力 */
    AchievementType[AchievementType["achType3"] = 3] = "achType3";
    /**4 - 提升血量 */
    AchievementType[AchievementType["achType4"] = 4] = "achType4";
    /**5 - 击杀人数 */
    AchievementType[AchievementType["achType5"] = 5] = "achType5";
    /**6 - 最大高度 */
    AchievementType[AchievementType["achType6"] = 6] = "achType6";
    /**7 - 获取宠物数 */
    AchievementType[AchievementType["achType7"] = 7] = "achType7";
    /**8 - 击飞次数 */
    AchievementType[AchievementType["achType8"] = 8] = "achType8";
    /**9 - 发射次数 */
    AchievementType[AchievementType["achType9"] = 9] = "achType9";
    /**10 - 跳舞次数 */
    AchievementType[AchievementType["achType10"] = 10] = "achType10";
    /**11 - 坐下次数 */
    AchievementType[AchievementType["achType11"] = 11] = "achType11";
    /**12 - 使用武器次数 */
    AchievementType[AchievementType["achType12"] = 12] = "achType12";
    /**13 - 换装次数 */
    AchievementType[AchievementType["achType13"] = 13] = "achType13";
    /**14 - 使用翅膀次数 */
    AchievementType[AchievementType["achType14"] = 14] = "achType14";
    /**15 - 使用拖尾次数 */
    AchievementType[AchievementType["achType15"] = 15] = "achType15";
    /**16 - 切换背景音乐次数 */
    AchievementType[AchievementType["achType16"] = 16] = "achType16";
    /**17 - 抽奖次数 */
    AchievementType[AchievementType["achType17"] = 17] = "achType17";
    /**18 - 使用藏宝图次数 */
    AchievementType[AchievementType["achType18"] = 18] = "achType18";
    AchievementType[AchievementType["achType20"] = 20] = "achType20";
    AchievementType[AchievementType["achType21"] = 21] = "achType21";
    AchievementType[AchievementType["achType22"] = 22] = "achType22";
    AchievementType[AchievementType["achType23"] = 23] = "achType23";
    AchievementType[AchievementType["achType24"] = 24] = "achType24";
    AchievementType[AchievementType["achType25"] = 25] = "achType25";
    AchievementType[AchievementType["achType26"] = 26] = "achType26";
    AchievementType[AchievementType["achType27"] = 27] = "achType27";
    AchievementType[AchievementType["achType28"] = 28] = "achType28";
    AchievementType[AchievementType["achType29"] = 29] = "achType29";
})(AchievementType || (AchievementType = {}));

var foreign47 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    get AchievementType () { return AchievementType; },
    get OnClickType () { return OnClickType; }
});

/**
 * AUTO GENERATE BY UI EDITOR.
 * WARNING: DO NOT MODIFY THIS FILE,MAY CAUSE CODE LOST.
 * AUTHOR: 爱玩游戏的小胖子
 * UI: UI/common/OnClickPanel.ui
 * TIME: 2024.08.04-18.39.52
 */
let OnClickPanel_Generate = class OnClickPanel_Generate extends UIScript {
    get mBgImage() {
        if (!this.mBgImage_Internal && this.uiWidgetBase) {
            this.mBgImage_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mBgImage');
        }
        return this.mBgImage_Internal;
    }
    get mClickBtn() {
        if (!this.mClickBtn_Internal && this.uiWidgetBase) {
            this.mClickBtn_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mClickBtn');
        }
        return this.mClickBtn_Internal;
    }
    onAwake() {
        //设置能否每帧触发onUpdate
        this.canUpdate = false;
        this.layer = mw.UILayerBottom;
        this.initButtons();
    }
    initButtons() {
        //按钮添加点击
        //按钮添加点击
        this.mClickBtn.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick", "mClickBtn");
        });
        this.mClickBtn.touchMethod = (mw.ButtonTouchMethod.PreciseTap);
        //按钮多语言
        //文本多语言
        //文本多语言
    }
    /*初始化多语言*/
    initLanguage(ui) {
        let call = mw.UIScript.getBehavior("lan");
        if (call && ui) {
            call(ui);
        }
    }
    onShow(...params) { }
    ;
    /*显示panel*/
    show(...param) {
        mw.UIService.showUI(this, this.layer, ...param);
    }
    /*隐藏panel*/
    hide() {
        mw.UIService.hideUI(this);
    }
};
OnClickPanel_Generate = __decorate([
    UIBind('UI/common/OnClickPanel.ui')
], OnClickPanel_Generate);
var OnClickPanel_Generate$1 = OnClickPanel_Generate;

var foreign117 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: OnClickPanel_Generate$1
});

/**
 * AUTHOR: 爱玩游戏的小胖子
 * TIME: 2023.05.31-17.50.28
 */
class OnClickPanel extends OnClickPanel_Generate$1 {
    constructor() {
        super(...arguments);
        this.hudModuleC = null;
        this.id = -1;
        this.onClickType = -1;
        this.offset = new mw.Vector(0, 0, 0);
        this.obj = null;
    }
    /**
     * 构造UI文件成功后，在合适的时机最先初始化一次
     */
    onStart() {
        //设置能否每帧触发onUpdate
        this.canUpdate = false;
        this.layer = mw.UILayerMiddle;
        this.initData();
        this.bindButtons();
        this.registerActions();
        Console.error("[OnClickPanel-onStart]");
    }
    /**初始化数据 */
    initData() {
        // this.offset = new mw.Vector(0, 0, 0);
        this.hudModuleC = ModuleService.getModule(HUDModuleC);
    }
    /**按钮绑定 */
    bindButtons() {
        this.mClickBtn.onClicked.add(this.onClickButtons.bind(this));
    }
    /**注册事件 */
    registerActions() {
        this.hudModuleC.onJumpAction.add(() => {
            if (this.onClickType == OnClickType.Sit) {
                Event.dispatchToServer("Sit", false, this.id);
            }
            if (this.onClickType == OnClickType.Dance) {
                Event.dispatchToLocal("Dance", false, this.id);
            }
        });
    }
    onClickButtons() {
        if (!this.id)
            return;
        Console.error("OnClickPanel-this.id = " + this.id);
        this.canUpdate = false;
        this.hide();
        if (this.id == -1)
            return;
        if (this.onClickType == OnClickType.Sit) {
            Console.error("[Sit] = " + this.id);
            Event.dispatchToServer("Sit", true, this.id);
            Event.dispatchToLocal("achSit", 1);
        }
        else if (this.onClickType == OnClickType.Shake) {
            Console.error("[Shake] = " + this.id);
            this.hudModuleC.onMusicAction.call();
        }
        else if (this.onClickType == OnClickType.Dance) {
            Console.error("[Dance] = " + this.id);
            Event.dispatchToLocal("Dance", true, this.id);
            Event.dispatchToLocal("achDance", 1);
        }
    }
    /**显示NPC按钮 */
    showBtn(id, obj, onClickType) {
        this.id = id;
        this.onClickType = onClickType;
        this.canUpdate = true;
        this.obj = obj;
        let pos = InputUtil.projectWorldPositionToWidgetPosition(this.obj.worldTransform.position.add(this.offset), false).screenPosition;
        this.rootCanvas.position = pos.subtract(this.rootCanvas.size.multiply(0.5));
        this.rootCanvas.visibility = mw.SlateVisibility.SelfHitTestInvisible;
        this.show();
    }
    /**隐藏NPC按钮 */
    hideBtn() {
        this.canUpdate = false;
        this.hide();
    }
    onShow(...params) {
        Console.error("[OnClickPanel-onShow]");
        let imageGuid = "";
        if (this.onClickType == OnClickType.Sit) {
            imageGuid = GlobalData.sitIconGuid;
        }
        else if (this.onClickType == OnClickType.Shake) {
            imageGuid = GlobalData.shakeIconGuid;
        }
        else if (this.onClickType == OnClickType.Dance) {
            imageGuid = GlobalData.danceIconGuid;
        }
        this.mClickBtn.normalImageGuid = imageGuid;
        this.mClickBtn.pressedImageGuid = imageGuid;
        this.mClickBtn.disableImageGuid = imageGuid;
    }
    onHide(...params) {
        Console.error("[OnClickPanel-onHide]");
    }
    /**
    * 每一帧调用
    * 通过canUpdate可以开启关闭调用
    * dt 两帧调用的时间差，毫秒
    */
    onUpdate(dt) {
        if (!this.obj)
            return;
        let pos = mw.InputUtil.projectWorldPositionToWidgetPosition(this.obj.worldTransform.position.add(this.offset), false).screenPosition;
        this.rootCanvas.position = pos.subtract(this.rootCanvas.size.multiply(0.5));
    }
}

var foreign15 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: OnClickPanel
});

let Dance = class Dance extends mw.Script {
    constructor() {
        super(...arguments);
        /**----------------------------------------[客户端]---------------------------------------- */
        this.onClickPanel = null;
        this.player = null;
        this.dances = null;
        this.triggers = [];
        this.animationId = null;
        /**----------------------------------------[服务端]---------------------------------------- */
    }
    /** 当脚本被实例后，会在第一帧更新前调用此函数 */
    onStart() {
        if (mw.SystemUtil.isClient()) {
            this.onStartC();
        }
        else if (mw.SystemUtil.isServer()) {
            this.onStartS();
        }
    }
    /**
     * 周期函数 每帧执行
     * 此函数执行需要将this.useUpdate赋值为true
     * @param dt 当前帧与上一帧的延迟 / 秒
     */
    onUpdate(dt) {
        if (mw.SystemUtil.isClient()) {
            this.onUpdateC(dt);
        }
        else if (mw.SystemUtil.isServer()) {
            this.onUpdateS(dt);
        }
    }
    get getOnClickPanel() {
        if (this.onClickPanel == null) {
            this.onClickPanel = mw.UIService.getUI(OnClickPanel);
        }
        return this.onClickPanel;
    }
    /**客户端的onStart */
    async onStartC() {
        this.player = await Player.asyncGetLocalPlayer();
        this.dances = GameConfig.Dance;
        this.findTriggers();
        this.bindEvents();
    }
    /**find触发器 */
    findTriggers() {
        let length = this.dances.getAllElement().length;
        let i = 0;
        let triggerInterval = TimeUtil.setInterval(async () => {
            let trigger = await GameObject.asyncFindGameObjectById(this.dances.getElement(i + 1).TriggerGuid);
            this.triggers.push(trigger);
            ++i;
            if (i >= length) {
                TimeUtil.clearInterval(triggerInterval);
                this.bindTriggers();
            }
        }, 0.1);
    }
    /**绑定触发器 */
    bindTriggers() {
        for (let i = 0; i < this.triggers.length; ++i) {
            this.triggers[i].onEnter.add((char) => {
                this.onEnterTrigger(char, i + 1, this.triggers[i]);
            });
            this.triggers[i].onLeave.add((char) => {
                this.onLeaveTrigger(char);
            });
        }
    }
    /**玩家进入触发器 */
    onEnterTrigger(char, id, go) {
        if (char != Player.localPlayer.character)
            return;
        this.getOnClickPanel.showBtn(id, go, OnClickType.Dance);
    }
    /**玩家离开触发器 */
    onLeaveTrigger(char) {
        if (char != Player.localPlayer.character)
            return;
        this.getOnClickPanel.hideBtn();
    }
    /**绑定事件 */
    bindEvents() {
        Event.addLocalListener("Dance", (isDance, id) => {
            if (isDance) {
                if (this.animationId) {
                    this.animationId.stop();
                    this.animationId = null;
                }
                let danceIds = this.dances.getElement(id).DanceGuid;
                let danceId = "";
                if (danceIds.length > 1) {
                    danceId = danceIds[Utils.getRandomInteger(0, danceIds.length - 1)];
                }
                else {
                    danceId = danceIds[0];
                }
                let playerLoc = this.triggers[id - 1].worldTransform.position;
                let offsetPos = this.dances.getElement(id).OffsetPos;
                playerLoc = playerLoc.add(offsetPos);
                if (offsetPos.z == -1) {
                    playerLoc = playerLoc.add(new mw.Vector(Utils.getRandomInteger(offsetPos.x, offsetPos.y), Utils.getRandomInteger(offsetPos.x, offsetPos.y), 0));
                }
                this.player.character.worldTransform.position = playerLoc;
                this.player.character.worldTransform.rotation = this.triggers[id - 1].worldTransform.rotation;
                this.animationId = PlayerManagerExtesion.rpcPlayAnimation(this.player.character, danceId, 0);
                this.player.character.movementEnabled = false;
            }
            else {
                if (this.animationId) {
                    this.animationId.stop();
                    this.animationId = null;
                    this.player.character.movementEnabled = true;
                }
            }
        });
    }
    /**客户端的onUpdate */
    onUpdateC(dt) {
    }
    /**----------------------------------------[客户端]---------------------------------------- */
    /**----------------------------------------[服务端]---------------------------------------- */
    /**服务端的onStart */
    onStartS() {
    }
    /**服务端的onUpdate */
    onUpdateS(dt) {
    }
};
Dance = __decorate([
    Component
], Dance);
var Dance$1 = Dance;

var foreign4 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: Dance$1
});

let Flashlight = class Flashlight extends mw.Script {
    constructor() {
        super(...arguments);
        /**----------------------------------------[客户端]---------------------------------------- */
        this.flashlight = null;
        this.flashlightGos = [];
        /**闪烁的Tween */
        this.flashlightTweenIDs = [];
        /**闪烁间隔唯一标识 */
        this.tweenIntervals = [];
        /**前一个旋转 */
        this.preVector2s = [];
        /**----------------------------------------[服务端]---------------------------------------- */
    }
    /** 当脚本被实例后，会在第一帧更新前调用此函数 */
    onStart() {
        if (mw.SystemUtil.isClient()) {
            this.onStartC();
        }
        else if (mw.SystemUtil.isServer()) {
            this.onStartS();
        }
    }
    /**
     * 周期函数 每帧执行
     * 此函数执行需要将this.useUpdate赋值为true
     * @param dt 当前帧与上一帧的延迟 / 秒
     */
    onUpdate(dt) {
        if (mw.SystemUtil.isClient()) {
            this.onUpdateC(dt);
        }
        else if (mw.SystemUtil.isServer()) {
            this.onUpdateS(dt);
        }
    }
    /**客户端的onStart */
    onStartC() {
        this.flashlight = GameConfig.Flashlight;
        this.findGameObjects();
    }
    /**find GameObject */
    findGameObjects() {
        let length = this.flashlight.getAllElement().length;
        let i = 0;
        let goInterval = TimeUtil.setInterval(async () => {
            let go = await GameObject.asyncFindGameObjectById(this.flashlight.getElement(i + 1).modelGuid);
            this.flashlightGos.push(go);
            this.flashlightTweenIDs.push(null);
            this.preVector2s.push(null);
            ++i;
            if (i >= length) {
                TimeUtil.clearInterval(goInterval);
                this.startFlashing();
            }
        }, 0.1);
    }
    /**开始闪烁 */
    startFlashing() {
        for (let i = 0; i < this.flashlightGos.length; ++i) {
            this.enableFlashlightAnimation(i);
        }
    }
    /**启用闪烁动画 */
    enableFlashlightAnimation(id) {
        let rotXY;
        if (Utils.getRandomInteger(0, 1)) {
            let x = Utils.getRandomInteger(-240, -210);
            let y = 0;
            if (Utils.getRandomInteger(0, 1)) {
                y = Utils.getRandomInteger(30, 60);
            }
            else {
                y = Utils.getRandomInteger(-60, -30);
            }
            rotXY = new mw.Vector2(x, y);
        }
        else {
            let x = Utils.getRandomInteger(-150, -120);
            let y = 0;
            if (Utils.getRandomInteger(0, 1)) {
                y = Utils.getRandomInteger(30, 60);
            }
            else {
                y = Utils.getRandomInteger(-60, -30);
            }
            rotXY = new mw.Vector2(x, y);
        }
        this.startFlashlightShake(id, new mw.Vector2(-180, 0), rotXY, 1);
        this.preVector2s[id] = rotXY;
        let tweenInterval = TimeUtil.setInterval(() => {
            let rotXY1;
            if (Utils.getRandomInteger(0, 1)) {
                let x = Utils.getRandomInteger(-240, -210);
                let y = 0;
                if (Utils.getRandomInteger(0, 1)) {
                    y = Utils.getRandomInteger(30, 60);
                }
                else {
                    y = Utils.getRandomInteger(-60, -30);
                }
                rotXY1 = new mw.Vector2(x, y);
            }
            else {
                let x = Utils.getRandomInteger(-150, -120);
                let y = 0;
                if (Utils.getRandomInteger(0, 1)) {
                    y = Utils.getRandomInteger(30, 60);
                }
                else {
                    y = Utils.getRandomInteger(-60, -30);
                }
                rotXY1 = new mw.Vector2(x, y);
            }
            this.startFlashlightShake(id, this.preVector2s[id], rotXY1, 1);
            this.preVector2s[id] = rotXY1;
        }, 1);
        this.tweenIntervals.push(tweenInterval);
    }
    /**开始闪烁 */
    startFlashlightShake(id, rotXY1, rotXY2, time) {
        if (this.flashlightTweenIDs[id] != null) {
            this.flashlightTweenIDs[id].stop();
        }
        let rotZ = this.flashlightGos[id].worldTransform.rotation.z;
        let flashlightTweenID = new Tween$2({ x: rotXY1.x, y: rotXY1.y })
            .to({ x: rotXY2.x, y: rotXY2.y }, time * 1000)
            .onUpdate((v) => {
            this.flashlightGos[id].worldTransform.rotation = new mw.Rotation(v.x, v.y, rotZ);
        })
            .start();
        this.flashlightTweenIDs[id] = flashlightTweenID;
    }
    /**停止上下震荡 */
    stopEnlargeShake() {
        if (!this.tweenIntervals)
            return;
        for (let i = 0; i < this.tweenIntervals.length; ++i) {
            TimeUtil.clearInterval(this.tweenIntervals[i]);
        }
    }
    /**客户端的onUpdate */
    onUpdateC(dt) {
    }
    /**----------------------------------------[客户端]---------------------------------------- */
    /**----------------------------------------[服务端]---------------------------------------- */
    /**服务端的onStart */
    onStartS() {
    }
    /**服务端的onUpdate */
    onUpdateS(dt) {
    }
};
Flashlight = __decorate([
    Component
], Flashlight);
var Flashlight$1 = Flashlight;

var foreign6 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: Flashlight$1
});

let JumpGame = class JumpGame extends Script {
    constructor() {
        super(...arguments);
        /**------------------------------------------- 客户端 ------------------------------------------------ */
        this.confirmPanel = null;
        this.jumpTrigger = null;
        /**------------------------------------------- 服务端 ------------------------------------------------ */
    }
    /** 当脚本被实例后，会在第一帧更新前调用此函数 */
    onStart() {
        if (mw.SystemUtil.isClient()) {
            this.useUpdate = false;
            this.onStartC();
        }
        else if (mw.SystemUtil.isServer()) {
            this.useUpdate = false;
            this.onStartS();
        }
    }
    /**
     * 周期函数 每帧执行
     * 此函数执行需要将this.useUpdate赋值为true
     * @param dt 当前帧与上一帧的延迟 / 秒
     */
    onUpdate(dt) {
        if (mw.SystemUtil.isClient()) {
            this.onUpdateC(dt);
        }
        else if (mw.SystemUtil.isServer()) {
            this.onUpdateS(dt);
        }
    }
    get getConfirmPanel() {
        if (this.confirmPanel == null) {
            this.confirmPanel = UIService.getUI(ConfirmPanel);
        }
        return this.confirmPanel;
    }
    /**客户端的OnStart */
    onStartC() {
        this.jumpTrigger = this.gameObject;
        this.jumpTrigger.onEnter.add((character) => {
            if (Player.localPlayer.character != character)
                return;
            this.getConfirmPanel.confirmTips(() => {
                mw.RouteService.enterNewGame("P_2dde3ca89dea5ab82f6109a8f46e3dcf37f541a2");
            }, "前往 斗破苍穹乐园2\n无限升级", "前往", "取消");
        });
    }
    /**客户端的update */
    onUpdateC(dt) {
    }
    /**------------------------------------------- 客户端 ------------------------------------------------ */
    /**------------------------------------------- 服务端 ------------------------------------------------ */
    /**服务端的OnStart */
    onStartS() {
    }
    /**服务端的update */
    onUpdateS(dt) {
    }
};
JumpGame = __decorate([
    Component
], JumpGame);
var JumpGame$1 = JumpGame;

var foreign8 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: JumpGame$1
});

var MyClearDayNight_1;
let MyClearDayNight = MyClearDayNight_1 = class MyClearDayNight extends mw.Script {
    constructor() {
        super(...arguments);
        this.hudModuleC = null;
        // @Core.Property({ displayName: "预加载" })
        // preloadAssets: string = "95623,108338,59832";
        /** S&C */
        /**时钟Count，每现实秒+1 */
        this.CountGo = 0;
        /**日夜功能时间膨胀系数，默认1，>1变慢，<1变快，
         * 推荐取值
         * 1 - 24分钟过完一天(慢，mc类似)；
         * 0.5 - 12分钟过完一天(较慢)；
         * 0.25 - 6分钟过完一天(较快)；
         * 0.04 - 快速预览日夜循环功能(快)；
         */
        this.DayNightTimeScale = 0.25;
        /**距离下一阶段还要多少Count，用于连接后、重连后的时间同步，客户端==0已经和服务器同步过了，客户端>0则需要同步 */
        this.NextStageTime = -1;
        /**下一个阶段是什么 */
        // @Core.Property({ replicated: true, onChanged: "onNextStageChange" })
        this.NextStage = "清晨";
    }
    get getHUDModuleC() {
        if (this.hudModuleC == null) {
            this.hudModuleC = ModuleService.getModule(HUDModuleC);
        }
        return this.hudModuleC;
    }
    /** 当脚本被实例后，会在第一帧更新前调用此函数 */
    onStart() {
        MyClearDayNight_1.instance = this;
        this.useUpdate = true;
        if (SystemUtil.isServer()) {
            setInterval(() => {
                /**清晨 */
                if (this.CountGo == Math.round(360 * this.DayNightTimeScale)) {
                    //     console.log("由清晨到中午的过程，上午");
                    this.NextStage = "中午";
                }
                /**中午 */
                if (this.CountGo == Math.round(720 * this.DayNightTimeScale)) {
                    //     console.log("由中午到傍晚的过程，下午");
                    this.NextStage = "傍晚";
                }
                /**傍晚 */
                if (this.CountGo == Math.round(1080 * this.DayNightTimeScale)) {
                    //     console.log("由傍晚到凌晨的过程，晚上");
                    this.NextStage = "凌晨";
                }
                /**凌晨*/
                if (this.CountGo >= Math.round(1440 * this.DayNightTimeScale)) {
                    // 重置服务器计时器
                    this.CountGo = 0;
                    // console.log("由凌晨进入清晨的过程，凌晨");
                    this.NextStage = "清晨";
                    // 进行全图时间校准
                    Player.getAllPlayers().forEach((player) => {
                        this.SyncTimeToClient(player, this.CountGo, this.NextStage);
                    });
                }
                Console.log("[CurTime] " + this.getCurTime());
                // 时钟，每秒+1
                this.CountGo++;
            }, 1000);
            // 玩家进游戏，同步下发当前服务器时间并改天换日
            Player.onPlayerJoin.add((player) => {
                setTimeout(() => {
                    this.SyncTimeToClient(player, this.CountGo, this.NextStage);
                }, 2000);
            });
            // 玩家从后台切回游戏，同步下发当前服务器时间并改天换日
            Event.addClientListener("I'm back, Sync time pls", (player) => {
                setTimeout(() => {
                    this.SyncTimeToClient(player, this.CountGo, this.NextStage);
                }, 2000);
            });
        }
        if (SystemUtil.isClient()) {
            // this.CheckWorldObj();
            Skybox.moonTextureID = "95623";
            setInterval(() => {
                /**清晨 */
                if (this.CountGo == Math.round(360 * this.DayNightTimeScale)) {
                    // console.log("由清晨到中午的过程，上午");
                    this.ChangeSky(-80, -90, 8, true, 1.2, 1.57);
                    Skybox.skyDomeTextureID = "108338";
                    this.NextStage = "中午";
                }
                /**中午 */
                if (this.CountGo == Math.round(720 * this.DayNightTimeScale)) {
                    // console.log("由中午到傍晚的过程，下午");
                    this.ChangeSky(100, 0, 2, true, 0.3, 0.3);
                    this.NextStage = "傍晚";
                }
                /**傍晚 */
                if (this.CountGo == Math.round(1080 * this.DayNightTimeScale)) {
                    // console.log("由傍晚到凌晨的过程，晚上");
                    this.ChangeSky(-80, -90, 0.5, false, 0.05, 0.4);
                    Skybox.skyDomeTextureID = "59832";
                    this.NextStage = "凌晨";
                }
                /**凌晨*/
                if (this.CountGo >= Math.round(1440 * this.DayNightTimeScale)) {
                    // 重置计时器
                    this.CountGo = 0;
                    // console.log("由凌晨进入清晨的过程，凌晨");
                    this.ChangeSky(100, 0, 1, false, 0.2, 0.2);
                    this.NextStage = "清晨";
                }
                this.getHUDModuleC.showTime(this.getCurTime());
                Console.log("[CurTime] " + this.getCurTime());
                // 时钟，每秒+1
                this.CountGo++;
            }, 1000);
            // 客户端重连回来，向服务器报道
            Player.onPlayerReconnect.add(() => {
                Event.dispatchToServer("I'm back, Sync time pls");
            });
        }
    }
    ////////////////////////////////////
    //    实用的方法
    ////////////////////////////////////
    /**[双端可用] 获取当前时间 HH:MM */
    getCurTime() {
        return this.CountToTime(this.CountGo);
    }
    ////////////////////////////////////
    //    开发时用到的接口
    ////////////////////////////////////
    /**[双端] 根据现在的countgo，更新下一个状态 */
    UpdateNextStage() {
        if (this.CountGo >= Math.round(720 * this.DayNightTimeScale)) {
            if (this.CountGo >= Math.round(1080 * this.DayNightTimeScale)) {
                this.NextStage = "凌晨";
            }
            else {
                this.NextStage = "傍晚";
            }
        }
        else {
            if (this.CountGo >= Math.round(360 * this.DayNightTimeScale)) {
                this.NextStage = "中午";
            }
            else {
                this.NextStage = "清晨";
            }
        }
    }
    /**[服务端→客户端]服务端向指定客户端同步时间
     * @param player 指定客户端玩家
     * @param count count时间
     */
    SyncTimeToClient(player, count, nextStage) {
        if (SystemUtil.isClient()) {
            // 将count数同步到当前客户端
            this.CountGo = count;
            // 计算要到下一个阶段的时间count数
            this.NextStageTime = Math.round(Math.round(360 * this.DayNightTimeScale) - (this.CountGo % Math.round(360 * this.DayNightTimeScale)));
            // 同步改天换日
            if (nextStage == "中午") {
                this.ChangeSky(100, 0, 1, false, 0.2, 0.2, 0.02);
                setTimeout(() => {
                    this.ChangeSky(-80, -90, 8, true, 1.2, 1.57, this.NextStageTime);
                }, 60);
            }
            if (nextStage == "傍晚") {
                this.ChangeSky(-80, -90, 8, true, 1.2, 1.57, 0.02);
                setTimeout(() => {
                    this.ChangeSky(100, 0, 2, true, 0.3, 0.3, this.NextStageTime);
                }, 60);
            }
            if (nextStage == "凌晨") {
                this.ChangeSky(100, 0, 2, true, 0.3, 0.3, 0.02);
                setTimeout(() => {
                    this.ChangeSky(-80, -90, 0.5, false, 0.05, 0.4, this.NextStageTime);
                }, 60);
            }
            if (nextStage == "清晨") {
                this.ChangeSky(-80, -90, 0.5, false, 0.05, 0.4, 0.02);
                setTimeout(() => {
                    this.ChangeSky(100, 0, 1, false, 0.2, 0.2, this.NextStageTime);
                }, 60);
            }
        }
    }
    /** [客户端]改天换日的核心方法，使用Tween动画实现，纯客户端调用
     * @param yawAngle [瞬变] 日月朝向角度
     * @param pitchAngle [渐变] 俯仰角度
     * @param Dir_intensity [渐变] 日月光照强度
     * @param ChangeIntoSun [瞬变] 切换太阳和月亮，T=切换进太阳，F=切换进月亮
     * @param skyDomeIntensity [渐变] 天空盒亮度
     * @param Sky_intensity [渐变] 全局光照
     * @param time [可选] 改天换日所用Count，不带则用默认的时间360*scale
     */
    // @Core.Function(Core.Client, Core.Multicast)
    ChangeSky(yawAngle, pitchAngle, Dir_intensity, ChangeIntoSun, skyDomeIntensity, Sky_intensity, time) {
        if (SystemUtil.isServer()) {
            return;
        }
        if (time == undefined) {
            time = 360 * this.DayNightTimeScale;
        }
        time *= 1000;
        // this.CheckWorldObj();
        Lighting.yawAngle = yawAngle;
        Skybox.sunVisible = ChangeIntoSun;
        Skybox.moonVisible = !ChangeIntoSun;
        new Tween({
            a: Lighting.brightness,
            b: Lighting.pitchAngle,
            c: Skybox.skyDomeIntensity,
            d: Lighting.brightness
        }).to({
            a: Dir_intensity,
            b: pitchAngle,
            c: skyDomeIntensity,
            d: Sky_intensity
        }, time).onUpdate((obj) => {
            Lighting.brightness = obj.a;
            Lighting.pitchAngle = obj.b;
            Skybox.skyDomeIntensity = obj.c;
            Lighting.brightness = obj.d;
        }).start();
    }
    ////////////////////////////////////
    //    开发时用到的工具
    ///////////////////////////////////
    /**转换一个整数为分：秒格式
     * @param int 传入的整数，没做容错，别传负数啦
     * @param add0 [可选] 是否补零
     * @returns 返回规整后的分：秒 如12：05
     */
    CountToTime(int, add0) {
        int = int / this.DayNightTimeScale;
        let mm = parseInt(int / 60 + "") + "";
        let ss = Math.round(int - 60 * parseInt(int / 60 + "")) + "";
        if (add0 == null || add0 == true) {
            if (mm.length == 1) {
                mm = "0" + mm;
            }
            if (ss.length == 1) {
                ss = "0" + ss;
            }
        }
        return mm + ":" + ss + "";
    }
    /**将分：秒格式的字符串转换为整数
     * @param timeStr 传入的字符串，格式为 "mm:ss"
     * @returns 返回相同时间的整数
     */
    TimeToCount(timeStr) {
        // 将字符串分解为分和秒
        let [mm, ss] = timeStr.split(":").map(Number);
        // 转换时间为总秒数
        let time = mm * 60 + ss;
        // 返回转换后的整数，需要注意的是如果在CountToTime中使用了DayNightTimeScale来缩放，这里也需要相应的缩放
        return time * this.DayNightTimeScale;
    }
    /**周期函数 每帧执行
     * 此函数执行需要将this.useUpdate赋值为true
     * @param dt 当前帧与上一帧的延迟 / 秒
     */
    onUpdate(dt) {
        TweenUtil.TWEEN.update();
    }
};
__decorate([
    mw.RemoteFunction(mw.Client)
], MyClearDayNight.prototype, "SyncTimeToClient", null);
MyClearDayNight = MyClearDayNight_1 = __decorate([
    Component
], MyClearDayNight);
var MyClearDayNight$1 = MyClearDayNight;

var foreign9 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: MyClearDayNight$1
});

let NPCSitDance = class NPCSitDance extends mw.Script {
    constructor() {
        super(...arguments);
        /**----------------------------------------[客户端]---------------------------------------- */
        this.nPCSitDance = null;
        this.danceGuids = [];
        this.danceGuidLen = 0;
        /**----------------------------------------[服务端]---------------------------------------- */
    }
    /** 当脚本被实例后，会在第一帧更新前调用此函数 */
    onStart() {
        if (mw.SystemUtil.isClient()) {
            this.onStartC();
        }
        else if (mw.SystemUtil.isServer()) {
            this.onStartS();
        }
    }
    /**
     * 周期函数 每帧执行
     * 此函数执行需要将this.useUpdate赋值为true
     * @param dt 当前帧与上一帧的延迟 / 秒
     */
    onUpdate(dt) {
        if (mw.SystemUtil.isClient()) {
            this.onUpdateC(dt);
        }
        else if (mw.SystemUtil.isServer()) {
            this.onUpdateS(dt);
        }
    }
    /**客户端的onStart */
    async onStartC() {
        this.nPCSitDance = GameConfig.NPCSitDance;
        let danceGuid1 = GlobalData.danceGuid1;
        let danceGuid2 = GlobalData.danceGuid2;
        this.danceGuids = [...danceGuid1.split(','), ...danceGuid2.split(',')];
        this.danceGuidLen = this.danceGuids.length;
        Console.error("danceGuidLen = " + this.danceGuidLen);
        let tmpNpc = await GameObject.asyncFindGameObjectById("379E636C");
        tmpNpc.displayName = "贵族女";
        let tmpAni = PlayerManagerExtesion.loadAnimationExtesion(tmpNpc, "122454", false);
        tmpAni.loop = 0;
        tmpAni.play();
        TimeUtil.delaySecond(5).then(() => {
            this.findNPCs();
        });
    }
    /**findNPC */
    findNPCs() {
        let length = this.nPCSitDance.getAllElement().length;
        let i = 0;
        let npcInterval = TimeUtil.setInterval(async () => {
            let npcConfig = this.nPCSitDance.getElement(i + 1);
            if (npcConfig.NPCSitGuid != null) {
                let sitNPC = await GameObject.asyncFindGameObjectById(npcConfig.NPCSitGuid);
                sitNPC.displayName = npcConfig.Annotation;
                PlayerManagerExtesion.changeStanceExtesion(sitNPC, npcConfig.SitStance);
            }
            if (npcConfig.NPCDanceGuid != null) {
                let danceNPC = await GameObject.asyncFindGameObjectById(npcConfig.NPCDanceGuid);
                danceNPC.displayName = npcConfig.Annotation;
                this.npcPlayAnimation(danceNPC);
            }
            ++i;
            if (i >= length) {
                TimeUtil.clearInterval(npcInterval);
            }
        }, 0.3);
    }
    /**跳舞 */
    npcPlayAnimation(npc) {
        let ani = PlayerManagerExtesion.loadAnimationExtesion(npc, this.danceGuids[Utils.getRandomInteger(0, this.danceGuidLen - 1)], false);
        ani.loop = 1;
        ani.play();
        ani.onFinish.add(() => {
            ani.onFinish.clear();
            this.npcPlayAnimation(npc);
        });
    }
    /**客户端的onUpdate */
    onUpdateC(dt) {
    }
    /**----------------------------------------[客户端]---------------------------------------- */
    /**----------------------------------------[服务端]---------------------------------------- */
    /**服务端的onStart */
    onStartS() {
    }
    /**服务端的onUpdate */
    onUpdateS(dt) {
    }
};
NPCSitDance = __decorate([
    Component
], NPCSitDance);
var NPCSitDance$1 = NPCSitDance;

var foreign14 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: NPCSitDance$1
});

let Portal = class Portal extends mw.Script {
    constructor() {
        super(...arguments);
        /**----------------------------------------[客户端]---------------------------------------- */
        this.portals = null;
        this.hudModuleC = null;
        /**----------------------------------------[服务端]---------------------------------------- */
    }
    /** 当脚本被实例后，会在第一帧更新前调用此函数 */
    onStart() {
        if (mw.SystemUtil.isClient()) {
            this.onStartC();
        }
        else if (mw.SystemUtil.isServer()) {
            this.onStartS();
        }
    }
    /**
     * 周期函数 每帧执行
     * 此函数执行需要将this.useUpdate赋值为true
     * @param dt 当前帧与上一帧的延迟 / 秒
     */
    onUpdate(dt) {
        if (mw.SystemUtil.isClient()) {
            this.onUpdateC(dt);
        }
        else if (mw.SystemUtil.isServer()) {
            this.onUpdateS(dt);
        }
    }
    get getHUDModuleC() {
        if (this.hudModuleC == null) {
            this.hudModuleC = ModuleService.getModule(HUDModuleC);
        }
        return this.hudModuleC;
    }
    /**客户端的onStart */
    onStartC() {
        this.portals = GameConfig.Portal;
        this.findGameObjects();
    }
    /**find GameObject */
    findGameObjects() {
        let length = this.portals.getAllElement().length;
        let i = 0;
        let triggerInterval = TimeUtil.setInterval(async () => {
            let trigger = await GameObject.asyncFindGameObjectById(this.portals.getElement(i + 1).TriggerGuid);
            trigger.onEnter.add(this.onEnterTrigger.bind(this));
            ++i;
            if (i >= length) {
                TimeUtil.clearInterval(triggerInterval);
            }
            Console.error("[hkz]");
        }, 2);
    }
    /**玩家进入触发器 */
    onEnterTrigger(char) {
        if (char != Player.localPlayer.character)
            return;
        this.getHUDModuleC.randomPortal();
    }
    /**客户端的onUpdate */
    onUpdateC(dt) {
    }
    /**----------------------------------------[客户端]---------------------------------------- */
    /**----------------------------------------[服务端]---------------------------------------- */
    /**服务端的onStart */
    onStartS() {
    }
    /**服务端的onUpdate */
    onUpdateS(dt) {
    }
};
Portal = __decorate([
    Component
], Portal);
var Portal$1 = Portal;

var foreign16 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: Portal$1
});

// import Tips_Generate from "../ui-generate/common/Tips_generate";
// /**
//  * 系统提示
//  * 一个顶一个向上跳动，然后消失，最多三条
//  */
// export default class P_Tips extends Tips_Generate {
//     private static readonly Y_START = 400;
//     private static readonly Y_OVER = 150;
//     private static readonly MOVE_SPEED = 500;
//     private static readonly KEEP_TIME = 0.5;
//     private static _instance: P_Tips;
//     private freeCellArr: Array<mw.Canvas> = [];//当前空闲的条目
//     private activeCellArr: Array<mw.Canvas> = [];//当前激活的条目
//     private overCellArr: Array<mw.Canvas> = [];//已经完成的条目
//     private static get instance(): P_Tips {
//         if (this._instance == null) {
//             this._instance = mw.UIService.create(P_Tips);
//         }
//         return this._instance;
//     }
//     protected onAwake(): void {
//         this.layer = mw.UILayerTop;
//     }
//     public onShow(...params: any[]): void {
//         this.canUpdate = true;
//     }
//     onStart() {
//         this.freeCellArr = [this.mCell1, this.mCell2, this.mCell3];
//         for (let i = 0; i < this.freeCellArr.length; i++) {
//             this.freeCellArr[i].visibility = (mw.SlateVisibility.Collapsed);
//         }
//     }
//     /**
//      * 显示系统提示 (Client Only)
//      * @param content 提示内容
//      */
//     public static show(content: string) {
//         mw.UIService.showUI(this.instance);
//         P_Tips.instance.showMsg(content);
//     }
//     private showMsg(content: string) {
//         let cell: mw.Canvas = null;
//         if (this.freeCellArr.length > 0) {
//             cell = this.freeCellArr.shift();
//         } else {
//             cell = this.activeCellArr.shift();
//         }
//         let text: mw.TextBlock = cell.findChildByPath('Content_txt') as mw.TextBlock;
//         text.text = (content);
//         cell["state"] = 0;
//         cell["stopTime"] = 0;
//         this.activeCellArr.push(cell);
//     }
//     onUpdate(dt: number) {
//         if (this.activeCellArr.length == 0) return;
//         let pos: mw.Vector2 = null;
//         for (let i = 0; i < this.activeCellArr.length; i++) {
//             let cell = this.activeCellArr[i];
//             switch (cell["state"]) {
//                 case 0:
//                     cell.visibility = (mw.SlateVisibility.Visible);
//                     pos = cell.position;
//                     pos.y = P_Tips.Y_START;
//                     cell.position = (pos);
//                     cell["state"]++;
//                     break;
//                 case 1:
//                     pos = cell.position;
//                     pos.y -= P_Tips.MOVE_SPEED * dt;
//                     if (i == 0) {
//                         if (pos.y <= P_Tips.Y_OVER) {
//                             pos.y = P_Tips.Y_OVER;
//                             cell["state"]++;
//                         }
//                     } else {
//                         let lastCellPos = this.activeCellArr[i - 1].position;
//                         if (pos.y <= lastCellPos.y + 60) {
//                             pos.y = lastCellPos.y + 60;
//                             cell["stopTime"] += dt;
//                             if (cell["stopTime"] >= P_Tips.KEEP_TIME) {
//                                 cell["state"] += 2;
//                             }
//                         }
//                     }
//                     cell.position = (pos);
//                     break;
//                 case 2:
//                     cell["stopTime"] += dt;
//                     if (cell["stopTime"] >= P_Tips.KEEP_TIME) {
//                         cell["state"]++;
//                     }
//                     break;
//                 case 3:
//                     cell.visibility = (mw.SlateVisibility.Collapsed);
//                     this.overCellArr.push(cell);
//                     break;
//             }
//         }
//         while (this.overCellArr.length > 0) {
//             let cell = this.overCellArr.shift();
//             let index = this.activeCellArr.indexOf(cell);
//             this.activeCellArr.splice(index, 1);
//             this.freeCellArr.push(cell);
//         }
//     }
//     onDestroy() {
//         P_Tips._instance = null;
//     }
// }

var foreign17 = /*#__PURE__*/Object.freeze({
    __proto__: null
});

let Shakes = class Shakes extends mw.Script {
    constructor() {
        super(...arguments);
        /**----------------------------------------[客户端]---------------------------------------- */
        this.shakes = null;
        this.gos = [];
        this.triggers = [];
        /**变大的Tween */
        this.enlargeTweenIDs = [];
        /**音效震动间隔唯一标识 */
        this.tweenIntervals = [];
        this.onClickPanel = null;
        /**----------------------------------------[服务端]---------------------------------------- */
    }
    /** 当脚本被实例后，会在第一帧更新前调用此函数 */
    onStart() {
        if (mw.SystemUtil.isClient()) {
            this.onStartC();
        }
        else if (mw.SystemUtil.isServer()) {
            this.onStartS();
        }
    }
    /**
     * 周期函数 每帧执行
     * 此函数执行需要将this.useUpdate赋值为true
     * @param dt 当前帧与上一帧的延迟 / 秒
     */
    onUpdate(dt) {
        if (mw.SystemUtil.isClient()) {
            this.onUpdateC(dt);
        }
        else if (mw.SystemUtil.isServer()) {
            this.onUpdateS(dt);
        }
    }
    /**客户端的onStart */
    onStartC() {
        this.shakes = GameConfig.Shake;
        this.findGameObjects();
    }
    /**find GameObject */
    findGameObjects() {
        let length = this.shakes.getAllElement().length;
        let i = 0;
        let goInterval = TimeUtil.setInterval(async () => {
            let go = await GameObject.asyncFindGameObjectById(this.shakes.getElement(i + 1).ModelGuid);
            this.gos.push(go);
            this.enlargeTweenIDs.push(null);
            let triggerGuid = this.shakes.getElement(i + 1).TriggerGuid;
            if (triggerGuid) {
                let trigger = await GameObject.asyncFindGameObjectById(triggerGuid);
                this.triggers.push(trigger);
            }
            ++i;
            if (i >= length) {
                TimeUtil.clearInterval(goInterval);
                this.startShakes();
                this.bindTriggers();
            }
        }, 0.1);
    }
    /**开始震荡 */
    startShakes() {
        for (let i = 0; i < this.gos.length; ++i) {
            this.enableEnlargeAnimation(i);
        }
    }
    /**启用放大动画 */
    enableEnlargeAnimation(id) {
        let baseScale = this.gos[id].localTransform.scale;
        this.startEnlargeShake(id);
        let tweenInterval = TimeUtil.setInterval(() => {
            this.gos[id].localTransform.scale = baseScale;
            this.startEnlargeShake(id, 1, 1.5);
        }, 0.9);
        this.tweenIntervals.push(tweenInterval);
    }
    /**开始上下左右前后震荡 */
    startEnlargeShake(id, speed = 1, smoothingTime = 1) {
        if (this.enlargeTweenIDs[id] != null) {
            this.enlargeTweenIDs[id].stop();
        }
        let baseScale = this.gos[id].localTransform.scale;
        let enlargeTweenID = new Tween$2({ time: 0 })
            .to({ time: 1 }, smoothingTime * 1000)
            .onUpdate((v) => {
            let x = Utils.shakeFunc(v.time, 100, 3, 2) * speed;
            let y = Utils.shakeFunc(v.time, 100, 4, 1) * speed;
            let z = Utils.shakeFunc(v.time, 100, 3, 2) * speed;
            let scaleZ = new mw.Vector(baseScale.x + x, baseScale.y + y, baseScale.z + z);
            this.gos[id].localTransform.scale = scaleZ;
        })
            .start();
        this.enlargeTweenIDs[id] = enlargeTweenID;
    }
    /**停止上下震荡 */
    stopEnlargeShake() {
        if (!this.tweenIntervals)
            return;
        for (let i = 0; i < this.tweenIntervals.length; ++i) {
            TimeUtil.clearInterval(this.tweenIntervals[i]);
        }
    }
    /**绑定触发器 */
    bindTriggers() {
        for (let i = 0; i < this.triggers.length; ++i) {
            this.triggers[i].onEnter.add((char) => {
                this.onEnterTrigger(char, i + 1, this.triggers[i]);
            });
            this.triggers[i].onLeave.add((char) => {
                this.onLeaveTrigger(char);
            });
        }
    }
    get getOnClickPanel() {
        if (this.onClickPanel == null) {
            this.onClickPanel = mw.UIService.getUI(OnClickPanel);
        }
        return this.onClickPanel;
    }
    /**玩家进入触发器 */
    onEnterTrigger(char, id, go) {
        if (char != Player.localPlayer.character)
            return;
        this.getOnClickPanel.showBtn(id, go, OnClickType.Shake);
    }
    /**玩家离开触发器 */
    onLeaveTrigger(char) {
        if (char != Player.localPlayer.character)
            return;
        this.getOnClickPanel.hideBtn();
    }
    /**客户端的onUpdate */
    onUpdateC(dt) {
    }
    /**----------------------------------------[客户端]---------------------------------------- */
    /**----------------------------------------[服务端]---------------------------------------- */
    /**服务端的onStart */
    onStartS() {
    }
    /**服务端的onUpdate */
    onUpdateS(dt) {
    }
};
Shakes = __decorate([
    Component
], Shakes);
var Shakes$1 = Shakes;

var foreign18 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: Shakes$1
});

let Sit = class Sit extends mw.Script {
    constructor() {
        super(...arguments);
        this.sits = null;
        /**----------------------------------------[客户端]---------------------------------------- */
        this.onClickPanel = null;
        this.triggers = [];
        /**----------------------------------------[客户端]---------------------------------------- */
        /**----------------------------------------[服务端]---------------------------------------- */
        this.interactors = [];
        this.isCanSit = [];
        this.playerSitMap = new Map();
        /**----------------------------------------[服务端]---------------------------------------- */
    }
    /** 当脚本被实例后，会在第一帧更新前调用此函数 */
    onStart() {
        this.sits = GameConfig.Sit;
        if (mw.SystemUtil.isClient()) {
            this.onStartC();
        }
        else if (mw.SystemUtil.isServer()) {
            this.onStartS();
        }
    }
    /**
     * 周期函数 每帧执行
     * 此函数执行需要将this.useUpdate赋值为true
     * @param dt 当前帧与上一帧的延迟 / 秒
     */
    onUpdate(dt) {
        if (mw.SystemUtil.isClient()) {
            this.onUpdateC(dt);
        }
        else if (mw.SystemUtil.isServer()) {
            this.onUpdateS(dt);
        }
    }
    get getOnClickPanel() {
        if (this.onClickPanel == null) {
            this.onClickPanel = mw.UIService.getUI(OnClickPanel);
        }
        return this.onClickPanel;
    }
    /**客户端的onStart */
    onStartC() {
        this.findTriggers();
    }
    /**find触发器 */
    findTriggers() {
        let length = this.sits.getAllElement().length;
        let i = 0;
        let triggerInterval = TimeUtil.setInterval(async () => {
            let trigger = await GameObject.asyncFindGameObjectById(this.sits.getElement(i + 1).TriggerGuid);
            this.triggers.push(trigger);
            ++i;
            if (i >= length) {
                TimeUtil.clearInterval(triggerInterval);
                this.bindTriggers();
            }
        }, 0.1);
    }
    /**绑定触发器 */
    bindTriggers() {
        for (let i = 0; i < this.triggers.length; ++i) {
            this.triggers[i].onEnter.add((char) => {
                this.onEnterTrigger(char, i + 1, this.triggers[i]);
            });
            this.triggers[i].onLeave.add((char) => {
                this.onLeaveTrigger(char);
            });
        }
    }
    /**玩家进入触发器 */
    onEnterTrigger(char, id, go) {
        if (char != Player.localPlayer.character)
            return;
        this.getOnClickPanel.showBtn(id, go, OnClickType.Sit);
    }
    /**玩家离开触发器 */
    onLeaveTrigger(char) {
        if (char != Player.localPlayer.character)
            return;
        this.getOnClickPanel.hideBtn();
    }
    /**客户端的onUpdate */
    onUpdateC(dt) {
    }
    /**服务端的onStart */
    onStartS() {
        this.findInteractors();
        this.registerEvents();
    }
    /**find交互物 */
    findInteractors() {
        let length = this.sits.getAllElement().length;
        let i = 0;
        let interactorInterval = TimeUtil.setInterval(async () => {
            let interactor = await GameObject.asyncFindGameObjectById(this.sits.getElement(i + 1).InteractivityGuid);
            this.interactors.push(interactor);
            this.isCanSit.push(true);
            ++i;
            if (i >= length) {
                TimeUtil.clearInterval(interactorInterval);
            }
        }, 0.1);
    }
    /**注册事件 */
    registerEvents() {
        Event.addClientListener("Sit", this.bindInteract.bind(this));
        Player.onPlayerLeave.add((player) => {
            let playerId = player.playerId;
            if (!this.playerSitMap.has(playerId))
                return;
            let id = this.playerSitMap.get(playerId);
            if (this.interactors[id - 1].leave()) {
                Console.error(`起身`);
            }
            this.isCanSit[id - 1] = true;
        });
    }
    /**绑定交互物 */
    bindInteract(player, isStartSit, id) {
        let playerId = player.playerId;
        if (isStartSit) {
            if (!this.isCanSit[id - 1])
                return;
            if (this.interactors[id - 1].enter(player.character, mw.HumanoidSlotType.Buttocks, this.sits.getElement(id).SitStance)) {
                Console.error(`坐下`);
            }
            this.isCanSit[id - 1] = false;
            this.playerSitMap.set(playerId, id);
        }
        else {
            if (this.interactors[id - 1].leave()) {
                Console.error(`起身`);
            }
            this.isCanSit[id - 1] = true;
            if (this.playerSitMap.has(playerId)) {
                this.playerSitMap.delete(playerId);
            }
        }
    }
    /**服务端的onUpdate */
    onUpdateS(dt) {
    }
};
Sit = __decorate([
    Component
], Sit);
var Sit$1 = Sit;

var foreign19 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: Sit$1
});

let SkyWheel = class SkyWheel extends mw.Script {
    constructor() {
        super(...arguments);
        /**旋转速度 */
        this.speed = 2;
    }
    /** 当脚本被实例后，会在第一帧更新前调用此函数 */
    onStart() {
        if (mw.SystemUtil.isClient())
            return;
        this.itemLocs = [];
        this.items = this.gameObject.getChildren();
        for (let i of this.items) {
            this.itemLocs.push(i.localTransform.position);
        }
        this.itemRotation = new mw.Rotation(0, 0, 90);
        this.skyWheelRotation = this.gameObject.worldTransform.rotation;
        this.useUpdate = true;
    }
    /**
     * 周期函数 每帧执行
     * 此函数执行需要将this.useUpdate赋值为true
     * @param dt 当前帧与上一帧的延迟 / 秒
     */
    onUpdate(dt) {
        if (mw.SystemUtil.isClient())
            return;
        this.skyWheelRotation.y += dt * this.speed;
        if (this.skyWheelRotation.y >= 360) {
            this.skyWheelRotation.y = 0;
        }
        this.gameObject.worldTransform.rotation = this.skyWheelRotation;
        this.items.forEach((item) => {
            item.worldTransform.rotation = this.itemRotation;
        });
        for (let i = 0; i < this.items.length; i++) {
            this.items[i].worldTransform.rotation = this.itemRotation;
            this.items[i].localTransform.position = (this.itemLocs[i]);
        }
    }
    /** 脚本被销毁时最后一帧执行完调用此函数 */
    onDestroy() {
    }
};
SkyWheel = __decorate([
    Component
], SkyWheel);
var SkyWheel$1 = SkyWheel;

var foreign20 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: SkyWheel$1
});

const EXCELDATA$1 = [["id", "DressUpType", "DressUpGuid", "WingOffset", "WingRotation", "WingScale", "Speed", "Annotation"], ["", "", "", "", "", "", "", ""], [1, 1, "42804", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 90), new mw.Vector(1, 1, 1), 800, null], [2, 1, "42805", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 90), new mw.Vector(1, 1, 1), 900, null], [3, 0, null, null, null, null, 0, null], [4, 0, null, null, null, null, 0, null], [5, 0, null, null, null, null, 0, null], [6, 2, "4399", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), 460, null], [7, 2, "151527", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), 470, null]];
class DressUpConfig extends ConfigBase {
    constructor() {
        super(EXCELDATA$1);
    }
}

var foreign30 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    DressUpConfig: DressUpConfig
});

const EXCELDATA = [["id", "IsIAA", "WeaponName", "WeaponGuid", "WeaponIcon", "offset", "rotation", "scale", "AttackType", "WeaponCD", "AttackAnimationId", "AttackTime", "AttackDelayTime", "AttackEffectId", "EffectOffset", "EffectRot", "EffectScale", "AttackSound", "AttackRange", "ImpulseValue", "HurtValue", "HitEffect", "HitEffectOffset", "HitEffectRot", "HitEffectScale", "HitSound", "Annotation"], ["", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", ""], [1, 0, "挥拳", null, "37632", null, null, null, 1, "1.8", "84912", "1.8", "0.6", "135894", 80, new mw.Vector(0, 0, -90), new mw.Vector(0.5, 0.3, 0.5), "47870", [110, 50, 50], 1800, 18, "107533", new mw.Vector(0, 0, 100), new mw.Vector(0, 0, 0), new mw.Vector(3, 3, 3), "47418", "空手"], [2, 0, "海盗刀", "122181", "131907", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), 2, "1.3", "96578", "1.3", "0.2", "84942", 0, new mw.Vector(0, 0, 0), new mw.Vector(0.8, 0.8, 0.8), "47421", [0, 0, 135], 1300, 20, "130641", new mw.Vector(0, 0, 100), new mw.Vector(0, 0, 0), new mw.Vector(2, 2, 2), "47414", "旋转"], [3, 1, "翡翠镰刀", "103079", "150630", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), 1, "1.8", "29718", "1.8", "0.9", "84931", 20, new mw.Vector(90, 0, 0), new mw.Vector(1, 1, 1), "47421", [160, 20, 150], 1800, 38, "150927", new mw.Vector(0, 0, 100), new mw.Vector(0, 90, 0), new mw.Vector(3, 3, 3), "47414", "单手冷兵器跳跃攻击"], [4, 1, "屠龙剑", "103077", "150563", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), 1, "1.5", "29723", "1.5", "0.5", "84949", 20, new mw.Vector(-95, 0, 0), new mw.Vector(1, 1, 1), "47421", [160, 20, 150], 1500, 32, "150929", new mw.Vector(0, 0, 100), new mw.Vector(0, 0, 0), new mw.Vector(3, 3, 3), "47414", "单手冷兵器提砍"], [5, 1, "青虹剑", "122952", "150579", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), 1, "1.9", "29747", "1.9", "0.5", "84956", 20, new mw.Vector(135, 0, 0), new mw.Vector(1, 1, 1), "47421", [180, 180, 50], 1900, 40, "107541", new mw.Vector(0, 0, 100), new mw.Vector(0, 0, 0), new mw.Vector(5, 5, 5), "47414", "单手持刀挥砍"], [6, 1, "龙泉剑", "31728", "150578", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), 1, "1.5", "29764", "1.5", "0.6", "84932", 20, new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), "47421", [180, 180, 20], 1500, 30, "150930", new mw.Vector(0, 0, 100), new mw.Vector(0, 0, 0), new mw.Vector(5, 5, 5), "47414", "单手冷武器360°砍（特效是180°）"], [7, 1, "紫电剑", "103064", "150604", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), 1, "1.55", "29767", "1.55", "0.7", "105211", 20, new mw.Vector(0, 0, 0), new mw.Vector(0.5, 0.5, 0.5), "47421", [230, 50, 50], 1550, 31, "7750", new mw.Vector(0, 0, 100), new mw.Vector(0, 0, 0), new mw.Vector(2, 2, 2), "47414", "单手冷兵器刺剑"], [8, 1, "灵犀圣剑", "122959", "150562", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), 2, "2.9", "85957", "2.9", "0.9", "120065", 0, new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), "47421", [0, 0, 150], 2900, 58, "150919", new mw.Vector(0, 0, 100), new mw.Vector(0, 0, 90), new mw.Vector(3, 3, 5), "47414", "扫腿平砍"], [9, 1, "白金剑", "29043", "150552", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), 3, "2.15", "115466", "2.15", "1", "123287", 120, new mw.Vector(0, 0, 0), new mw.Vector(0.5, 0.5, 0.5), "47421", [130, 100, 50], 2150, 43, "151737", new mw.Vector(0, 0, 100), new mw.Vector(0, 0, 0), new mw.Vector(3, 3, 3), "47414", "飞天挥砍"], [10, 1, "终极冰环剑", "31734", "150577", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), 2, "2", "117376", "2", "0.5", "116459", 0, new mw.Vector(0, 0, 0), new mw.Vector(0.6, 0.6, 0.6), "47421", [0, 0, 120], 200, 40, "151739", new mw.Vector(0, 0, 100), new mw.Vector(0, 0, 0), new mw.Vector(3, 3, 3), "47414", "二连挥剑"], [11, 1, "紫魔剑", "103061", "150591", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), 1, "2.4", "117382", "2.4", "0.5", "123286", 20, new mw.Vector(0, 180, -90), new mw.Vector(1, 1, 1), "47421", [130, 150, 20], 2400, 48, "151741", new mw.Vector(0, 0, 100), new mw.Vector(0, 0, 0), new mw.Vector(3, 3, 3), "47414", "蹲下扫砍"], [12, 1, "天使剑", "122955", "150567", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), 3, "2.9", "162129", "2.9", "0.8", "101410", 150, new mw.Vector(0, 45, 0), new mw.Vector(0.5, 0.5, 0.5), "47421", [150, 90, 50], 2900, 58, "150932", new mw.Vector(0, 0, 100), new mw.Vector(0, 0, 0), new mw.Vector(3, 3, 3), "47414", "法阵"], [13, 1, "恶魔剑", "122956", "150613", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), 2, "4.7", "162136", "4.7", "1", "101409", 150, new mw.Vector(0, 0, 0), new mw.Vector(0.5, 0.5, 0.5), "47421", [150, 0, 200], 4700, 94, "7750", new mw.Vector(0, 0, 100), new mw.Vector(0, 0, 0), new mw.Vector(2, 2, 2), "47414", "瞬移多砍"], [14, 1, "紫虎剑", "103069", "150606", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), 3, "3.3", "122491", "3.3", "1.1", "101411", 150, new mw.Vector(0, 60, 0), new mw.Vector(0.6, 0.6, 0.6), "47421", [150, 100, 50], 3300, 66, "151736", new mw.Vector(0, 0, 100), new mw.Vector(0, 0, 0), new mw.Vector(5, 5, 5), "47414", "双砍"], [15, 1, "大砍刀", "122961", "150631", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), 1, "2.1", "85945", "2.1", "0.6", "31260", 50, new mw.Vector(0, 0, -90), new mw.Vector(1, 1, 1), "47421", [130, 130, 20], 2100, 42, "150933", new mw.Vector(0, 0, 100), new mw.Vector(0, 0, 0), new mw.Vector(2, 2, 2), "47414", "横挥砍"], [16, 1, "泣血刀", "122179", "150616", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), 2, "1.3", "96578", "1.3", "0.2", "84942", 0, new mw.Vector(0, 0, 0), new mw.Vector(0.8, 0.8, 0.8), "47421", [0, 0, 135], 1300, 26, "130641", new mw.Vector(0, 0, 100), new mw.Vector(0, 0, 0), new mw.Vector(2, 2, 2), "47414", "旋转"]];
class WeaponConfig extends ConfigBase {
    constructor() {
        super(EXCELDATA);
    }
}

var foreign45 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    WeaponConfig: WeaponConfig
});

class AchievementModuleS extends ModuleS {
    /** 当脚本被实例后，会在第一帧更新前调用此函数 */
    onStart() {
    }
    /**
     * 保存成就数据
     * @param achievementType 成就类型
     * @param progress 进度
     * @param isOnComplete 是否完成
     */
    async net_saveAchievementStage(achievementId, achievementType, progress, isOnComplete) {
        await this.currentData.saveAchievementStage(achievementId, achievementType, progress, isOnComplete);
    }
    /**
     * 保存成就提示
     * @param achievementType 成就类型
     * @param isTipsIndex 提示索引
     */
    async net_saveAchievementTipStage(achievementType, isTipsIndex) {
        await this.currentData.saveAchievementTipStage(achievementType, isTipsIndex);
    }
    net_saveFirstAch(value) {
        this.currentData.saveFirstAch(value);
    }
}
__decorate([
    Decorator.noReply()
], AchievementModuleS.prototype, "net_saveFirstAch", null);

var foreign56 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: AchievementModuleS
});

class AdsModuleS extends ModuleS {
    /** 当脚本被实例后，会在第一帧更新前调用此函数 */
    onStart() {
    }
}

var foreign60 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: AdsModuleS
});

class CollectionData extends Subdata {
    constructor() {
        super(...arguments);
        /**保存已拥有的item */
        this.itemList = [];
    }
    initDefaultData() {
        this.itemList = [];
    }
    /**保存Item */
    saveItemList(item) {
        this.itemList.push(item);
        this.save(true);
    }
}
__decorate([
    Decorator.persistence()
], CollectionData.prototype, "itemList", void 0);

var foreign68 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: CollectionData
});

class HUDDate extends Subdata {
    constructor() {
        super(...arguments);
        /**保存最大血量 */
        this.maxHp = 100;
        /**攻击力 */
        this.hurt = 0;
    }
    initDefaultData() {
        this.maxHp = 100;
        this.hurt = 0;
    }
    /**保存最大血量 */
    saveMaxHp(value) {
        this.maxHp = value;
        this.save(true);
    }
    /**保存攻击力 */
    saveHurt(value) {
        this.hurt = value;
        this.save(true);
    }
}
__decorate([
    Decorator.persistence()
], HUDDate.prototype, "maxHp", void 0);
__decorate([
    Decorator.persistence()
], HUDDate.prototype, "hurt", void 0);

var foreign75 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: HUDDate
});

/**
 * AUTO GENERATE BY UI EDITOR.
 * WARNING: DO NOT MODIFY THIS FILE,MAY CAUSE CODE LOST.
 * AUTHOR: 爱玩游戏的小胖子
 * UI: UI/module/HUDUI/Lifebar.ui
 * TIME: 2024.08.04-18.39.53
 */
let Lifebar_Generate = class Lifebar_Generate extends UIScript {
    get mLevelText() {
        if (!this.mLevelText_Internal && this.uiWidgetBase) {
            this.mLevelText_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/Canvas/mLevelText');
        }
        return this.mLevelText_Internal;
    }
    get mNameText() {
        if (!this.mNameText_Internal && this.uiWidgetBase) {
            this.mNameText_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/Canvas/mNameText');
        }
        return this.mNameText_Internal;
    }
    get mLifebar() {
        if (!this.mLifebar_Internal && this.uiWidgetBase) {
            this.mLifebar_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/Canvas/Canvas_1/mLifebar');
        }
        return this.mLifebar_Internal;
    }
    get mLifeText() {
        if (!this.mLifeText_Internal && this.uiWidgetBase) {
            this.mLifeText_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/Canvas/Canvas_1/mLifeText');
        }
        return this.mLifeText_Internal;
    }
    onAwake() {
        //设置能否每帧触发onUpdate
        this.canUpdate = false;
        this.layer = mw.UILayerBottom;
        this.initButtons();
    }
    initButtons() {
        //按钮添加点击
        //按钮添加点击
        //按钮多语言
        //文本多语言
        this.initLanguage(this.mLevelText);
        this.initLanguage(this.mNameText);
        this.initLanguage(this.mLifeText);
        //文本多语言
    }
    /*初始化多语言*/
    initLanguage(ui) {
        let call = mw.UIScript.getBehavior("lan");
        if (call && ui) {
            call(ui);
        }
    }
    onShow(...params) { }
    ;
    /*显示panel*/
    show(...param) {
        mw.UIService.showUI(this, this.layer, ...param);
    }
    /*隐藏panel*/
    hide() {
        mw.UIService.hideUI(this);
    }
};
Lifebar_Generate = __decorate([
    UIBind('UI/module/HUDUI/Lifebar.ui')
], Lifebar_Generate);
var Lifebar_Generate$1 = Lifebar_Generate;

var foreign131 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: Lifebar_Generate$1
});

let Lifebar = class Lifebar extends mw.Script {
    constructor() {
        super(...arguments);
        this.maxHp = 0;
        this.hp = 0;
        this.playerName = "";
        this.playerLevel = -1;
        this._isInit = false;
    }
    /** 当脚本被实例后，会在第一帧更新前调用此函数 */
    onStart() {
        if (SystemUtil.isClient()) {
            Console.log("初始化血条UI");
            this.init();
        }
    }
    async init() {
        this._hpBarUI = mw.UIService.create(Lifebar_Generate$1);
        this._hpBarWidget = await SpawnManager.asyncSpawn({ guid: "UIWidget", replicates: false });
        this._hpBarWidget.setTargetUIWidget(this._hpBarUI.uiWidgetBase);
        this._hpBarWidget.widgetSpace = mw.WidgetSpaceMode.OverheadUI;
        let character = this.gameObject;
        this._hpBarWidget.parent = (character.overheadUI);
        this._hpBarWidget.localTransform.position = Vector.up.multiply(0);
        this._isInit = true;
        this.onHpChange();
    }
    onHpChange() {
        if (!this._isInit) {
            return;
        }
        this._hpBarUI.mLifebar.percent = this.hp / this.maxHp;
        this._hpBarUI.mLifeText.text = `${this.hp}/${this.maxHp}`;
    }
    onNameChange() {
        if (!this._isInit) {
            return;
        }
        this._hpBarUI.mNameText.text = this.playerName;
    }
    onLevelChange() {
        if (!this._isInit) {
            return;
        }
        if (this.playerLevel == 0) {
            this._hpBarUI.mLevelText.text = "普通人(0 级)";
            return;
        }
        let starLevel = this.playerLevel % 10;
        let level = Math.floor(this.playerLevel / 10);
        Console.error("操蛋#" + starLevel + "#" + level);
        let playerLevelTxt = "";
        switch (level) {
            case 0:
                playerLevelTxt = "斗之气 " + starLevel + " 段(" + this.playerLevel + "级)";
                break;
            case 1:
                playerLevelTxt = "斗者 " + starLevel + " 星(" + this.playerLevel + "级)";
                break;
            case 2:
                playerLevelTxt = "斗师 " + starLevel + " 星(" + this.playerLevel + "级)";
                break;
            case 3:
                playerLevelTxt = "大斗师 " + starLevel + " 星(" + this.playerLevel + "级)";
                break;
            case 4:
                playerLevelTxt = "斗灵 " + starLevel + " 星(" + this.playerLevel + "级)";
                break;
            case 5:
                playerLevelTxt = "斗王 " + starLevel + " 星(" + this.playerLevel + "级)";
                break;
            case 6:
                playerLevelTxt = "斗皇 " + starLevel + " 星(" + this.playerLevel + "级)";
                break;
            case 7:
                playerLevelTxt = "斗宗 " + starLevel + " 星(" + this.playerLevel + "级)";
                break;
            case 8:
                playerLevelTxt = "斗尊 " + starLevel + " 星(" + this.playerLevel + "级)";
                break;
            case 9:
                playerLevelTxt = "斗圣 " + starLevel + " 星(" + this.playerLevel + "级)";
                break;
            default:
                playerLevelTxt = "斗帝 " + (this.playerLevel - 100) + " 星(" + this.playerLevel + "级)";
                break;
        }
        this._hpBarUI.mLevelText.text = playerLevelTxt;
    }
    onDestroy() {
        this._hpBarUI?.destroy();
        this._hpBarWidget?.destroy();
    }
};
__decorate([
    mw.Property({ replicated: true, onChanged: "onHpChange" })
], Lifebar.prototype, "maxHp", void 0);
__decorate([
    mw.Property({ replicated: true, onChanged: "onHpChange" })
], Lifebar.prototype, "hp", void 0);
__decorate([
    mw.Property({ replicated: true, onChanged: "onNameChange" })
], Lifebar.prototype, "playerName", void 0);
__decorate([
    mw.Property({ replicated: true, onChanged: "onLevelChange" })
], Lifebar.prototype, "playerLevel", void 0);
Lifebar = __decorate([
    Component
], Lifebar);
var Lifebar$1 = Lifebar;

var foreign80 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: Lifebar$1
});

class HUDModuleS extends ModuleS {
    constructor() {
        super(...arguments);
        this.rankingModuleS = null;
        //#region 翅膀
        /**---------------------------------【翅膀】--------------------------------- */
        /**储存房间内所有玩家的翅膀 */
        this.wingMap = new Map();
        /**---------------------------------【翅膀】--------------------------------- */
        //#endregion
        //#region 拖尾特效
        /**------------------------------【拖尾特效】------------------------------*/
        /**储存房间内所有玩家的拖尾特效 */
        this.wingTailEffect = new Map();
        /**------------------------------【拖尾特效】------------------------------*/
        //#endregion
        //#region 武器-攻击
        /**------------------------------【武器-攻击】------------------------------*/
        /**存储所有玩家的生命数据 */
        this.playerLifeMap = new Map();
        this.allPlayerMap = new Map();
        //#endregion 
    }
    get getRankingModuleS() {
        if (this.rankingModuleS == null) {
            this.rankingModuleS = ModuleService.getModule(RankingModuleS);
        }
        return this.rankingModuleS;
    }
    /** 当脚本被实例后，会在第一帧更新前调用此函数 */
    onStart() {
        PrefabEvent.PrefabEvtFight.onHit(this.playerAtkPlayer.bind(this));
    }
    /**生命周期方法-玩家进入游戏(客户端已就绪，数据就绪，前后端可正常通信) */
    onPlayerEnterGame(player) {
        this.setPlayerLifeData(player);
        /**-----[玩家进入游戏同步其他玩家的翅膀]----- */
        let wingPlayerIds = [];
        let wingIds = [];
        if (this.wingMap.size > 0) {
            this.wingMap.forEach((wingId, wingPlayerId) => {
                wingPlayerIds.push(wingPlayerId);
                wingIds.push(wingId);
            });
        }
        /**-----[玩家进入游戏同步其他玩家的翅膀]----- */
        /**-----[玩家进入游戏同步其他玩家的拖尾特效]----- */
        let tailEffectplayerIds = [];
        let tailEffectIds = [];
        if (this.wingTailEffect.size > 0) {
            this.wingTailEffect.forEach((tailEffectId, tailEffectplayerId) => {
                tailEffectplayerIds.push(tailEffectplayerId);
                tailEffectIds.push(tailEffectId);
            });
        }
        /**-----[玩家进入游戏同步其他玩家的拖尾特效]----- */
        /**-----[玩家进入游戏同步其他玩家的武器]----- */
        // let weaponPlayerIds: number[] = [];
        // let weaponIds: number[] = [];
        // if (this.weaponIdMap.size > 0) {
        //     this.weaponIdMap.forEach((weaponId: number, weaponPlayerId: number) => {
        //         weaponPlayerIds.push(weaponPlayerId);
        //         weaponIds.push(weaponId);
        //     });
        // }
        /**-----[玩家进入游戏同步其他玩家的武器]----- */
        if (wingPlayerIds.length == 0
            && tailEffectplayerIds.length == 0
        /*&& weaponPlayerIds.length == 0*/ )
            return;
        this.getClient(player).net_enterGameSnycData(wingPlayerIds, wingIds, tailEffectplayerIds, tailEffectIds /*,
        weaponPlayerIds, weaponIds*/);
    }
    /**生命周期方法-玩家离开房间 */
    onPlayerLeft(player) {
        let playerId = player.playerId;
        this.deletePlayerLifeData(player);
        this.deleteWingMap(playerId);
        this.deleteTailEffectMap(playerId);
        // this.deleteWeaponMap(playerId);
        this.getAllClient().net_exitGameSyncData(playerId);
    }
    /**拾取翅膀发给所有客户端 */
    net_pickWing(id) {
        this.wingMap.set(this.currentPlayerId, id);
        this.getAllClient().net_pickUpWing(this.currentPlayerId, id);
    }
    /**玩家离开房间删除翅膀数据 */
    deleteWingMap(playerId) {
        if (!this.wingMap.has(playerId))
            return;
        this.wingMap.delete(playerId);
    }
    /**拾取拖尾特效发给所有客户端 */
    net_pickTailEffect(id) {
        this.wingTailEffect.set(this.currentPlayerId, id);
        this.getAllClient().net_pickUpTailEffect(this.currentPlayerId, id);
    }
    /**玩家离开房间删除特效数据 */
    deleteTailEffectMap(playerId) {
        if (!this.wingTailEffect.has(playerId))
            return;
        this.wingTailEffect.delete(playerId);
    }
    /**设置player的头顶UI姓名 */
    setPlayerLifeNickName(playerId, nickName, level) {
        if (!this.playerLifeMap.has(playerId))
            return;
        let lifebar = this.playerLifeMap.get(playerId).lifebar;
        lifebar.playerName = nickName;
        lifebar.playerLevel = level;
    }
    /**设置玩家等级 */
    setPlayerLevel(playerId, level) {
        if (!this.playerLifeMap.has(playerId))
            return;
        this.playerLifeMap.get(playerId).lifebar.playerLevel = level;
    }
    /**升级 */
    net_addLevel() {
        this.getRankingModuleS.refreshScore(this.currentPlayer, 1);
    }
    net_addLevel1() {
        this.getRankingModuleS.refreshScore(this.currentPlayer, 20);
    }
    net_addLevel2() {
        this.getRankingModuleS.refreshScore(this.currentPlayer, 30);
    }
    net_addLevel3(lv) {
        this.getRankingModuleS.refreshScore(this.currentPlayer, lv);
    }
    getPlayerbyGameObjectId(gameObjectId) {
        return this.allPlayerMap.get(gameObjectId);
    }
    playerAtkPlayer(senderGuid, targetGuid, damage, hitPoint) {
        Console.error("PlayerModuleS-playerAtkPlayerAndNPC");
        if (senderGuid) {
            if (!this.allPlayerMap.has(targetGuid) || !this.allPlayerMap.has(senderGuid))
                return;
            let sendPlayer = this.allPlayerMap.get(senderGuid);
            let targetPlayer = this.allPlayerMap.get(targetGuid);
            if (this.playerLifeMap.get(targetPlayer.playerId).isDie || this.playerLifeMap.get(sendPlayer.playerId).isDie)
                return;
            this.setPlayerHp(targetPlayer, damage, sendPlayer);
            this.getClient(sendPlayer).net_onSelfAtkPlayer(damage, hitPoint);
        }
        else {
            let targetPlayer = this.allPlayerMap.get(targetGuid);
            if (this.playerLifeMap.get(targetPlayer.playerId).isDie)
                return;
            this.setPlayerHp(targetPlayer, damage);
        }
    }
    /**设置玩家血量 */
    setPlayerHp(player, hp, addPlayer = null) {
        let playerId = player.playerId;
        let playerAttackData = this.playerLifeMap.get(playerId);
        if (playerAttackData.isDie)
            return;
        if (playerAttackData.isWudi)
            return;
        this.getClient(player).net_FlyText(hp);
        let curHp = playerAttackData.lifebar.hp;
        curHp -= hp;
        if (curHp <= 0) {
            playerAttackData.lifebar.hp = 0;
            playerAttackData.isDie = true;
            if (addPlayer) {
                this.getRankingModuleS.refreshKillCount(addPlayer, 1);
                this.getClient(addPlayer).net_killAch();
                let names = [];
                names = this.rankingModuleS.getNamesByUserId(addPlayer.playerId, player.playerId);
                this.getAllClient().net_killTip(addPlayer.playerId, names[0], player.playerId, names[1]);
            }
            player.character.ragdollEnabled = true;
            this.spawnTombstoneS(player);
            TimeUtil.delaySecond(3).then(() => {
                player.character.ragdollEnabled = false;
                playerAttackData.lifebar.hp = DataCenterS.getData(player, HUDDate).maxHp;
                playerAttackData.isDie = false;
                this.getClient(player).net_rebirthHome();
                playerAttackData.isWudi = true;
                let effectId = GeneralManager.rpcPlayEffectOnPlayer("140173", player, mw.HumanoidSlotType.Root, 0, mw.Vector.zero, mw.Rotation.zero, mw.Vector.one.multiply(2));
                TimeUtil.delaySecond(5).then(() => {
                    playerAttackData.isWudi = false;
                    EffectService.stop(effectId);
                });
            });
        }
        else {
            playerAttackData.lifebar.hp = curHp;
        }
        Console.error("[hp] = " + this.playerLifeMap.get(playerId).lifebar.hp);
    }
    playerKillNpc(playerId, playerMame) {
        this.getAllClient().net_killTip(playerId, playerMame, -1, Utils.randomNpcName());
    }
    playerAtkEnemyFlyText(senderGuid, hitPoint, damage) {
        if (!this.allPlayerMap.has(senderGuid))
            return;
        let sendPlayer = this.allPlayerMap.get(senderGuid);
        this.getClient(sendPlayer).net_flyText(damage, hitPoint);
    }
    /**生成墓碑（服务端） */
    spawnTombstoneS(player) {
        let tombstone = null;
        tombstone = SpawnManager.wornSpawn("110950");
        let pos = player.character.worldTransform.position;
        tombstone.worldTransform.position = (new mw.Vector(pos.x, pos.y, pos.z - 110));
        setTimeout(() => {
            tombstone.destroy();
        }, 3 * 1000);
    }
    /**设置玩家生命数据 */
    async setPlayerLifeData(player) {
        let playerId = player.playerId;
        let playerAttackData = new PlayerData$1();
        let hpbar = await mw.Script.spawnScript(Lifebar$1, true, player.character);
        let maxHp = DataCenterS.getData(player, HUDDate).maxHp;
        hpbar.maxHp = maxHp;
        hpbar.hp = maxHp;
        playerAttackData.lifebar = hpbar;
        playerAttackData.isDie = false;
        this.playerLifeMap.set(playerId, playerAttackData);
        this.allPlayerMap.set(player.character.gameObjectId, player);
    }
    /**删除玩家生命数据 */
    deletePlayerLifeData(player) {
        if (this.playerLifeMap.has(player.playerId)) {
            this.playerLifeMap.get(player.playerId).lifebar.destroy();
            this.playerLifeMap.delete(player.playerId);
        }
        if (this.allPlayerMap.has(player.character.gameObjectId)) {
            this.allPlayerMap.delete(player.character.gameObjectId);
        }
    }
    /**
     * 攻击玩家
     * @param playerIds 被攻击到的玩家ID
     */
    // @Decorator.noReply()
    // public net_attackPlayer(playerIds: number[], aiIds: string[], ImpulseValue: number, badValue: number, weaponId: number): void {
    //     if (aiIds.length != 0) {
    //         for (let i = 0; i < aiIds.length; ++i) {
    //             PrefabEvent.PrefabEvtFight.hurt(this.currentPlayer.character.gameObjectId, aiIds[i], badValue);
    //         }
    //     }
    //     if (playerIds.length == 0) return;
    //     if (this.playerLifeMap.get(this.currentPlayerId).isDie) return;
    //     let forwardVector = this.currentPlayer.character.worldTransform.getForwardVector();
    //     let forwardMultiply = forwardVector.multiply(ImpulseValue);
    //     for (const playerId of playerIds) {
    //         let player = Player.getPlayer(playerId);
    //         player.character.addImpulse(forwardMultiply, true);
    //         this.setPlayerHp(player, badValue, this.currentPlayer);
    //     }
    //     this.getAllClient().net_playHitEffect(playerIds, weaponId);
    // }
    /**播放攻击动画、特效、音效（服务端同步给所有客户端执行某个客户端的攻击表现） */
    // @Decorator.noReply()
    // public net_playAniEffSound(weaponId: number): void {
    //     if (this.playerLifeMap.get(this.currentPlayerId).isDie) return;
    //     this.getAllClient().net_playAniEffSound(this.currentPlayerId, weaponId);
    // }
    /**服务端存储房间内所有玩家所持有的武器数据 */
    // private weaponIdMap: Map<number, number> = new Map<number, number>();
    /**拾取武器（广播给所有客户端） */
    // @Decorator.noReply()
    // public net_pickUpWeapon(id: number): void {
    //     this.weaponIdMap.set(this.currentPlayerId, id);
    //     this.getAllClient().net_pickUpWeapon(this.currentPlayerId, id);
    // }
    /**玩家离开游戏删除所持有武器数据 */
    // private deleteWeaponMap(playerId: number): void {
    //     if (!this.weaponIdMap.has(playerId)) return;
    //     this.weaponIdMap.delete(playerId);
    // }
    /**------------------------------【武器-攻击】------------------------------*/
    //#endregion
    //#region 玩家属性
    /**设置最大血量 */
    net_setMaxHp(maxHp) {
        let playerAttackData = this.playerLifeMap.get(this.currentPlayerId);
        playerAttackData.lifebar.maxHp = maxHp;
        this.currentData.saveMaxHp(maxHp);
    }
    /**设置当前血量 */
    net_setCurHp(curAddHp) {
        let playerAttackData = this.playerLifeMap.get(this.currentPlayerId);
        let maxHp = playerAttackData.lifebar.maxHp;
        let curHp = playerAttackData.lifebar.hp;
        curHp += curAddHp;
        if (curHp >= maxHp) {
            curHp = maxHp;
        }
        playerAttackData.lifebar.hp = curHp;
    }
    /**设置当前攻击力 */
    net_setCurAttackValue(curAttackValue) {
        this.currentData.saveHurt(curAttackValue);
    }
    //#endregion
    //#region 跳跃
    /**
     * 播放跳跃特效音效
     * @param landingId
     * @param effectOffset
     * @param landingSoundId
     * @param playerScale
     */
    net_playLandEffectAndSound(landingId, effectOffset, landingSoundId, playerScale) {
        GeneralManager.rpcPlayEffectAtLocation(landingId[0], effectOffset, 1, mw.Rotation.zero, mw.Vector.one.multiply(playerScale));
        SoundService.play3DSound(landingSoundId, effectOffset);
        GeneralManager.rpcPlayEffectAtLocation(landingId[1], effectOffset, 1, mw.Rotation.zero, mw.Vector.one.multiply(0.4 * playerScale));
    }
    /**
     * 播放落地特效音效
     * @param stompingEffectId
     * @param stompingSoundId
     * @param playerScale
     */
    net_playStompingEffectAndSound(stompingEffectId, stompingSoundId, playerScale) {
        GeneralManager.rpcPlayEffectOnPlayer(stompingEffectId, this.currentPlayer, mw.HumanoidSlotType.Root, 1, mw.Vector.zero, mw.Rotation.zero, mw.Vector.one.multiply(0.5 * playerScale));
        SoundService.play3DSound(stompingSoundId, this.currentPlayer.character);
    }
}
__decorate([
    Decorator.noReply()
], HUDModuleS.prototype, "net_pickWing", null);
__decorate([
    Decorator.noReply()
], HUDModuleS.prototype, "net_pickTailEffect", null);
__decorate([
    Decorator.noReply()
], HUDModuleS.prototype, "net_addLevel", null);
__decorate([
    Decorator.noReply()
], HUDModuleS.prototype, "net_addLevel1", null);
__decorate([
    Decorator.noReply()
], HUDModuleS.prototype, "net_addLevel2", null);
__decorate([
    Decorator.noReply()
], HUDModuleS.prototype, "net_addLevel3", null);
__decorate([
    Decorator.noReply()
], HUDModuleS.prototype, "net_setMaxHp", null);
__decorate([
    Decorator.noReply()
], HUDModuleS.prototype, "net_setCurHp", null);
__decorate([
    Decorator.noReply()
], HUDModuleS.prototype, "net_setCurAttackValue", null);
__decorate([
    Decorator.noReply()
], HUDModuleS.prototype, "net_playLandEffectAndSound", null);
__decorate([
    Decorator.noReply()
], HUDModuleS.prototype, "net_playStompingEffectAndSound", null);
let PlayerData$1 = class PlayerData {
    constructor() {
        this.lifebar = null;
        this.isDie = false;
        this.isWudi = false;
    }
};

var foreign77 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: HUDModuleS
});

class ShopData extends Subdata {
    constructor() {
        super(...arguments);
        /**保存最大高度 */
        this.maxHeight = 0;
        /**等级 */
        this.level = 0;
        /**击杀人数 */
        this.killCount = 0;
        /**是否第一次游戏 */
        this.isFirstGame = true;
    }
    initDefaultData() {
        this.maxHeight = 0;
        this.level = 0;
        this.killCount = 0;
        this.isFirstGame = true;
    }
    /**保存最大高度 */
    saveMaxHeight(maxHeight) {
        this.maxHeight = maxHeight;
        this.save(true);
    }
    /**保存等级 */
    saveLevel(level) {
        this.level = level;
        this.save(true);
    }
    /**保存击杀人数 */
    saveKillCount(killCount) {
        this.killCount = killCount;
        this.save(true);
    }
    /**保存完成游戏引导 */
    completeGameGuide() {
        this.isFirstGame = false;
        this.save(true);
    }
}
__decorate([
    Decorator.persistence()
], ShopData.prototype, "maxHeight", void 0);
__decorate([
    Decorator.persistence()
], ShopData.prototype, "level", void 0);
__decorate([
    Decorator.persistence()
], ShopData.prototype, "killCount", void 0);
__decorate([
    Decorator.persistence()
], ShopData.prototype, "isFirstGame", void 0);

var foreign91 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: ShopData
});

class RankingModuleS extends ModuleS {
    constructor() {
        super(...arguments);
        /**储存所有玩家的数据 */
        this.playerDataMap = new Map();
        this.hudModuleS = null;
    }
    get getHUDModuleS() {
        if (this.hudModuleS == null) {
            this.hudModuleS = ModuleService.getModule(HUDModuleS);
        }
        return this.hudModuleS;
    }
    /** 当脚本被实例后，会在第一帧更新前调用此函数 */
    onStart() {
        Console.error("[RankingModuleC-onStart]");
        this.registerEvents();
    }
    /**注册事件 */
    registerEvents() {
        Event.addClientListener("RefreshMaxHeight", this.refreshMaxHeight.bind(this));
    }
    net_A(v) {
        if (!this.playerDataMap.has(this.currentPlayerId))
            return;
        let playerData = this.playerDataMap.get(this.currentPlayerId);
        playerData.maxHeight += v;
        this.sendPlayersData();
    }
    net_B(v) {
        if (!this.playerDataMap.has(this.currentPlayerId))
            return;
        let playerData = this.playerDataMap.get(this.currentPlayerId);
        playerData.killCount += v;
        this.sendPlayersData();
    }
    net_C(v) {
        if (!this.playerDataMap.has(this.currentPlayerId))
            return;
        let playerData = this.playerDataMap.get(this.currentPlayerId);
        playerData.score += v;
        this.getHUDModuleS.setPlayerLevel(this.currentPlayerId, playerData.score);
        this.sendPlayersData();
    }
    /**刷新历史最高 */
    refreshMaxHeight(player, recordMaxHight) {
        let playerId = player.playerId;
        if (!this.playerDataMap.has(playerId))
            return;
        let playerData = this.playerDataMap.get(playerId);
        playerData.maxHeight = recordMaxHight;
        DataCenterS.getData(player, ShopData).saveMaxHeight(recordMaxHight);
        this.sendPlayersData();
    }
    /**刷新击杀人数 */
    refreshKillCount(player, killCount, isBoss = false) {
        let playerId = player.playerId;
        Console.error("[击杀playerId] = " + playerId);
        if (!this.playerDataMap.has(playerId))
            return;
        let playerData = this.playerDataMap.get(playerId);
        playerData.killCount += killCount;
        DataCenterS.getData(player, ShopData).saveKillCount(playerData.killCount);
        this.sendPlayersData();
        if (isBoss)
            this.hudModuleS.playerKillNpc(player.playerId, this.getNameByUserId(player.playerId));
    }
    /**刷新收集分数 */
    refreshScore(player, score) {
        let playerId = player.playerId;
        Console.error("[冲击的PlayerId] = " + playerId);
        if (!this.playerDataMap.has(playerId))
            return;
        let playerData = this.playerDataMap.get(playerId);
        playerData.score += score;
        DataCenterS.getData(player, ShopData).saveLevel(playerData.score);
        this.getHUDModuleS.setPlayerLevel(playerId, playerData.score);
        this.sendPlayersData();
    }
    /**生命周期方法-进入场景调用(客户端发来的) */
    net_onEnterScene(playerId, playerName, score, killCount, maxHeight) {
        let playerData = new PlayerData();
        playerData.playerName = playerName;
        playerData.score = score;
        playerData.killCount = killCount;
        playerData.maxHeight = maxHeight;
        this.playerDataMap.set(playerId, playerData);
        this.sendPlayersData();
        this.getHUDModuleS.setPlayerLifeNickName(playerId, playerName, playerData.score);
    }
    /**生命周期方法-玩家离开房间 */
    onPlayerLeft(player) {
        Console.error("[playerId：" + player.playerId + "的玩家离开房间]");
        let playerId = player.playerId;
        if (!this.playerDataMap.has(playerId))
            return;
        this.playerDataMap.delete(playerId);
        this.sendPlayersData();
    }
    /**发送给所有客户端所有玩家的数据 */
    sendPlayersData() {
        let playerIds = [];
        let playerNames = [];
        let maxHeights = [];
        let killCounts = [];
        let scores = [];
        this.playerDataMap.forEach((playerData, playerId) => {
            playerIds.push(playerId);
            playerNames.push(playerData.playerName);
            maxHeights.push(playerData.maxHeight);
            killCounts.push(playerData.killCount);
            scores.push(playerData.score);
        });
        this.getAllClient().net_receivePlayersData(playerIds, playerNames, maxHeights, killCounts, scores);
    }
    getNamesByUserId(playerId1, playerId2) {
        if (this.playerDataMap.has(playerId1) && this.playerDataMap.has(playerId2)) {
            return [this.playerDataMap.get(playerId1).playerName, this.playerDataMap.get(playerId2).playerName];
        }
        return null;
    }
    getNameByUserId(playerId) {
        if (this.playerDataMap.has(playerId)) {
            return this.playerDataMap.get(playerId).playerName;
        }
        return null;
    }
}
__decorate([
    Decorator.noReply()
], RankingModuleS.prototype, "net_A", null);
__decorate([
    Decorator.noReply()
], RankingModuleS.prototype, "net_B", null);
__decorate([
    Decorator.noReply()
], RankingModuleS.prototype, "net_C", null);
__decorate([
    Decorator.noReply()
], RankingModuleS.prototype, "net_onEnterScene", null);
/**数据（玩家） */
class PlayerData {
    constructor() {
        this.playerId = null;
        this.playerName = "";
        this.maxHeight = 0;
        this.killCount = 0;
        this.score = 0;
    }
}

var foreign89 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    PlayerData: PlayerData,
    default: RankingModuleS
});

class CollectionModuleS extends ModuleS {
    constructor() {
        super(...arguments);
        /**排行榜模块 */
        this.rankingModuleS = null;
    }
    /** 当脚本被实例后，会在第一帧更新前调用此函数 */
    onStart() {
        this.initData();
    }
    /**初始化数据 */
    initData() {
        this.rankingModuleS = ModuleService.getModule(RankingModuleS);
    }
    /**保存获得的Item */
    net_saveAcquiredItem(id) {
        this.saveAcquiredItem(this.currentPlayer, id);
    }
    /**保存获得的Item */
    saveAcquiredItem(player, id) {
        DataCenterS.getData(player, CollectionData).saveItemList(id);
        this.rankingModuleS.refreshScore(player, 1);
    }
}
__decorate([
    Decorator.noReply()
], CollectionModuleS.prototype, "net_saveAcquiredItem", null);

var foreign70 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: CollectionModuleS
});

/**
 * AUTO GENERATE BY UI EDITOR.
 * WARNING: DO NOT MODIFY THIS FILE,MAY CAUSE CODE LOST.
 * AUTHOR: 爱玩游戏的小胖子
 * UI: UI/module/RankingUI/RankingPanel.ui
 * TIME: 2024.08.04-18.39.54
 */
let RankingPanel_Generate = class RankingPanel_Generate extends UIScript {
    get mTitle_txt() {
        if (!this.mTitle_txt_Internal && this.uiWidgetBase) {
            this.mTitle_txt_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainCanvas/mTitle_txt');
        }
        return this.mTitle_txt_Internal;
    }
    get mFieldName() {
        if (!this.mFieldName_Internal && this.uiWidgetBase) {
            this.mFieldName_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainCanvas/mFieldName');
        }
        return this.mFieldName_Internal;
    }
    get mField1_txt() {
        if (!this.mField1_txt_Internal && this.uiWidgetBase) {
            this.mField1_txt_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainCanvas/mFieldName/mField1_txt');
        }
        return this.mField1_txt_Internal;
    }
    get mField2_txt() {
        if (!this.mField2_txt_Internal && this.uiWidgetBase) {
            this.mField2_txt_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainCanvas/mFieldName/mField2_txt');
        }
        return this.mField2_txt_Internal;
    }
    get mField3_txt() {
        if (!this.mField3_txt_Internal && this.uiWidgetBase) {
            this.mField3_txt_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainCanvas/mFieldName/mField3_txt');
        }
        return this.mField3_txt_Internal;
    }
    get mField4_txt() {
        if (!this.mField4_txt_Internal && this.uiWidgetBase) {
            this.mField4_txt_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainCanvas/mFieldName/mField4_txt');
        }
        return this.mField4_txt_Internal;
    }
    get mField5_txt() {
        if (!this.mField5_txt_Internal && this.uiWidgetBase) {
            this.mField5_txt_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainCanvas/mFieldName/mField5_txt');
        }
        return this.mField5_txt_Internal;
    }
    get mContent() {
        if (!this.mContent_Internal && this.uiWidgetBase) {
            this.mContent_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainCanvas/ScrollView/mContent');
        }
        return this.mContent_Internal;
    }
    get mSelfList() {
        if (!this.mSelfList_Internal && this.uiWidgetBase) {
            this.mSelfList_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainCanvas/mSelfList');
        }
        return this.mSelfList_Internal;
    }
    get mRankingTxt() {
        if (!this.mRankingTxt_Internal && this.uiWidgetBase) {
            this.mRankingTxt_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainCanvas/mSelfList/mRankingTxt');
        }
        return this.mRankingTxt_Internal;
    }
    get mSelfNameTxt() {
        if (!this.mSelfNameTxt_Internal && this.uiWidgetBase) {
            this.mSelfNameTxt_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainCanvas/mSelfList/mSelfNameTxt');
        }
        return this.mSelfNameTxt_Internal;
    }
    get mMaxHeightTxt() {
        if (!this.mMaxHeightTxt_Internal && this.uiWidgetBase) {
            this.mMaxHeightTxt_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainCanvas/mSelfList/mMaxHeightTxt');
        }
        return this.mMaxHeightTxt_Internal;
    }
    get mKillCountTxt() {
        if (!this.mKillCountTxt_Internal && this.uiWidgetBase) {
            this.mKillCountTxt_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainCanvas/mSelfList/mKillCountTxt');
        }
        return this.mKillCountTxt_Internal;
    }
    get mScoreTxt() {
        if (!this.mScoreTxt_Internal && this.uiWidgetBase) {
            this.mScoreTxt_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainCanvas/mSelfList/mScoreTxt');
        }
        return this.mScoreTxt_Internal;
    }
    get mClose_btn() {
        if (!this.mClose_btn_Internal && this.uiWidgetBase) {
            this.mClose_btn_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainCanvas/mClose_btn');
        }
        return this.mClose_btn_Internal;
    }
    get mRankTypeText() {
        if (!this.mRankTypeText_Internal && this.uiWidgetBase) {
            this.mRankTypeText_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainCanvas/RightCanvas/RankTypeCanvas/mRankTypeText');
        }
        return this.mRankTypeText_Internal;
    }
    get mMaxHeightBtn() {
        if (!this.mMaxHeightBtn_Internal && this.uiWidgetBase) {
            this.mMaxHeightBtn_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainCanvas/RightCanvas/RankMaxHeightCanvas/mMaxHeightBtn');
        }
        return this.mMaxHeightBtn_Internal;
    }
    get mKillCountBtn() {
        if (!this.mKillCountBtn_Internal && this.uiWidgetBase) {
            this.mKillCountBtn_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainCanvas/RightCanvas/RankKillCountCanvas/mKillCountBtn');
        }
        return this.mKillCountBtn_Internal;
    }
    get mScoreBtn() {
        if (!this.mScoreBtn_Internal && this.uiWidgetBase) {
            this.mScoreBtn_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainCanvas/RightCanvas/RankScoreCanvas/mScoreBtn');
        }
        return this.mScoreBtn_Internal;
    }
    onAwake() {
        //设置能否每帧触发onUpdate
        this.canUpdate = false;
        this.layer = mw.UILayerBottom;
        this.initButtons();
    }
    initButtons() {
        //按钮添加点击
        this.mClose_btn.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick", "mClose_btn");
        });
        this.initLanguage(this.mClose_btn);
        this.mClose_btn.touchMethod = (mw.ButtonTouchMethod.PreciseTap);
        //按钮添加点击
        this.mMaxHeightBtn.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick", "mMaxHeightBtn");
        });
        this.mMaxHeightBtn.touchMethod = (mw.ButtonTouchMethod.PreciseTap);
        this.mKillCountBtn.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick", "mKillCountBtn");
        });
        this.mKillCountBtn.touchMethod = (mw.ButtonTouchMethod.PreciseTap);
        this.mScoreBtn.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick", "mScoreBtn");
        });
        this.mScoreBtn.touchMethod = (mw.ButtonTouchMethod.PreciseTap);
        //按钮多语言
        //文本多语言
        this.initLanguage(this.mTitle_txt);
        this.initLanguage(this.mField1_txt);
        this.initLanguage(this.mField2_txt);
        this.initLanguage(this.mField3_txt);
        this.initLanguage(this.mField4_txt);
        this.initLanguage(this.mField5_txt);
        this.initLanguage(this.mRankingTxt);
        this.initLanguage(this.mSelfNameTxt);
        this.initLanguage(this.mMaxHeightTxt);
        this.initLanguage(this.mKillCountTxt);
        this.initLanguage(this.mScoreTxt);
        this.initLanguage(this.mRankTypeText);
        //文本多语言
        this.initLanguage(this.uiWidgetBase.findChildByPath("RootCanvas/MainCanvas/RightCanvas/RankTypeCanvas/RankTypeText"));
        this.initLanguage(this.uiWidgetBase.findChildByPath("RootCanvas/MainCanvas/RightCanvas/RankMaxHeightCanvas/mMaxHeightBtn/MaxHieghtText"));
        this.initLanguage(this.uiWidgetBase.findChildByPath("RootCanvas/MainCanvas/RightCanvas/RankKillCountCanvas/mKillCountBtn/KillCountText"));
        this.initLanguage(this.uiWidgetBase.findChildByPath("RootCanvas/MainCanvas/RightCanvas/RankScoreCanvas/mScoreBtn/ScoreText"));
    }
    /*初始化多语言*/
    initLanguage(ui) {
        let call = mw.UIScript.getBehavior("lan");
        if (call && ui) {
            call(ui);
        }
    }
    onShow(...params) { }
    ;
    /*显示panel*/
    show(...param) {
        mw.UIService.showUI(this, this.layer, ...param);
    }
    /*隐藏panel*/
    hide() {
        mw.UIService.hideUI(this);
    }
};
RankingPanel_Generate = __decorate([
    UIBind('UI/module/RankingUI/RankingPanel.ui')
], RankingPanel_Generate);
var RankingPanel_Generate$1 = RankingPanel_Generate;

var foreign138 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: RankingPanel_Generate$1
});

/**
 * AUTHOR: 爱玩游戏的小胖子
 * TIME: 2023.04.08-17.56.43
 */
class RankingPanel extends RankingPanel_Generate$1 {
    constructor() {
        super(...arguments);
        this.rankingItems = [];
        /**排行模式 */
        this.onRankTypeAction = new Action1();
    }
    /**
     * 构造UI文件成功后，在合适的时机最先初始化一次
     */
    onStart() {
        //设置能否每帧触发onUpdate
        this.canUpdate = false;
        this.layer = mw.UILayerMiddle;
        this.initData();
        this.bindButtons();
    }
    /**初始化数据 */
    initData() {
        Console.error("初始化排行榜");
        for (let i = 0; i < GlobalData.rankingNumber; ++i) {
            let rankingItem = ObjectPoolServices.getPool(RankingItem).spawn();
            this.mContent.addChild(rankingItem.rankingItem);
            rankingItem.rankingItem.visibility = mw.SlateVisibility.Collapsed;
            this.rankingItems.push(rankingItem);
        }
        this.initPanelTxt();
    }
    /**初始化界面 */
    initPanelTxt() {
        this.mTitle_txt.text = "排行榜";
        this.mField1_txt.text = "排名";
        this.mField2_txt.text = "昵称";
        this.mField3_txt.text = "历史最高";
        this.mField4_txt.text = "击杀人数";
        this.mField5_txt.text = "等级";
    }
    /**按钮绑定 */
    bindButtons() {
        this.mClose_btn.onClicked.add(() => {
            this.hide();
        });
        this.mMaxHeightBtn.onClicked.add(() => {
            this.onRankTypeAction.call(RankType.MaxHeight);
            this.mRankTypeText.text = "历史最高";
        });
        this.mKillCountBtn.onClicked.add(() => {
            this.onRankTypeAction.call(RankType.KillCount);
            this.mRankTypeText.text = "击杀人数";
        });
        this.mScoreBtn.onClicked.add(() => {
            this.onRankTypeAction.call(RankType.Score);
            this.mRankTypeText.text = "等级";
        });
    }
    /**重新排名 */
    rerank(playerDatas, playerData, ranking) {
        this.refreshRank(playerDatas);
        this.refreshSelf(playerData, ranking);
    }
    /**刷新排行榜（前多少名） */
    refreshRank(playerDatas) {
        Console.error("几个人：" + playerDatas.length);
        for (let i = 0; i < playerDatas.length; ++i) {
            this.rankingItems[i].mRankingTxt.text = "第 " + (i + 1) + " 名";
            this.rankingItems[i].mSelfNameTxt.text = playerDatas[i].playerName;
            this.rankingItems[i].mMaxHeightTxt.text = playerDatas[i].maxHeight.toString();
            this.rankingItems[i].mKillCountTxt.text = playerDatas[i].killCount.toString();
            this.rankingItems[i].mScoreTxt.text = playerDatas[i].score.toString();
            this.rankingItems[i].rankingItem.visibility = mw.SlateVisibility.SelfHitTestInvisible;
        }
        for (let i = playerDatas.length; i < GlobalData.rankingNumber; ++i) {
            this.rankingItems[i].rankingItem.visibility = mw.SlateVisibility.Collapsed;
        }
    }
    /**刷新自己的数据 */
    refreshSelf(playerData, ranking) {
        if (playerData == null)
            return;
        this.mRankingTxt.text = (ranking >= GlobalData.rankingNumber || ranking < 0) ? "未上榜" : "第 " + (ranking + 1) + " 名";
        this.mSelfNameTxt.text = playerData.playerName;
        this.mMaxHeightTxt.text = playerData.maxHeight.toString();
        this.mKillCountTxt.text = playerData.killCount.toString();
        this.mScoreTxt.text = playerData.score.toString();
    }
}
/**二级背包列表 */
class RankingItem {
    /**生成Item */
    constructor() {
        this.mContainerCanvas = undefined;
        this.mRankingTxt = undefined;
        this.mSelfNameTxt = undefined;
        this.mMaxHeightTxt = undefined;
        this.mKillCountTxt = undefined;
        this.mScoreTxt = undefined;
        this.rankingItem = mw.createUIByName("module/RankingUI/RankingItem");
        this.mContainerCanvas = this.rankingItem.findChildByPath("RootCanvas/mContainerCanvas");
        this.mRankingTxt = this.rankingItem.findChildByPath("RootCanvas/mContainerCanvas/mRankingTxt");
        this.mSelfNameTxt = this.rankingItem.findChildByPath("RootCanvas/mContainerCanvas/mSelfNameTxt");
        this.mMaxHeightTxt = this.rankingItem.findChildByPath("RootCanvas/mContainerCanvas/mMaxHeightTxt");
        this.mKillCountTxt = this.rankingItem.findChildByPath("RootCanvas/mContainerCanvas/mKillCountTxt");
        this.mScoreTxt = this.rankingItem.findChildByPath("RootCanvas/mContainerCanvas/mScoreTxt");
    }
    /**填充数据 */
    initData() {
    }
    /**回收Item */
    recycleItem() {
        ObjectPoolServices.getPool(RankingItem).return(this);
    }
}

var foreign90 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: RankingPanel
});

class RankingModuleC extends ModuleC {
    constructor() {
        super(...arguments);
        /**主控客户端模块 */
        this.hudModuleC = null;
        this.shopModuleC = null;
        /**排行榜UIPanel */
        this.rankingPanel = null;
        /**当前客户端的---获取用户的平台Id */
        this.playerId = null;
        /**储存所有玩家的数据 */
        this.playerDatas = [];
        /**当前客户端的数据 */
        this.currentPlayerData = null;
        /**排行类型 */
        this.rankType = RankType.Score;
        /**是否可以刷新 */
        this.isRefresh = true;
    }
    /** 当脚本被实例后，会在第一帧更新前调用此函数 */
    onStart() {
        Console.error("[RankingModuleC-onStart]");
        this.initData();
        this.registerActions();
    }
    /**初始化数据 */
    initData() {
        this.hudModuleC = ModuleService.getModule(HUDModuleC);
        this.shopModuleC = ModuleService.getModule(ShopModuleC);
        this.rankingPanel = mw.UIService.getUI(RankingPanel);
    }
    /**注册事件 */
    registerActions() {
        this.hudModuleC.onOpenRankingAction.add(() => {
            this.rankingPanel.show();
        });
        this.rankingPanel.onRankTypeAction.add((rankType) => {
            if (!this.isRefresh) {
                Notice.showDownNotice("小手别点太快哟~");
            }
            this.isRefresh = false;
            TimeUtil.delaySecond(1.5).then(() => {
                this.isRefresh = true;
            });
            this.rankType = rankType;
            this.refreshRanking();
        });
        /**[TEST] */
        mw.InputUtil.onKeyDown(mw.Keys.I, () => {
            this.server.net_A(1);
        });
        mw.InputUtil.onKeyDown(mw.Keys.O, () => {
            this.server.net_B(1);
        });
        mw.InputUtil.onKeyDown(mw.Keys.P, () => {
            this.server.net_C(1);
        });
    }
    /**生命周期方法-进入场景调用 */
    onEnterScene(sceneType) {
        TimeUtil.delaySecond(5).then(() => {
            let nickName = AccountService.getNickName();
            this.playerId = this.localPlayerId;
            nickName = (nickName) ? nickName : "playerId:" + this.playerId;
            // this.currentPlayer.character.displayName = nickName;
            let maxHeight = this.shopModuleC.getMaxHeight();
            Event.dispatchToLocal("SyncMaxHeight", maxHeight);
            let lv = this.shopModuleC.getLevel();
            let lvstr = lv.toString();
            if (lvstr.includes('[')) {
                Console.error("[hhhhhhhhhhhhhhhhh]");
                lv = Number(lvstr.split('[')[0]);
            }
            Console.error("lv = " + lv);
            this.server.net_onEnterScene(this.playerId, nickName, lv, this.shopModuleC.getKillCount(), maxHeight);
        });
    }
    /**接收所有玩家数据（服务端发来） */
    net_receivePlayersData(playerIds, playerNames, maxHeights, killCounts, scores) {
        this.playerDatas.length = 0;
        for (let i = 0; i < playerIds.length; ++i) {
            let playerData = new PlayerData();
            playerData.playerId = playerIds[i];
            playerData.playerName = playerNames[i];
            playerData.maxHeight = maxHeights[i];
            playerData.killCount = killCounts[i];
            playerData.score = scores[i];
            this.playerDatas.push(playerData);
            if (playerIds[i] == this.playerId) {
                this.currentPlayerData = playerData;
                this.shopModuleC.playerLevel(this.currentPlayerData.score);
            }
        }
        // Console.error("playerNames " + playerNames);
        this.refreshRanking();
    }
    /**刷新排行榜 */
    refreshRanking() {
        let playerDataCsAndRanking = this.sortPlayerData();
        this.rankingPanel.rerank(playerDataCsAndRanking[1], this.currentPlayerData, playerDataCsAndRanking[0]);
    }
    /**给所有玩家数据排序(返回当前玩家在第几名和前几名玩家的数据) */
    sortPlayerData() {
        let tmpPlayerDatas = [];
        this.playerDatas.sort((a, b) => {
            let ret = -1;
            switch (this.rankType) {
                case RankType.MaxHeight:
                    ret = b.maxHeight - a.maxHeight;
                    break;
                case RankType.KillCount:
                    ret = b.killCount - a.killCount;
                    break;
                case RankType.Score:
                    ret = b.score - a.score;
                    break;
                default:
                    ret = -1;
                    break;
            }
            return ret;
        });
        if (this.playerDatas.length <= GlobalData.rankingNumber) {
            tmpPlayerDatas = this.playerDatas;
        }
        else {
            for (let i = 0; i < GlobalData.rankingNumber; ++i) {
                tmpPlayerDatas.push(this.playerDatas[i]);
            }
        }
        let ranking = -1;
        for (let i = 0; i < this.playerDatas.length; ++i) {
            if (this.playerDatas[i].playerId == this.playerId) {
                ranking = i;
                break;
            }
        }
        return [ranking, tmpPlayerDatas];
    }
}
/**排行类型 */
var RankType;
(function (RankType) {
    RankType[RankType["MaxHeight"] = 1] = "MaxHeight";
    RankType[RankType["KillCount"] = 2] = "KillCount";
    RankType[RankType["Score"] = 3] = "Score";
})(RankType || (RankType = {}));

var foreign88 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    get RankType () { return RankType; },
    default: RankingModuleC
});

class ShopModuleS extends ModuleS {
    /** 当脚本被实例后，会在第一帧更新前调用此函数 */
    onStart() {
    }
    /**保存完成游戏引导 */
    net_completeGameGuide() {
        this.currentData.completeGameGuide();
    }
    /**升级&换装特效音效播放 */
    net_playEffectAndSoundToPlayer(playType) {
        let effectId = "";
        if (playType == 0) {
            effectId = GlobalData.playerAddEffectGuid;
        }
        else if (playType == 1) {
            effectId = GlobalData.upgradeEffectGuid;
        }
        else if (playType == 2) {
            effectId = GlobalData.portalEffectGuid;
        }
        else if (playType == 3) {
            effectId = GlobalData.playerAddEffectGuid;
        }
        GeneralManager.rpcPlayEffectOnPlayer(effectId, this.currentPlayer, mw.HumanoidSlotType.Root, 1, new mw.Vector(0, 0, 0), mw.Rotation.zero, mw.Vector.one);
    }
}
__decorate([
    Decorator.noReply()
], ShopModuleS.prototype, "net_completeGameGuide", null);
__decorate([
    Decorator.noReply()
], ShopModuleS.prototype, "net_playEffectAndSoundToPlayer", null);

var foreign93 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: ShopModuleS
});

class SignInData extends Subdata {
    constructor() {
        super(...arguments);
        /**是否已经签到 */
        this.isSignIns = [];
        /**上次登录时间 */
        this.lastDay = "";
    }
    initDefaultData() {
        for (let i = 0; i < 7; ++i) {
            this.isSignIns.push(false);
        }
        this.lastDay = Utils.getDay();
    }
    /**
     * 保存当天是否已经签到
     * @param day 当天
     */
    saveIsSignIns(day) {
        this.isSignIns[day] = true;
        this.save(true);
    }
    /**重置签到 */
    resetIsSignIns() {
        for (let i = 0; i < 7; ++i) {
            this.isSignIns[i] = false;
        }
        this.save(true);
    }
    /**
     * 记录今天是那一天
     * @param whatDay 那一天
     */
    saveLastDay(whatDay) {
        this.lastDay = whatDay;
        this.save(true);
    }
}
__decorate([
    Decorator.persistence()
], SignInData.prototype, "isSignIns", void 0);
__decorate([
    Decorator.persistence()
], SignInData.prototype, "lastDay", void 0);

var foreign95 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: SignInData
});

class SignInModuleS extends ModuleS {
    /** 当脚本被实例后，会在第一帧更新前调用此函数 */
    onStart() {
    }
    /**
     * 保存当天是否已经签到
     * @param day 当天
     */
    net_saveIsSignIns(day) {
        this.currentData.saveIsSignIns(day);
    }
    /**重置签到 */
    net_resetIsSignIns() {
        this.currentData.resetIsSignIns();
    }
    /**
     * 记录今天是那一天
     * @param whatDay 那一天
     */
    net_saveLastDay(whatDay) {
        this.currentData.saveLastDay(whatDay);
    }
}
__decorate([
    Decorator.noReply()
], SignInModuleS.prototype, "net_saveIsSignIns", null);
__decorate([
    Decorator.noReply()
], SignInModuleS.prototype, "net_resetIsSignIns", null);
__decorate([
    Decorator.noReply()
], SignInModuleS.prototype, "net_saveLastDay", null);

var foreign97 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: SignInModuleS
});

let GameLaunch = class GameLaunch extends mw.Script {
    constructor() {
        super(...arguments);
        this.isHideHeadUI = true;
        this.isOpenIAA = true;
        this.isOpenTest = false;
        this.logLevel = "0";
        /**------------------------------------------- 服务端 ------------------------------------------------ */
    }
    /** 当脚本被实例后，会在第一帧更新前调用此函数 */
    onStart() {
        this.onStartCS();
        if (mw.SystemUtil.isClient()) {
            this.onStartC();
        }
        else if (mw.SystemUtil.isServer()) {
            this.onStartS();
        }
    }
    /**客户端服务端的onStart */
    async onStartCS() {
        this.useUpdate = true;
        this.onRegisterModule();
        GlobalData.logLevel = Number(this.logLevel);
        GlobalData.isHideHeadUI = this.isHideHeadUI;
        GlobalData.isOpenIAA = !mw.SystemUtil.isPIE || this.isOpenIAA;
        GlobalData.isOpenTest = this.isOpenTest;
        // await this.downloadAsset();
    }
    /**
     * 周期函数 每帧执行
     * 此函数执行需要将this.useUpdate赋值为true
     * @param dt 当前帧与上一帧的延迟 / 秒
     */
    onUpdate(dt) {
        mw.TweenUtil.TWEEN.update();
        if (mw.SystemUtil.isClient()) {
            update();
            this.onUpdateC(dt);
        }
        else if (mw.SystemUtil.isServer()) {
            this.onUpdateS(dt);
        }
    }
    /**注册模块 */
    onRegisterModule() {
        ModuleService.registerModule(HUDModuleS, HUDModuleC, HUDDate);
        ModuleService.registerModule(RankingModuleS, RankingModuleC, null);
        ModuleService.registerModule(ShopModuleS, ShopModuleC, ShopData);
        ModuleService.registerModule(CollectionModuleS, CollectionModuleC, CollectionData);
        ModuleService.registerModule(SignInModuleS, SignInModuleC, SignInData);
        ModuleService.registerModule(AdsModuleS, AdsModuleC, null);
        ModuleService.registerModule(PetModuleS, PetModuleC, PetData);
        ModuleService.registerModule(AchievementModuleS, AchievementModuleC, AchievementData);
        // ModuleService.registerModule(PlayerModuleS, PlayerModuleC, PlayerLevelData);
    }
    /**预加载 */
    // private async downloadAsset(): Promise<void> {
    //     let clothesElement: IClothesElement[] = GameConfig.Clothes.getAllElement();
    //     for (let i = 0; i < clothesElement.length; ++i) {
    //         if (!clothesElement[i].ClothGuid) continue;
    //         await Utils.downloadAsset(clothesElement[i].ClothGuid);
    //         await Utils.downloadAsset(clothesElement[i].Icon);
    //     }
    //     let assetsElement: IAssetsElement[] = GameConfig.Assets.getAllElement();
    //     for (let i = 0; i < assetsElement.length; ++i) {
    //         if (!assetsElement[i].Guid) continue;
    //         await Utils.downloadAsset(assetsElement[i].Guid);
    //     }
    // }
    /**------------------------------------------- 客户端 ------------------------------------------------ */
    /**客户端的OnStart */
    onStartC() {
    }
    /**客户端的update */
    onUpdateC(dt) {
    }
    /**------------------------------------------- 客户端 ------------------------------------------------ */
    /**------------------------------------------- 服务端 ------------------------------------------------ */
    /**服务端的OnStart */
    onStartS() {
        DataStorage.setTemporaryStorage(SystemUtil.isPIE);
    }
    /**服务端的update */
    onUpdateS(dt) {
    }
};
__decorate([
    mw.Property({ displayName: "是否隐藏头顶UI", group: "脚本设置" })
], GameLaunch.prototype, "isHideHeadUI", void 0);
__decorate([
    mw.Property({ displayName: "是否开启IAA", group: "脚本设置" })
], GameLaunch.prototype, "isOpenIAA", void 0);
__decorate([
    mw.Property({ displayName: "是否开启测试UI", group: "脚本设置" })
], GameLaunch.prototype, "isOpenTest", void 0);
__decorate([
    mw.Property({ displayName: "Log级别", group: "脚本设置", selectOptions: { "None": "0", "Log": "1", "Warn": "2", "Error": "3" } })
], GameLaunch.prototype, "logLevel", void 0);
GameLaunch = __decorate([
    Component
], GameLaunch);
var GameLaunch$1 = GameLaunch;

var foreign49 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: GameLaunch$1
});

class ModifiedCameraSystem {
    static get cameraLocationMode() {
        if (!SystemUtil.isClient()) {
            return;
        }
        return Camera.currentCamera.positionMode;
    }
    static set cameraLocationMode(newCameraLocationMode) {
        if (!SystemUtil.isClient()) {
            return;
        }
        let tempTransform = Camera.currentCamera.springArm.localTransform;
        Camera.currentCamera.positionMode = newCameraLocationMode;
        if (newCameraLocationMode == CameraPositionMode.PositionFollow) {
            Camera.currentCamera.parent = Player.localPlayer.character;
            Camera.currentCamera.springArm.localTransform = tempTransform;
        }
    }
    static setCameraFollowTarget(target) {
        if (!SystemUtil.isClient())
            return;
        Camera.currentCamera.parent = target;
        Camera.currentCamera.springArm.localTransform = Transform.identity;
    }
    static cancelCameraFollowTarget() {
        if (!SystemUtil.isClient())
            return;
        Camera.currentCamera.parent = Player.localPlayer.character;
        Camera.currentCamera.springArm.localTransform = Transform.identity;
    }
    static setOverrideCameraRotation(newOverrideRotation) {
        if (!SystemUtil.isClient())
            return;
        ModifiedCameraSystem.followEnable = true;
        ModifiedCameraSystem.followRotationValue = newOverrideRotation;
        Player.setControllerRotation(ModifiedCameraSystem.followRotationValue);
        if (!ModifiedCameraSystem.isBind) {
            TimeUtil.onEnterFrame.add(() => {
                if (ModifiedCameraSystem.followEnable) {
                    Player.setControllerRotation(ModifiedCameraSystem.followRotationValue);
                }
            }, this);
            ModifiedCameraSystem.isBind = true;
        }
    }
    static resetOverrideCameraRotation() {
        if (!SystemUtil.isClient())
            return;
        ModifiedCameraSystem.followEnable = false;
    }
    static getCurrentSettings() {
        if (!SystemUtil.isClient())
            return;
        cameraSystemConfig.cameraRelativeTransform = Camera.currentCamera.localTransform;
        cameraSystemConfig.cameraWorldTransform = Camera.currentCamera.worldTransform;
        cameraSystemConfig.targetArmLength = Camera.currentCamera.springArm.length;
        cameraSystemConfig.enableCameraLocationLag = Camera.currentCamera.positionLagEnabled;
        cameraSystemConfig.cameraLocationLagSpeed = Camera.currentCamera.positionLagSpeed;
        cameraSystemConfig.enableCameraRotationLag = Camera.currentCamera.rotationLagEnabled;
        cameraSystemConfig.cameraRotationLagSpeed = Camera.currentCamera.rotationLagSpeed;
        cameraSystemConfig.cameraFOV = Camera.currentCamera.fov;
        cameraSystemConfig.cameraLocationMode = Camera.currentCamera.positionMode;
        cameraSystemConfig.cameraRotationMode = Camera.currentCamera.rotationMode;
        cameraSystemConfig.enableCameraCollision = Camera.currentCamera.springArm.collisionEnabled;
        cameraSystemConfig.cameraUpLimitAngle = Camera.currentCamera.upAngleLimit;
        cameraSystemConfig.cameraDownLimitAngle = Camera.currentCamera.downAngleLimit;
        return cameraSystemConfig;
    }
    static applySettings(CameraSetting) {
        if (!SystemUtil.isClient())
            return;
        Camera.currentCamera.localTransform = CameraSetting.cameraRelativeTransform;
        Camera.currentCamera.springArm.length = CameraSetting.targetArmLength;
        Camera.currentCamera.positionLagEnabled = CameraSetting.enableCameraLocationLag;
        Camera.currentCamera.positionLagSpeed = CameraSetting.cameraLocationLagSpeed;
        Camera.currentCamera.rotationLagEnabled = CameraSetting.enableCameraRotationLag;
        Camera.currentCamera.rotationLagSpeed = CameraSetting.cameraRotationLagSpeed;
        Camera.currentCamera.fov = CameraSetting.cameraFOV;
        ModifiedCameraSystem.cameraLocationMode = CameraSetting.cameraLocationMode;
        Camera.currentCamera.rotationMode = CameraSetting.cameraRotationMode;
        Camera.currentCamera.springArm.collisionEnabled = CameraSetting.enableCameraCollision;
        Camera.currentCamera.upAngleLimit = CameraSetting.cameraUpLimitAngle;
        Camera.currentCamera.downAngleLimit = CameraSetting.cameraDownLimitAngle;
    }
    static cameraFocusing(targetArmLength, targetOffset, timeInterval = 20) {
        if (!SystemUtil.isClient())
            return;
        let timer = TimeUtil.onEnterFrame.add(() => {
            let interpolationValue = Camera.currentCamera.springArm.length + (targetArmLength - Camera.currentCamera.springArm.length) / timeInterval;
            Camera.currentCamera.springArm.length = interpolationValue;
            if (Math.abs(Camera.currentCamera.springArm.length - targetArmLength) <= 0.5) {
                TimeUtil.onEnterFrame.remove(timer);
            }
        });
    }
    static startCameraShake(shakeData) {
        if (!SystemUtil.isClient())
            return;
        let info = {
            rotationYAmplitude: shakeData.rotYawOscillation.amplitude,
            rotationYFrequency: shakeData.rotYawOscillation.frequency,
            rotationZAmplitude: shakeData.rotRollOscillation.amplitude,
            rotationZFrequency: shakeData.rotRollOscillation.frequency,
            rotationXAmplitude: shakeData.rotPitchOscillation.amplitude,
            rotationXFrequency: shakeData.rotPitchOscillation.frequency,
            positionXAmplitude: shakeData.locXOscillation.amplitude,
            positionXFrequency: shakeData.locXOscillation.frequency,
            positionYAmplitude: shakeData.locYOscillation.amplitude,
            positionYFrequency: shakeData.locYOscillation.frequency,
            positionZAmplitude: shakeData.locZOscillation.amplitude,
            positionZFrequency: shakeData.locZOscillation.frequency,
        };
        Camera.shake(info);
    }
    static stopCameraShake() {
        if (!SystemUtil.isClient())
            return;
        Camera.stopShake();
    }
    static getDefaultCameraShakeData() {
        const defaultOscillator = {
            amplitude: 0,
            frequency: 0,
            waveform: CameraModifid.EOscillatorWaveform.SineWave,
        };
        const defaultCameraShakeData = {
            rotPitchOscillation: { ...defaultOscillator },
            rotYawOscillation: { ...defaultOscillator },
            rotRollOscillation: { ...defaultOscillator },
            locXOscillation: { ...defaultOscillator },
            locYOscillation: { ...defaultOscillator },
            locZOscillation: { ...defaultOscillator },
            fovOscillation: { ...defaultOscillator },
        };
        return defaultCameraShakeData;
    }
}
ModifiedCameraSystem.isBind = false;
ModifiedCameraSystem.followTargetEnable = true;
ModifiedCameraSystem.followTargetInterpSpeed = 15;
var CameraModifid;
(function (CameraModifid) {
    (function (EOscillatorWaveform) {
        /** 正弦波 */
        EOscillatorWaveform[EOscillatorWaveform["SineWave"] = 0] = "SineWave";
        /** Perlin噪声 */
        EOscillatorWaveform[EOscillatorWaveform["PerlinNoise"] = 1] = "PerlinNoise";
    })(CameraModifid.EOscillatorWaveform || (CameraModifid.EOscillatorWaveform = {}));
})(CameraModifid || (CameraModifid = {}));
const cameraSystemConfig = {
    cameraRelativeTransform: Transform.identity,
    cameraWorldTransform: Transform.identity,
    targetArmLength: 400,
    enableCameraLocationLag: false,
    cameraLocationLagSpeed: 10,
    enableCameraRotationLag: false,
    cameraRotationLagSpeed: 10,
    cameraFOV: 90,
    cameraLocationMode: CameraPositionMode.PositionFollow,
    cameraRotationMode: CameraRotationMode.RotationControl,
    enableCameraCollision: true,
    cameraUpLimitAngle: 40,
    cameraDownLimitAngle: -40,
};

var foreign50 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    get CameraModifid () { return CameraModifid; },
    ModifiedCameraSystem: ModifiedCameraSystem
});

/** 冷兵器客户端处理器 */
class WeaponClient extends WeaponData {
    constructor() {
        super(...arguments);
        // private allAniGuid: string[] = [];
        /** 当前动画索引 */
        this.curAnimationIndex = 0;
        /** 当前动作索引 */
        this.curActionIndex = 0;
        /** 是否可以连击 */
        this.canCombo = false;
        /** 是否可以操作 */
        this.canOper = true;
        /** 最后一次的播放动作信息 */
        this.lastPlayInfo = null;
        /** 最后一次播放的guid */
        this.lastPlayGuid = "";
        /** 当前右手穿戴的装备 */
        this.equipRightWeaponGuid = "";
        /** 当前左手穿戴的装备 */
        this.equipLeftWeaponGuid = "";
        /** 客户端右手穿戴的装备 */
        this.clientEquipGo_Right = null;
        /** 客户端左手穿戴的装备 */
        this.clientEquipGo_Left = null;
        /** 当前正在循环播放的特效 */
        this.curPlayEffs = [];
        this.fightIdelAniGuid = "";
        this.constFightingSec = 3;
        this.fightingSec = 0;
    }
    /**
     * 重新写入动画数据
     * @param jsonList 动画数据数组 每个json为一个动画
     */
    async reWriteAnimationJson(jsonList) {
        this.animationJsons = [];
        this.animationJsons = jsonList;
        this.animationInfo = [];
        this.animationJsons.forEach(e => {
            let info = JSON.parse(e);
            let newInfo = new AnimationInfo$1();
            if (info) {
                Object.keys(info).forEach(e => {
                    if (info[e] instanceof Object) {
                        return;
                    }
                    newInfo[e] = info[e];
                });
                info.infos.forEach(e => {
                    let nodeInfo = new NodeInfo();
                    Object.keys(e).forEach(k => {
                        nodeInfo[k] = e[k];
                    });
                    newInfo.infos.push(nodeInfo);
                });
                this.animationInfo.push(newInfo);
            }
            else {
                Console.error("解析json错误 : " + e);
            }
        });
        if (this.animationInfo.length != this.animationJsons.length) {
            Console.error("解析json错误 : 动画数量和解析数量不一致 : " + this.animationInfo.length + " = " + this.animationJsons.length);
        }
        else {
            for (let i = 0; i < this.animationInfo.length; i++) {
                let aniInfo = this.animationInfo[i];
                for (let j = 0; j < aniInfo.infos.length; j++) {
                    let info = aniInfo.infos[j];
                    if (info.guid == "") {
                        continue;
                    }
                    // if (mw.AssetUtil.assetLoaded(info.guid)) continue;
                    if (!mw.AssetUtil.assetLoaded(info.guid)) {
                        await mw.AssetUtil.asyncDownloadAsset(info.guid);
                        // if (res) mw.AssetUtil.asyncDownloadAsset(info.guid);
                    }
                }
                if (aniInfo.charFightIdelAniId == "") {
                    continue;
                }
                // if (mw.AssetUtil.assetLoaded(aniInfo.charFightIdelAniId)) continue;
                if (!mw.AssetUtil.assetLoaded(aniInfo.charFightIdelAniId)) {
                    await mw.AssetUtil.asyncDownloadAsset(aniInfo.charFightIdelAniId);
                    // if (res) mw.AssetUtil.assetLoaded(aniInfo.charFightIdelAniId);
                }
            }
        }
    }
    /**
     * 播放动画
     * @param index 动画索引
     * @param onComplate 动画播放完成回调,actionIndex:当前index,maxIndex:最大索引
     * @param onHit 打击点回调,actionIndex:当前动作索引,maxIndex:最大动作索引,hitObjs:受击对象列表(过滤自身)
     * @param onStartCombo 开始连击回调,milSec:可以连击的时间(毫秒)
     * @param onStartCharge 开始蓄力回调,actionIndex:当前动作索引,maxIndex:最大动作索引,endCharge:开发者主动触发,结束蓄力，参数是否蓄力成功
     * @returns
     */
    async playAnimation(index, onComplate, onHit, onStartCombo, onStartCharge) {
        if (!this.canOper) {
            // Console.error("当前不能操作");
            return false;
        }
        if (!this.checkIndex(index)) {
            Console.error("索引出错 : " + index);
            return false;
        }
        this.stopAllTimer();
        this.allTimer = [];
        if (this.curAnimationIndex != index) {
            this.curActionIndex = 0;
            this.canOper = false;
            this.canCombo = false;
        }
        else if (this.canCombo) {
            //计算下一个动作索引
            let maxIndex = this.getActionLengthByAnimation(this.curAnimationIndex) - 1;
            let curIndex = this.curActionIndex;
            this.curActionIndex++;
            if (this.curActionIndex >= this.getActionLengthByAnimation(this.curAnimationIndex)) {
                this.curActionIndex = 0;
            }
            //回调当前执行动作完成
            if (onComplate) {
                onComplate(curIndex, maxIndex);
            }
            if (this.lastPlayInfo != null) {
                PlayerManagerExtesion.rpcStopAnimation(this.char, this.lastPlayInfo.guid);
            }
        }
        //设置不能动画也不能连击了
        this.canOper = false;
        this.canCombo = false;
        this.fightIdelAniGuid = this.getCharFightIdelGuid(index);
        Console.error("this.fightIdelAniGuid : " + this.fightIdelAniGuid);
        //设置当前要播放的动画索引
        this.curAnimationIndex = index;
        let info = this.getCurPlayActionInfo();
        if (!info) {
            this.canOper = true;
            Console.error("获取不到当前动作 : " + index);
            return false;
        }
        this.lastPlayInfo = info;
        this.lastPlayGuid = info.guid;
        //持续时间
        let durMilSec = parseInt(info.duration);
        //击打时间
        let hitMilSec = parseInt(info.hitLength);
        let playCount = 1;
        if (info.isCharge != "0")
            playCount = 0;
        // if (!this.allAniGuid.includes(info.guid)) {
        //     this.allAniGuid.push(info.guid);
        //     Console.error("ALL 动画 : " + this.allAniGuid);
        // }
        Console.error("播放动画 : " + info.guid);
        PlayerManagerExtesion.rpcPlayAnimation(this.char, info.guid, playCount, 1);
        //设置前摇时间，丢失控制
        let rock = parseInt(info.frontRockLength);
        if (rock > 0) {
            this.char.movementEnabled = false;
            this.char.jumpEnabled = false;
        }
        /** 播放特效 */
        let effs = this.getCurPlayInfoAtType(NodeType.Eff);
        this.playAnimationEff(effs);
        /** 播放音效 */
        let audios = this.getCurPlayInfoAtType(NodeType.Audio);
        this.playAudio(audios);
        /** 移动处理 */
        let moves = this.getCurPlayInfoAtType(NodeType.Move);
        this.moveHandle(moves);
        /** 处理战斗待机 */
        this.fightingSec = 0;
        /** 获取技能检测类 */
        let skillRectNodes = this.getCurPlayInfoAtType(NodeType.SkillRect);
        /** 计算最终前摇时间 会决定禁止操作的时间 */
        let logicFrontTime = rock;
        moves.forEach(e => {
            if (e.isToPos == "1")
                return;
            let moveTime = parseInt(e.delayPlayTime) + parseInt(e.duration);
            if (moveTime > logicFrontTime) {
                logicFrontTime = moveTime;
            }
        });
        if (logicFrontTime > durMilSec)
            durMilSec = logicFrontTime;
        let maxIndex = this.getActionLengthByAnimation(this.curAnimationIndex) - 1;
        let curIndex = this.curActionIndex;
        if (info.isCharge != "0") {
            new Promise((resolve, reject) => {
                if (onStartCharge)
                    onStartCharge(this.curActionIndex, this.getActionLengthByAnimation(this.curAnimationIndex) - 1, resolve);
            }).then((res) => {
                this.char.movementEnabled = true;
                this.char.jumpEnabled = true;
                this.canOper = true;
                this.canCombo = true;
                curIndex += 1;
                if (curIndex > maxIndex || !res) {
                    this.canCombo = false;
                    this.curActionIndex = 0;
                    this.server_StopAllEffectProxy();
                    if (this.lastPlayInfo != null) {
                        PlayerManagerExtesion.rpcStopAnimation(this.char, this.lastPlayInfo.guid);
                    }
                    return;
                }
                this.server_StopAllEffectProxy();
                this.playAnimation(index, onComplate, onHit, onStartCombo, onStartCharge);
            });
            return;
        }
        /** 前摇结束 */
        this.startTimeOut(() => {
            this.char.movementEnabled = true;
            this.char.jumpEnabled = true;
            this.canOper = true;
            this.canCombo = true;
            if (onStartCombo) {
                onStartCombo(durMilSec - hitMilSec);
            }
        }, logicFrontTime);
        if (logicFrontTime > hitMilSec) {
            Console.error("前摇最终时间 : " + logicFrontTime + " 大于 击打时间 : " + hitMilSec);
        }
        /** 击打点回调 */
        this.startTimeOut(() => {
            if (onHit) {
                onHit(this.curActionIndex, maxIndex, SkillRectCheck.checkNodes(this.char, skillRectNodes));
            }
            if (info.isAutoPlay != "0") {
                Console.error("自动连击");
                Console.error(info);
                this.playAnimation(index, onComplate, onHit, onStartCombo, onStartCharge);
                return;
            }
        }, hitMilSec);
        /** 完成回调 */
        this.startTimeOut(() => {
            this.canCombo = false;
            this.canOper = true;
            this.curActionIndex = 0;
            if (onComplate) {
                onComplate(curIndex, maxIndex);
                // Console.error("技能使用完成");
                this.fightingSec = this.constFightingSec;
            }
        }, durMilSec);
        return true;
    }
    /** 获取动画总数 */
    getAnimationCount() {
        return this.animationInfo.length;
    }
    /**
     * 停止播放
     */
    stopPlay() {
        this.canCombo = false;
        this.canOper = true;
        this.curActionIndex = 0;
        this.stopAllTimer();
        this.server_StopAllEffectProxy();
        PlayerManagerExtesion.rpcStopAnimation(this.char, this.lastPlayGuid);
        this.lastPlayGuid = "";
    }
    /**
     * 获取动画中动作的总数
     * @param animationIndex 动画索引
     * @returns -1为传入参数有误
     */
    getActionLengthByAnimation(animationIndex) {
        if (!this.checkIndex(animationIndex)) {
            return -1;
        }
        let res = 0;
        let aniInfo = this.animationInfo[animationIndex];
        aniInfo.infos.forEach(e => {
            if (e.type == NodeType.Animation.toString())
                res++;
        });
        return res;
    }
    /**
     * 穿戴手部武器装备
     * @param equipGuid 装备guid
     * @param isRight 是否右手(默认:是)
     */
    equipWeapon_Hand(equipGuid, isRight = true) {
        this.server_EquipWeapon(equipGuid, isRight);
    }
    /**
     * 取消手部武器穿戴
     * @param isRight 是否右手(默认:是)
     */
    unequipWeapon_Hand(isRight = true) {
        this.server_EquipWeapon("", isRight);
    }
    /**
     * 设置从战斗待机切换到待机需要等待的时间
     * @param sec
     */
    setFightIdelChangeIdelWaitSec(sec) {
        this.constFightingSec = sec;
    }
    /**
     * 获取战斗待机动画guid
     * @param aniamtionIndex
     */
    getCharFightIdelGuid(animationIndex) {
        if (!this.checkIndex(animationIndex)) {
            return "";
        }
        let aniInfo = this.animationInfo[animationIndex];
        return aniInfo.charFightIdelAniId;
    }
    /** 客户端绑定角色id改变 */
    client_OnChangeCharGuid() {
        let handle = setInterval(async () => {
            let char = await GameObject.asyncFindGameObjectById(this.charGuid);
            if (char) {
                await char.asyncReady();
                clearInterval(handle);
                if (PlayerManagerExtesion.isCharacter(char)) {
                    this.char = char;
                }
                else {
                    this.char = char;
                }
            }
        }, 100);
    }
    /** 服务器通知客户端更换装备 */
    client_OnChangeEquipWeaponRight() {
        if (this.clientEquipGo_Right != null) {
            this.clientEquipGo_Right.parent = null;
            GameObjPool.despawn(this.clientEquipGo_Right);
            this.clientEquipGo_Right = null;
        }
        if (this.equipRightWeaponGuid != "") {
            const handle = setInterval(async () => {
                if (this.char != null) {
                    await this.char.asyncReady();
                    clearInterval(handle);
                    this.clientEquipGo_Right = await GameObjPool.asyncSpawn(this.equipRightWeaponGuid, mwext.GameObjPoolSourceType.Asset);
                    this.char.attachToSlot(this.clientEquipGo_Right, mw.HumanoidSlotType.RightHand);
                    this.clientEquipGo_Right.localTransform.position = mw.Vector.zero;
                    this.clientEquipGo_Right.localTransform.rotation = mw.Rotation.zero;
                }
            }, 100);
        }
    }
    /** 服务器通知客户端更换装备 */
    client_OnChangeEquipWeaponLeft() {
        if (this.clientEquipGo_Left != null) {
            this.clientEquipGo_Left.parent = null;
            GameObjPool.despawn(this.clientEquipGo_Left);
            this.clientEquipGo_Left = null;
        }
        if (this.equipLeftWeaponGuid != "") {
            const handle = setInterval(async () => {
                if (this.char != null) {
                    clearInterval(handle);
                    this.clientEquipGo_Left = await GameObjPool.asyncSpawn(this.equipLeftWeaponGuid, mwext.GameObjPoolSourceType.Asset);
                    this.char.attachToSlot(this.clientEquipGo_Left, mw.HumanoidSlotType.LeftHand);
                    this.clientEquipGo_Left.localTransform.position = mw.Vector.zero;
                    this.clientEquipGo_Left.localTransform.rotation = mw.Rotation.zero;
                }
            }, 100);
        }
    }
    /**
     * 客户端停止所有特效
     */
    async client_StopAllEffect() {
        this.curPlayEffs.forEach(e => {
            e.stop();
            e.destroy();
        });
        this.curPlayEffs = [];
    }
    /**
    * 播放特效
    * @param guid 特效id
    * @param slotIndex 插槽位置 -1 则在角色原地播放
    * @param offsetPos 偏移坐标
    * @param offsetRotate 偏移旋转
    * @param offsetScale 偏移缩放
    */
    async client_PlayEffect(guid, stopTime, slotIndex, offsetPos, offsetRotate, offsetScale, colorHex) {
        let eff = (await GameObjPool.asyncSpawn(guid));
        if (slotIndex == -1) {
            eff.worldTransform.position = new mw.Vector(offsetPos.x, offsetPos.y, offsetPos.z);
            eff.worldTransform.rotation = new mw.Rotation(offsetRotate.x, offsetRotate.y, offsetRotate.z);
            eff.worldTransform.scale = new mw.Vector(offsetScale.x, offsetScale.y, offsetScale.z);
            eff.loop = (stopTime == 0);
            eff.maskcolor = (mw.LinearColor.colorHexToLinearColor("FFFFFFFF"));
            if (colorHex && colorHex != "") {
                eff.maskcolor = (mw.LinearColor.colorHexToLinearColor(colorHex));
            }
            eff.play();
            if (stopTime == 0) {
                this.curPlayEffs.push(eff);
            }
            else {
                setTimeout(() => {
                    eff.forceStop();
                    GameObjPool.despawn(eff);
                }, stopTime);
            }
        }
        else {
            eff.worldTransform.position = new mw.Vector(offsetPos.x, offsetPos.y, offsetPos.z);
            eff.worldTransform.rotation = new mw.Rotation(offsetRotate.x, offsetRotate.y, offsetRotate.z);
            eff.worldTransform.scale = new mw.Vector(offsetScale.x, offsetScale.y, offsetScale.z);
            eff.loop = (stopTime == 0);
            eff.maskcolor = (mw.LinearColor.colorHexToLinearColor("FFFFFFFF"));
            if (colorHex && colorHex != "") {
                eff.maskcolor = (mw.LinearColor.colorHexToLinearColor(colorHex));
            }
            eff.play();
            if (stopTime == 0) {
                this.curPlayEffs.push(eff);
            }
            else {
                setTimeout(() => {
                    eff.forceStop();
                    GameObjPool.despawn(eff);
                }, stopTime);
            }
        }
    }
    /** 移动处理 */
    moveHandle(moveInfo) {
        moveInfo.forEach(e => {
            /** 移动时间 */
            let dur = parseInt(e.duration);
            /** 移动距离 */
            let moveDis = parseInt(e.moveDistance);
            /** 移动类型 */
            let moveType = parseInt(e.isToPos);
            /** 移动方向 */
            let moveDir = parseInt(e.moveDir);
            if (moveDir != -1)
                moveDir = 1;
            /** 移动延迟 */
            let moveDelay = parseInt(e.delayPlayTime);
            if (moveDelay <= 0)
                moveDelay = 1;
            this.startTimeOut(() => {
                /** 处理瞬移 */
                if (moveType == 1) {
                    let charPos = this.char.worldTransform.position.clone();
                    let toPos = charPos;
                    let curMoveDis = this.char.worldTransform.getForwardVector().clone().multiply(moveDis).multiply(moveDir);
                    toPos = toPos.clone().add(curMoveDis);
                    let rate = 1;
                    /** 碰撞检测 因为瞬移长度不定，所以需要多条射线进行检测 最多5条 */
                    while (true) {
                        if (rate <= 0) {
                            return;
                        }
                        let res = QueryUtil.lineTrace(charPos, toPos, true, true);
                        res = res.filter(e => { return e.gameObject.gameObjectId != this.char.gameObjectId; });
                        if (res.length > 0) {
                            rate -= 0.2;
                            toPos = charPos.clone().add(curMoveDis.clone().multiply(rate));
                        }
                        else {
                            break;
                        }
                    }
                    this.char.worldTransform.position = toPos.clone();
                    this.server_setCharPos(this.char.gameObjectId, toPos);
                    return;
                }
                //服务器位移
                let charPos = this.char.worldTransform.position.clone();
                let toPos = charPos.clone();
                let curMoveDis = this.char.worldTransform.getForwardVector().multiply(moveDis).multiply(moveDir);
                toPos = toPos.clone().add(curMoveDis);
                this.server_setCharToPos(this.char.gameObjectId, charPos, toPos, dur);
            }, moveDelay);
        });
    }
    /**
     * 播放音效
     * @param audios
     * @returns
     */
    playAudio(audios) {
        if (mw.SystemUtil.isServer())
            return;
        audios.forEach((e) => {
            this.startTimeOut(async () => {
                SoundService.playSound(e.guid);
            }, parseInt(e.delayPlayTime));
        });
    }
    /** 播放特效 */
    playAnimationEff(effs) {
        if (mw.SystemUtil.isServer())
            return;
        effs.forEach(e => {
            setTimeout(async () => {
                let offsetPos = new mw.Vector(parseFloat(e.offsetPos[0]), parseFloat(e.offsetPos[1]), parseFloat(e.offsetPos[2]));
                let offsetRotate = new mw.Rotation(parseFloat(e.offsetRotation[0]), parseFloat(e.offsetRotation[1]), parseFloat(e.offsetRotation[2]));
                let offsetScale = new mw.Vector(parseFloat(e.offsetScale[0]), parseFloat(e.offsetScale[1]), parseFloat(e.offsetScale[2]));
                let slotIndex = parseInt(e.slotIndex);
                if (slotIndex <= -1) {
                    offsetRotate = this.char.worldTransform.getForwardVector().toRotation().clone().add(new mw.Rotation(offsetRotate.x, offsetRotate.y, offsetRotate.z));
                    let forward = this.char.worldTransform.getForwardVector().normalized;
                    let right = this.char.worldTransform.getRightVector().normalized;
                    offsetPos = this.char.worldTransform.position.clone().add(forward.clone().multiply(offsetPos.x).add(right.clone().multiply(offsetPos.y)).add(mw.Vector.up.multiply(offsetPos.z)));
                    if (slotIndex == -2) {
                        offsetPos = offsetPos.clone().subtract(mw.Vector.up.multiply(this.char.collisionExtent.z / 2));
                    }
                    this.server_playEffectProxy(e.guid, parseInt(e.stopTime), slotIndex, offsetPos, offsetRotate, offsetScale, e.colorHex);
                }
                else {
                    if (this.char.player == null)
                        return;
                    this.server_playEffectProxy(e.guid, parseInt(e.stopTime), slotIndex, offsetPos, offsetRotate, offsetScale, e.colorHex);
                }
            }, parseInt(e.delayPlayTime));
        });
    }
    /**
     * 启动一个定时器
     * @param callback 回调
     * @param milSec 延迟毫秒
     */
    startTimeOut(callback, milSec) {
        this.allTimer.push(setTimeout(callback, milSec));
    }
    /**
     * 启动一个定时器
     * @param callback 回调
     * @param milSec 间隔毫秒
     */
    startTimeInterval(callback, milSec) {
        let index = this.allTimer.length;
        this.allTimer.push(setInterval(() => {
            callback(this.allTimer[index]);
        }, milSec));
    }
    /** 获取当前播放的action */
    getCurPlayActionInfo() {
        let info = this.animationInfo[this.curAnimationIndex];
        Console.error(this.animationInfo);
        let animationIndex = 0;
        for (let i = 0; i < info.infos.length; i++) {
            let e = info.infos[i];
            if (e.type == NodeType.Animation.toString()) {
                if (animationIndex == this.curActionIndex) {
                    return e;
                }
                animationIndex++;
            }
        }
        return null;
    }
    /**
     * 获取当前要播放的特效
     * @returns
     */
    getCurPlayInfoAtType(type) {
        let res = [];
        let info = this.animationInfo[this.curAnimationIndex];
        let animationIndex = -1;
        for (let i = 0; i < info.infos.length; i++) {
            let e = info.infos[i];
            if (e.type == NodeType.Animation.toString()) {
                animationIndex++;
            }
            if (this.curActionIndex == animationIndex) {
                if (e.type == type.toString()) {
                    res.push(e);
                }
            }
            if (this.curActionIndex < animationIndex) {
                break;
            }
        }
        return res;
    }
    /** 检查动画索引 */
    checkIndex(index) {
        if (index < 0 || index >= this.animationInfo.length) {
            return false;
        }
        return true;
    }
    onStart() {
        super.onStart();
        if (mw.SystemUtil.isClient()) ;
    }
    onUpdate(dt) {
        super.onUpdate(dt);
        if (mw.SystemUtil.isClient()) {
            if (this.fightingSec > 0)
                this.fightingSec -= dt;
            if (this.canOper && this.canCombo) {
                /** 角色在移动 */
                if (this.char.movementMode == mw.MovementMode.Walk && this.lastPlayGuid != "" &&
                    mw.Vector.distance(this.char.velocity, mw.Vector.zero) > 1) {
                    Console.error("停止动画");
                    PlayerManagerExtesion.rpcStopAnimation(this.char, this.lastPlayGuid);
                    this.lastPlayGuid = "";
                }
            }
            else if (this.char != null && this.fightIdelAniGuid != "") {
                if (this.fightingSec <= 0 || mw.Vector.distance(this.char.velocity, mw.Vector.zero) > 1) {
                    if (this.lastPlayGuid == this.fightIdelAniGuid) {
                        Console.error("开始移动 停止战斗动画");
                        PlayerManagerExtesion.rpcStopAnimation(this.char, this.fightIdelAniGuid);
                        this.lastPlayGuid = "";
                    }
                    //Console.error("当前状态在walk : " + mw.Vector.distance(this.char.velocity, mw.Vector.zero));
                    return;
                }
                if (this.fightingSec > 0) {
                    if (this.lastPlayGuid != this.fightIdelAniGuid) {
                        Console.error("播放战斗动画");
                        PlayerManagerExtesion.rpcPlayAnimation(this.char, this.fightIdelAniGuid, 0, 0);
                        this.lastPlayGuid = this.fightIdelAniGuid;
                    }
                }
                else if (this.lastPlayGuid == this.fightIdelAniGuid) {
                    PlayerManagerExtesion.rpcStopAnimation(this.char, this.fightIdelAniGuid);
                    this.lastPlayGuid = "";
                    Console.error("时间到达 退出战斗待机");
                }
            }
        }
    }
}
__decorate([
    mw.Property({ replicated: true, onChanged: "client_OnChangeEquipWeaponRight" })
], WeaponClient.prototype, "equipRightWeaponGuid", void 0);
__decorate([
    mw.Property({ replicated: true, onChanged: "client_OnChangeEquipWeaponLeft" })
], WeaponClient.prototype, "equipLeftWeaponGuid", void 0);
__decorate([
    RemoteFunction(mw.Client, mw.Multicast)
], WeaponClient.prototype, "client_StopAllEffect", null);
__decorate([
    RemoteFunction(mw.Client, mw.Multicast)
], WeaponClient.prototype, "client_PlayEffect", null);

var foreign64 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    WeaponClient: WeaponClient
});

/** 冷兵器服务器处理器 */
class WeaponServer extends WeaponClient {
    onStart() {
        super.onStart();
    }
    onUpdate(dt) {
        super.onUpdate(dt);
    }
    server_StopAllTimer() {
        this.allTimer.forEach(e => {
            clearTimeout(e);
            clearInterval(e);
        });
        this.allTimer = [];
        this.allUpdateCallback = [];
    }
    /**
     * 播放特效
     * @param guid 特效id
     * @param slotIndex 插槽位置 -1 则在角色原地播放
     * @param offsetPos 偏移坐标
     * @param offsetRotate 偏移旋转
     * @param offsetScale 偏移缩放
     */
    async server_playEffectProxy(guid, stopTime, slotIndex, offsetPos, offsetRotate, offsetScale, colorHex) {
        this.client_PlayEffect(guid, stopTime, slotIndex, offsetPos, offsetRotate, offsetScale, colorHex);
    }
    /** 服务器停止所有特效 */
    server_StopAllEffectProxy() {
        this.client_StopAllEffect();
    }
    /**
     * 设置指定对象坐标
     * @param guid
     * @param pos
     */
    async server_setCharPos(guid, pos) {
        let go = await GameObject.asyncFindGameObjectById(guid);
        if (PlayerManagerExtesion.isCharacter(go)) {
            let char = go;
            char.worldTransform.position = new mw.Vector(pos.x, pos.y, pos.z);
        }
    }
    async server_addImp(guid, moveDis, moveDir) {
        let go = await GameObject.asyncFindGameObjectById(guid);
        if (PlayerManagerExtesion.isCharacter(go)) {
            let char = go;
            char.addImpulse(char.worldTransform.getForwardVector().multiply(moveDis).multiply(moveDir), true);
        }
    }
    /**
     * 设置指定对象坐标
     * @param guid
     * @param pos
     */
    async server_setCharToPos(guid, startPos, pos, time) {
        let go = await GameObject.asyncFindGameObjectById(guid);
        if (PlayerManagerExtesion.isCharacter(go)) {
            let char = go;
            let curDur = 0;
            let posVec = new mw.Vector(pos.x, pos.y, pos.z);
            let startPosVec = new mw.Vector(startPos.x, startPos.y, startPos.z);
            let subDis = posVec.clone().subtract(startPosVec);
            let lastVec = new mw.Vector(char.worldTransform.position.x, char.worldTransform.position.y, char.worldTransform.position.z);
            Console.error("start Set char To Pos : " + Date.now());
            this.startUpdateInterval((dt) => {
                curDur += (dt * 1000);
                if (curDur >= time) {
                    Console.error("end Set char To Pos : " + Date.now());
                    return false;
                }
                let curProgress = parseFloat((curDur / time).toFixed(2));
                let curPos = new mw.Vector(parseFloat((subDis.x * curProgress).toFixed(2)), parseFloat((subDis.y * curProgress).toFixed(2)), parseFloat((subDis.z * curProgress).toFixed(2)));
                let curVec = curPos.clone().add(startPosVec);
                let res = QueryUtil.lineTrace(char.worldTransform.position, curVec, true, true);
                res = res.filter(e => { return e.gameObject.gameObjectId != this.char.gameObjectId; });
                if (res.length > 0) {
                    curVec = this.char.worldTransform.position.clone();
                }
                let sub = curVec.clone().subtract(lastVec);
                lastVec = curVec.clone();
                char.worldTransform.position = char.worldTransform.position.add(sub);
                return true;
            });
        }
    }
    /** 服务器 设置玩家装备 */
    server_EquipWeapon(guid, isRight) {
        if (isRight)
            this.equipRightWeaponGuid = guid;
        else
            this.equipLeftWeaponGuid = guid;
    }
    /** 服务器 设置玩家guid */
    server_setChar(guid) {
        this.charGuid = guid;
    }
}
__decorate([
    RemoteFunction(mw.Server)
], WeaponServer.prototype, "server_StopAllTimer", null);
__decorate([
    RemoteFunction(mw.Server)
], WeaponServer.prototype, "server_playEffectProxy", null);
__decorate([
    RemoteFunction(mw.Server)
], WeaponServer.prototype, "server_StopAllEffectProxy", null);
__decorate([
    RemoteFunction(mw.Server)
], WeaponServer.prototype, "server_setCharPos", null);
__decorate([
    RemoteFunction(mw.Server)
], WeaponServer.prototype, "server_addImp", null);
__decorate([
    RemoteFunction(mw.Server)
], WeaponServer.prototype, "server_setCharToPos", null);
__decorate([
    RemoteFunction(mw.Server)
], WeaponServer.prototype, "server_EquipWeapon", null);
__decorate([
    RemoteFunction(mw.Server)
], WeaponServer.prototype, "server_setChar", null);

var foreign67 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    WeaponServer: WeaponServer
});

/** 冷兵器类 */
let Weapon = class Weapon extends WeaponServer {
    onStart() {
        super.onStart();
        this.useUpdate = true;
    }
    onUpdate(dt) {
        super.onUpdate(dt);
    }
};
Weapon = __decorate([
    Component
], Weapon);
var Weapon$1 = Weapon;

var foreign63 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: Weapon$1
});

class DanceModuleC extends ModuleC {
    constructor() {
        super(...arguments);
        this.danceID = "195754";
        this.npcGuids = [
            "15EB31E9", "2A54C0FB", "1003851A", "280327E3", "17B100DE", "2148FA9D",
            "08F46BFB", "3CDB1A2F", "2C18804D", "0C76E3C8", "2EA57387", "10D02A7D",
            "104C6C3E", "2E526E30", "3D4A5F1F"
        ];
        this.npcs = [];
        this.npcAnimations = [];
        this.playerAnimation = null;
        this.playerLocation = new mw.Vector(1850, 1567, 100);
    }
    onStart() {
        InputUtil.onKeyDown(mw.Keys.NumPadOne, () => {
            this.startDance();
        });
        InputUtil.onKeyDown(mw.Keys.NumPadTwo, () => {
            this.stopDance();
        });
        this.initNpc();
    }
    async initNpc() {
        for (let i = 0; i < this.npcGuids.length; i++) {
            let npc = await GameObject.asyncFindGameObjectById(this.npcGuids[i]);
            if (npc) {
                npc.displayName = "";
                this.npcs.push(npc);
            }
        }
        await TimeUtil.delaySecond(this.npcGuids.length * 0.5);
        // SoundService.play3DSound("118698", new mw.Vector(100, 0, 100), 0, 1);//TODO:去掉
        for (let i = 0; i < this.npcs.length; i++) {
            let npcAnimation = PlayerManagerExtesion.loadAnimationExtesion(this.npcs[i], this.danceID, false);
            npcAnimation.loop = 0;
            npcAnimation.play();
            this.npcAnimations.push(npcAnimation);
        }
        this.playerAnimation = PlayerManagerExtesion.loadAnimationExtesion(this.localPlayer.character, this.danceID, false);
        this.playerAnimation.loop = 0;
    }
    startDance() {
        this.localPlayer.character.collisionWithOtherCharacterEnabled = false;
        this.server.net_setLocallyVisibility(false);
        this.localPlayer.character.worldTransform.position = (this.playerLocation);
        this.localPlayer.character.worldTransform.rotation = (new mw.Rotation(0, 0, 0));
        this.localPlayer.character.jumpEnabled = false;
        this.localPlayer.character.movementEnabled = false;
        for (let i = 0; i < this.npcAnimations.length; ++i) {
            this.npcAnimations[i].stop();
        }
        for (let i = 0; i < this.npcAnimations.length; ++i) {
            this.npcAnimations[i].play();
        }
        if (this.playerAnimation) {
            this.playerAnimation.play();
        }
    }
    stopDance() {
        if (this.playerAnimation) {
            this.playerAnimation.stop();
        }
        this.localPlayer.character.collisionWithOtherCharacterEnabled = true;
        this.server.net_setLocallyVisibility(true);
        this.localPlayer.character.jumpEnabled = true;
        this.localPlayer.character.movementEnabled = true;
    }
    net_setLocallyVisibility(playerId, isVisible) {
        if (playerId == this.localPlayerId)
            return;
        this.setPlayerLocallyVisibility(playerId, isVisible);
    }
    async setPlayerLocallyVisibility(playerId, isVisible) {
        let player = await Player.asyncGetPlayer(playerId);
        if (player && player.character) {
            player.character.setVisibility(isVisible ? mw.PropertyStatus.On : mw.PropertyStatus.Off);
        }
    }
}
class DanceModuleS extends ModuleS {
    onStart() {
    }
    net_setLocallyVisibility(isVisible) {
        this.getAllClient().net_setLocallyVisibility(this.currentPlayerId, isVisible);
    }
}

var foreign74 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    DanceModuleC: DanceModuleC,
    DanceModuleS: DanceModuleS
});

/**
 * AUTO GENERATE BY UI EDITOR.
 * WARNING: DO NOT MODIFY THIS FILE,MAY CAUSE CODE LOST.
 * AUTHOR: 爱玩游戏的小胖子
 * UI: UI/common/FirstGamePanel.ui
 * TIME: 2024.08.04-18.39.52
 */
let FirstGamePanel_Generate = class FirstGamePanel_Generate extends UIScript {
    get mCloseButton() {
        if (!this.mCloseButton_Internal && this.uiWidgetBase) {
            this.mCloseButton_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/Canvas/mCloseButton');
        }
        return this.mCloseButton_Internal;
    }
    onAwake() {
        //设置能否每帧触发onUpdate
        this.canUpdate = false;
        this.layer = mw.UILayerBottom;
        this.initButtons();
    }
    initButtons() {
        //按钮添加点击
        //按钮添加点击
        this.mCloseButton.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick", "mCloseButton");
        });
        this.mCloseButton.touchMethod = (mw.ButtonTouchMethod.PreciseTap);
        //按钮多语言
        //文本多语言
        //文本多语言
        this.initLanguage(this.uiWidgetBase.findChildByPath("RootCanvas/Canvas/TextBlock_1"));
    }
    /*初始化多语言*/
    initLanguage(ui) {
        let call = mw.UIScript.getBehavior("lan");
        if (call && ui) {
            call(ui);
        }
    }
    onShow(...params) { }
    ;
    /*显示panel*/
    show(...param) {
        mw.UIService.showUI(this, this.layer, ...param);
    }
    /*隐藏panel*/
    hide() {
        mw.UIService.hideUI(this);
    }
};
FirstGamePanel_Generate = __decorate([
    UIBind('UI/common/FirstGamePanel.ui')
], FirstGamePanel_Generate);
var FirstGamePanel_Generate$1 = FirstGamePanel_Generate;

var foreign111 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: FirstGamePanel_Generate$1
});

/**
 * AUTO GENERATE BY UI EDITOR.
 * WARNING: DO NOT MODIFY THIS FILE,MAY CAUSE CODE LOST.
 * AUTHOR: 爱玩游戏的小胖子
 * UI: UI/module/HUDUI/GuidePanel.ui
 * TIME: 2024.08.04-18.39.53
 */
let GuidePanel_Generate = class GuidePanel_Generate extends UIScript {
    get mRoleBgImage() {
        if (!this.mRoleBgImage_Internal && this.uiWidgetBase) {
            this.mRoleBgImage_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/Canvas/mRoleBgImage');
        }
        return this.mRoleBgImage_Internal;
    }
    get mTipsText() {
        if (!this.mTipsText_Internal && this.uiWidgetBase) {
            this.mTipsText_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/Canvas/mTipsText');
        }
        return this.mTipsText_Internal;
    }
    get mNextBtn() {
        if (!this.mNextBtn_Internal && this.uiWidgetBase) {
            this.mNextBtn_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/Canvas/mNextBtn');
        }
        return this.mNextBtn_Internal;
    }
    onAwake() {
        //设置能否每帧触发onUpdate
        this.canUpdate = false;
        this.layer = mw.UILayerBottom;
        this.initButtons();
    }
    initButtons() {
        //按钮添加点击
        //按钮添加点击
        this.mNextBtn.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick", "mNextBtn");
        });
        this.mNextBtn.touchMethod = (mw.ButtonTouchMethod.PreciseTap);
        //按钮多语言
        //文本多语言
        this.initLanguage(this.mTipsText);
        //文本多语言
        this.initLanguage(this.uiWidgetBase.findChildByPath("RootCanvas/Canvas/TextBlock"));
    }
    /*初始化多语言*/
    initLanguage(ui) {
        let call = mw.UIScript.getBehavior("lan");
        if (call && ui) {
            call(ui);
        }
    }
    onShow(...params) { }
    ;
    /*显示panel*/
    show(...param) {
        mw.UIService.showUI(this, this.layer, ...param);
    }
    /*隐藏panel*/
    hide() {
        mw.UIService.hideUI(this);
    }
};
GuidePanel_Generate = __decorate([
    UIBind('UI/module/HUDUI/GuidePanel.ui')
], GuidePanel_Generate);
var GuidePanel_Generate$1 = GuidePanel_Generate;

var foreign128 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: GuidePanel_Generate$1
});

/**
 * AUTHOR: 爱玩游戏的小胖子
 * TIME: 2023.06.22-22.17.26
 */
class GuidePanel extends GuidePanel_Generate$1 {
    constructor() {
        super(...arguments);
        this.hudModuleC = null;
        /**下一个界面 */
        this.onNextAction = new Action();
        this.roleImages = [];
        this.roleImageLen = 0;
        this.curRoleImageIndex = 0;
        this.tipText = [
            "这里是属于你的个人演唱会，在舞台上尽情展示你的风采吧~",
            "这里是跳舞PK现场，加入他们，赢得接下来的比赛吧~",
            "这里是休息区，可以躺在椅子一边沐浴阳光，一边欣赏舞台上的风采。",
            "这里是聊天区，你可以在这里交到很多游戏好朋友，快点加入他们吧~",
            "这个是豪华的摩天轮，带上你的好朋友快来坐一坐免费的摩天轮吧~",
            "这个是豪华的旋转木马，带上你的游戏好友快来享受快乐吧~",
            "这个是高级蹦床，反复跳跃会越跳越高，小心跳出宇宙哦~带上你的游戏好友来尝试跳出宇宙吧~",
            "这个是能把人物击飞的旋转闸刀，千万不要触碰它们哟~",
            "听说这里的大炮可以把人物当作子弹发射出去、快带上你的游戏好友来试试吧~",
            "周围全部都是带电的围栏，千万不要触碰它们。周围布满了传送门，进入传送门会被传送到魔兽山脉，可以寻找斗技、功法、丹药和异火来帮助你升级哟~",
            "这里就是魔兽山脉，这里可以获得斗技、功法、丹药、异火，可以帮助你快速晋级到斗帝哟~",
            "魔兽山脉遍地都是宝贝，快通过传送门到这里寻找宝藏吧，记得带上你的游戏好友一起寻找哟~",
            "游戏中还有很多好玩的功能，比如右上角的商店里面可以使用各种各样的武器，漂亮帅气的服装，绚丽多彩的翅膀和拖尾。还有排行榜，可以查看自己在游戏中的所有玩家中的排名。还有图鉴里面可以查看所有的斗技、功法、丹药和异火。背景音乐可以自由切换等等。带上你的好友快来体验游戏中的乐趣吧。"
        ];
        this.tipTextLen = 0;
        this.curTipTextLen = 0;
        this.isCanNext = true;
    }
    /**
     * 构造UI文件成功后，在合适的时机最先初始化一次
     */
    onStart() {
        //设置能否每帧触发onUpdate
        this.canUpdate = false;
        this.layer = mw.UILayerMiddle;
        this.initData();
        this.bindButton();
        this.registerAction();
    }
    /**初始化数据 */
    initData() {
        this.hudModuleC = ModuleService.getModule(HUDModuleC);
        this.roleImages = GlobalData.roleImages.split(',');
        this.roleImageLen = this.roleImages.length;
        this.tipTextLen = this.tipText.length;
    }
    /**按钮绑定 */
    bindButton() {
        this.mNextBtn.onClicked.add(() => {
            if (!this.isCanNext)
                return;
            this.isCanNext = false;
            TimeUtil.delaySecond(1.5).then(() => {
                this.isCanNext = true;
            });
            this.onNextAction.call();
        });
    }
    /**注册事件 */
    registerAction() {
        this.onNextAction.add(() => {
            if (this.curTipTextLen >= this.tipTextLen) {
                this.hide();
                this.hudModuleC.onOpenPetAction.call();
                this.hudModuleC.onOpenSignInAction1.call();
                // mw.UIService.getUI(CollectionPanel).onFindTipsAction.call(1);
                ModuleService.getModule(CollectionModuleC).startGuide(2);
                this.hudModuleC.firstGame();
                this.hudModuleC.setCurAttackValue(500);
                this.hudModuleC.setMaxHp(10000);
                let f = mw.UIService.getUI(FirstGamePanel_Generate$1);
                f.show();
                f.mCloseButton.onClicked.add(() => {
                    f.hide();
                });
                return;
            }
            this.mRoleBgImage.imageGuid = this.roleImages[this.curRoleImageIndex++];
            if (this.curRoleImageIndex >= this.roleImageLen - 1) {
                this.curRoleImageIndex = 0;
            }
            this.mTipsText.text = this.tipText[this.curTipTextLen++];
        });
    }
}

var foreign78 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: GuidePanel
});

/**
 * AUTO GENERATE BY UI EDITOR.
 * WARNING: DO NOT MODIFY THIS FILE,MAY CAUSE CODE LOST.
 * AUTHOR: 爱玩游戏的小胖子
 * UI: UI/module/NPCModule/NPCBar.ui
 * TIME: 2024.08.04-18.39.54
 */
let NPCBar_Generate = class NPCBar_Generate extends UIScript {
    get mProgressBar() {
        if (!this.mProgressBar_Internal && this.uiWidgetBase) {
            this.mProgressBar_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/Canvas/mProgressBar');
        }
        return this.mProgressBar_Internal;
    }
    get mHpTextBlock() {
        if (!this.mHpTextBlock_Internal && this.uiWidgetBase) {
            this.mHpTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/Canvas/mHpTextBlock');
        }
        return this.mHpTextBlock_Internal;
    }
    onAwake() {
        //设置能否每帧触发onUpdate
        this.canUpdate = false;
        this.layer = mw.UILayerBottom;
        this.initButtons();
    }
    initButtons() {
        //按钮添加点击
        //按钮添加点击
        //按钮多语言
        //文本多语言
        this.initLanguage(this.mHpTextBlock);
        //文本多语言
    }
    /*初始化多语言*/
    initLanguage(ui) {
        let call = mw.UIScript.getBehavior("lan");
        if (call && ui) {
            call(ui);
        }
    }
    onShow(...params) { }
    ;
    /*显示panel*/
    show(...param) {
        mw.UIService.showUI(this, this.layer, ...param);
    }
    /*隐藏panel*/
    hide() {
        mw.UIService.hideUI(this);
    }
};
NPCBar_Generate = __decorate([
    UIBind('UI/module/NPCModule/NPCBar.ui')
], NPCBar_Generate);
var NPCBar_Generate$1 = NPCBar_Generate;

var foreign132 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: NPCBar_Generate$1
});

var MonsterState;
(function (MonsterState) {
    MonsterState[MonsterState["Inactivation"] = 0] = "Inactivation";
    MonsterState[MonsterState["Activate"] = 1] = "Activate";
})(MonsterState || (MonsterState = {}));
class AnimationInfo {
    constructor() {
        // @mw.Property({ displayName: "idleAnimation", group: "AnimationInfo", tooltip: "idleAnimation" })
        this.idles = [];
        // @mw.Property({ displayName: "moveAnimation", group: "AnimationInfo", tooltip: "moveAnimation" })
        this.moves = [];
        // @mw.Property({ displayName: "attackAnimation", group: "AnimationInfo", tooltip: "attackAnimation" })
        this.attacks = [];
        // @mw.Property({ displayName: "dieAnimation", group: "AnimationInfo", tooltip: "dieAnimation" })
        this.die = "";
    }
}
class AttackInfo {
    constructor() {
        // @mw.Property({ displayName: "attackTimePoint", group: "AttackInfo", tooltip: "attackTimePoint" })
        this.attackTimePoints = [];
        // @mw.Property({ displayName: "forwardOffset", group: "AttackInfo", tooltip: "forwardOffset" })
        this.attackOffsets = [];
        // @mw.Property({ displayName: "attackRange", group: "AttackInfo", tooltip: "attackRange" })
        this.attackLengths = [];
        // @mw.Property({ displayName: "attackSize", group: "AttackInfo", tooltip: "attackSize" })
        this.attackSizes = [];
        // @mw.Property({ displayName: "damage", group: "AttackInfo", tooltip: "damage" })
        this.damages = [];
    }
}
class AttackEffectInfo {
    constructor() {
        // @mw.Property({ displayName: "effectId", group: "AttackEffectInfo", tooltip: "effectId" })
        this.effectIds = [];
        // @mw.Property({ displayName: "effectPos", group: "AttackEffectInfo", tooltip: "effectPos" })
        this.posOffsets = [];
        // @mw.Property({ displayName: "effectRot", group: "AttackEffectInfo", tooltip: "effectRot" })
        this.rotOffsets = [];
        // @mw.Property({ displayName: "effectScale", group: "AttackEffectInfo", tooltip: "effectScale" })
        this.effectScales = [];
    }
}
class Monster extends Script {
    constructor() {
        super(...arguments);
        this.monsterId = 0;
        this.hp = 0;
        this.maxHp = 0;
        // @mw.Property({ displayName: "moveSpeed", group: "Info", tooltip: "moveSpeed" })
        this.moveSpeed = 450;
        // @mw.Property({ displayName: "pathVectors", group: "Info", tooltip: "pathVectors" })
        this.pathVectors = [mw.Vector.zero];
        // @mw.Property({ displayName: "animationInfo", group: "Info", tooltip: "animationInfo" })
        this.animationInfo = new AnimationInfo();
        // @mw.Property({ displayName: "attackInfo", group: "Info", tooltip: "attackInfo" })
        this.attackInfo = new AttackInfo();
        // @mw.Property({ displayName: "attackEffectInfo", group: "Info", tooltip: "attackEffectInfo" })
        this.attackEffectInfo = new AttackEffectInfo();
        this.monster = null;
        this.monsterState = MonsterState.Inactivation;
        this.monsterWidth = 0;
        this.cubeLifebar = null;
        this.cubeLifebarWidget = null;
        this.isInitLifebar = false;
        this.preHp = 0;
        this.rankingModuleS = null;
        this.hudModuleS = null;
        this.chasePlayerMap = new Map();
        this.isFollowing = false;
        this.isNavigateToing = false;
        this.attackIndex = 0;
    }
    onStart() {
        this.onStart_CS();
    }
    get getMonster() {
        if (!this.monster) {
            this.monster = this.gameObject;
        }
        return this.monster;
    }
    get getMonsterState() {
        return this.monsterState;
    }
    set setMonsterState(value) {
        this.monsterState = value;
    }
    get getMonsterHeight() {
        return this.getMonster.collisionExtent.z;
    }
    get getMonsterWidth() {
        if (this.monsterWidth == 0) {
            this.monsterWidth = this.getMonster.collisionExtent.x > this.getMonster.collisionExtent.y ?
                this.getMonster.collisionExtent.x : this.getMonster.collisionExtent.y;
        }
        console.error(`this.monsterWidth:${this.monsterWidth}`);
        return this.monsterWidth + 10;
    }
    async onStart_CS() {
        await this.initCharacter();
        await this.initConfig();
        if (mw.SystemUtil.isClient()) {
            this.onStart_C();
        }
        else if (mw.SystemUtil.isServer()) {
            this.onStart_S();
        }
    }
    async initCharacter() {
        await ModuleService.ready();
        this.monster = this.gameObject;
        this.monster.collisionWithOtherCharacterEnabled = false;
    }
    async initConfig() {
        let monsterElement = GameConfig.MonsterInfo.getElement(this.monsterId);
        if (!monsterElement)
            return;
        await this.initPaths(monsterElement?.PathStr);
        this.animationInfo.idles = monsterElement?.Idles;
        this.animationInfo.moves = monsterElement?.Moves;
        this.animationInfo.attacks = monsterElement?.Attacks;
        this.animationInfo.die = monsterElement?.Die;
        this.attackInfo.attackTimePoints = monsterElement?.AttackTimePoints;
        this.attackInfo.attackOffsets = monsterElement?.AttackOffsets;
        this.attackInfo.attackLengths = monsterElement?.AttackLengths;
        this.attackInfo.attackSizes = monsterElement?.AttackSizes;
        this.attackInfo.damages = monsterElement?.Damages;
        this.attackEffectInfo.effectIds = monsterElement?.EffectIds;
        this.attackEffectInfo.posOffsets = monsterElement?.EffectPosOffsets;
        monsterElement?.EffectRotOffsets?.forEach((value) => {
            this.attackEffectInfo.rotOffsets.push(new mw.Rotation(value));
        });
        this.attackEffectInfo.effectScales = monsterElement?.EffectScales;
        this.moveSpeed = monsterElement?.MoveSpeed;
    }
    async initPaths(pathStr = null) {
        if (!pathStr || pathStr.length == 0)
            pathStr = GameConfig.MonsterInfo.getElement(this.monsterId)?.PathStr;
        let pathParent = await mw.GameObject.asyncFindGameObjectById(pathStr[this.randomInt(0, pathStr.length - 1)]);
        this.pathVectors.length = 0;
        pathParent?.getChildren().forEach((child) => {
            this.pathVectors.push(child.worldTransform.position);
        });
    }
    onUpdate(dt) {
        if (mw.SystemUtil.isClient()) {
            this.onUpdate_C(dt);
        }
        else if (mw.SystemUtil.isServer()) {
            this.onUpdate_S(dt);
        }
    }
    async onStart_C() {
        this.useUpdate = false;
        this.initEvent_C();
        this.preHp = Math.floor(this.maxHp);
        this.initLifebar();
    }
    initEvent_C() {
        Event.addServerListener("DrawDebug", this.bindDrawDebug_C.bind(this));
    }
    bindDrawDebug_C(start, end, halfSize) {
        // console.error(`DrawDebug`);
        mw.PhysicsService.boxTraceMulti(start, end, halfSize, mw.Rotation.zero, { objectsToIgnore: [this.getMonster] }, {
            isDrawDebug: mw.SystemUtil.isPIE,
            duration: 1,
            traceColor: mw.LinearColor.red,
            hitColor: mw.LinearColor.green,
            thickness: 3
        });
    }
    async initLifebar() {
        this.cubeLifebar = UIService.create(NPCBar_Generate$1);
        this.cubeLifebarWidget = await mw.GameObject.asyncSpawn("UIWidget", {
            replicates: false
        });
        this.cubeLifebarWidget.setTargetUIWidget(this.cubeLifebar.uiWidgetBase);
        this.cubeLifebarWidget.widgetSpace = mw.WidgetSpaceMode.OverheadUI;
        this.getMonster.attachToSlot(this.cubeLifebarWidget, mw.HumanoidSlotType.Rings);
        this.cubeLifebarWidget.occlusionEnable = false;
        this.cubeLifebarWidget.scaledByDistanceEnable = true;
        this.cubeLifebarWidget.hideByDistanceEnable = true;
        this.cubeLifebarWidget.headUIMaxVisibleDistance = 10000;
        this.isInitLifebar = true;
        this.onHpChanged();
    }
    onHpChanged() {
        if (!this.isInitLifebar)
            return;
        if (this.preHp <= 0)
            this.preHp = Math.floor(this.maxHp);
        let damage = this.preHp - this.hp;
        if (damage > 0)
            this.preHp = this.hp;
        this.cubeLifebar.mProgressBar.percent = this.hp / this.maxHp;
        this.cubeLifebar.mHpTextBlock.text = `${Math.floor(this.hp)}/${Math.floor(this.maxHp)}`;
        if (this.hp <= 0) {
            if (this.cubeLifebarWidget.getVisibility()) {
                this.cubeLifebarWidget.setVisibility(false);
            }
        }
        else if (this.hp >= this.maxHp) {
            if (!this.cubeLifebarWidget.getVisibility()) {
                this.cubeLifebarWidget.setVisibility(true);
            }
        }
    }
    onUpdate_C(dt) {
    }
    get getRankingModuleS() {
        if (this.rankingModuleS == null) {
            this.rankingModuleS = ModuleService.getModule(RankingModuleS);
        }
        return this.rankingModuleS;
    }
    get getHudModuleS() {
        if (this.hudModuleS == null) {
            this.hudModuleS = ModuleService.getModule(HUDModuleS);
        }
        return this.hudModuleS;
    }
    async onStart_S() {
        this.useUpdate = false;
        this.initEvent_S();
        await this.activate_S();
    }
    initEvent_S() {
        PrefabEvent.PrefabEvtFight.onHit(this.playerAtkEnemy_S.bind(this));
    }
    playerAtkEnemy_S(senderGuid, targetGuid, damage, hitPoint) {
        // console.error(`this.getMonster.gameObjectId:${this.getMonster.gameObjectId} targetGuid:${targetGuid}`);
        if (this.getMonster.gameObjectId != targetGuid || this.getMonsterState == MonsterState.Inactivation)
            return;
        if (this.hp <= 0) {
            this.hp = 0;
            return;
        }
        this.updateChasePlayer(senderGuid, damage);
        let tmpHp = this.hp - damage;
        if (tmpHp > 0) {
            this.hp = tmpHp;
        }
        else {
            this.hp = 0;
            this.die_S();
            if (senderGuid)
                this.getRankingModuleS.refreshKillCount(this.getHudModuleS.getPlayerbyGameObjectId(senderGuid), 1, true);
        }
        SoundService.play3DSound("47414", this.monster, 1, 10000);
        this.getHudModuleS.playerAtkEnemyFlyText(senderGuid, hitPoint, damage);
    }
    async die_S() {
        this.dieReset_S();
        //die effect
        let dieAni = await this.playDieAni_S();
        let dieTime = 0;
        if (dieAni) {
            dieTime = dieAni.length;
        }
        else {
            dieTime = 1;
            this.getMonster?.currentAnimation?.stop();
            if (!this.getMonster.ragdollEnabled)
                this.getMonster.ragdollEnabled = true;
        }
        TimeUtil.delaySecond(dieTime).then(() => { this.rebirth_S(); });
    }
    dieReset_S() {
        this.setMonsterState = MonsterState.Inactivation;
        Navigation.stopNavigateTo(this.getMonster);
        Navigation.stopFollow(this.getMonster);
        this.isFollowing = false;
        this.isNavigateToing = false;
        this.chasePlayerMap.clear();
    }
    rebirth_S() {
        let rebirthEffect = EffectService.playAtPosition("146786", this.getMonster.worldTransform.position, { loopCount: 0, scale: mw.Vector.one.multiply(2) });
        // this.initPaths();
        TimeUtil.delaySecond(this.randomInt(5, 10)).then(async () => {
            EffectService.stop(rebirthEffect);
            EffectService.playOnGameObject("142750", this.getMonster, { slotType: mw.HumanoidSlotType.Root });
            this.maxHp = this.maxHp * (this.randomFloat(1.1, 1.5));
            if (this.maxHp > 1000000)
                this.maxHp = 1000000;
            this.hp = this.maxHp;
            if (this.getMonster.ragdollEnabled)
                this.getMonster.ragdollEnabled = false;
            this.setMonsterState = MonsterState.Activate;
            await this.playIdleAni_S();
            TimeUtil.delaySecond(this.randomInt(3, 5)).then(() => this.startNavigateTo_S());
        });
    }
    updateChasePlayer(targetGuid, damage) {
        // console.error(`targetGuid:${targetGuid} damage:${damage}`);
        let totalDamage = 0;
        if (this.chasePlayerMap.has(targetGuid)) {
            totalDamage = this.chasePlayerMap.get(targetGuid);
        }
        totalDamage += damage;
        this.chasePlayerMap.set(targetGuid, totalDamage);
        this.fromNavigateToToFollow();
    }
    deleteChasePlayer(targetGuid) {
        if (!this.chasePlayerMap.has(targetGuid))
            return;
        this.chasePlayerMap.delete(targetGuid);
    }
    getChasePlayerByMaxDamage() {
        if (!this.chasePlayerMap || this.chasePlayerMap.size == 0)
            return null;
        let maxDamage = 0;
        let targetGuid = null;
        this.chasePlayerMap.forEach((value, key) => {
            if (value > maxDamage) {
                maxDamage = value;
                targetGuid = key;
            }
        });
        let targetPlayer = null;
        Player.getAllPlayers().forEach((value) => {
            if (value.character.gameObjectId == targetGuid) {
                targetPlayer = value;
            }
        });
        return targetPlayer;
    }
    async activate_S() {
        this.hp = this.maxHp;
        await this.getMonster.asyncReady();
        this.getMonster.maxWalkSpeed = this.moveSpeed;
        this.setMonsterState = MonsterState.Activate;
        this.isFollowing = false;
        this.isNavigateToing = false;
        TimeUtil.delaySecond(this.randomInt(1, 3)).then(() => { this.playIdleAni_S(); });
        TimeUtil.delaySecond(this.randomInt(5, 15)).then(() => this.startNavigateTo_S());
    }
    async fromNavigateToToFollow() {
        if (this.isFollowing || !this.isNavigateToing)
            return;
        Navigation.stopNavigateTo(this.getMonster);
        this.isNavigateToing = false;
        await this.playIdleAni_S();
        TimeUtil.delaySecond(this.randomFloat(0.5, 1)).then(() => this.startNavigateTo_S());
    }
    async startNavigateTo_S() {
        if (this.getMonsterState != MonsterState.Activate)
            return;
        await this.playMoveAni_S();
        let targetPlayer = this.getChasePlayerByMaxDamage();
        targetPlayer ? this.chasePlayerNavigateTo_S(targetPlayer) : this.randomNavigateTo_S();
    }
    randomNavigateTo_S() {
        this.isNavigateToing = true;
        Navigation.navigateTo(this.getMonster, this.getRandomTargetPoint_S(), 0, () => {
            // console.error(`随机寻路成功`);
            this.randomNavigateToComplete_S();
        }, () => {
            // console.error(`随机寻路失败`);
            this.randomNavigateToComplete_S();
        });
    }
    async randomNavigateToComplete_S() {
        this.isNavigateToing = false;
        await this.playIdleAni_S();
        TimeUtil.delaySecond(this.randomInt(1, 3)).then(() => { this.randomAttack_S(); });
    }
    chasePlayerNavigateTo_S(targetPlayer) {
        let dis = mw.Vector.distance(this.getMonster.worldTransform.position, targetPlayer.character.worldTransform.position);
        console.error(`dis:${dis}`);
        if (dis > this.getMonsterWidth) {
            this.directChasePlayerNavigateTo_S(targetPlayer);
        }
        else {
            this.directRandomAttack_S(targetPlayer);
        }
    }
    directChasePlayerNavigateTo_S(targetPlayer) {
        let isFollowSuccess = Navigation.follow(this.getMonster, targetPlayer.character, 0, () => {
            // console.error(`追踪寻路成功 dis = ${mw.Vector.distance(this.getMonster.worldTransform.position,
            //     targetPlayer.character.worldTransform.position)}`);
            this.chasePlayerNavigateToComplete_S(targetPlayer);
        }, () => {
            // console.error(`追踪寻路失败`);
            this.deleteChasePlayer(targetPlayer.character.gameObjectId);
            this.chasePlayerNavigateToComplete_S(targetPlayer);
        });
        // console.error(`isFollowSuccess: ${isFollowSuccess}`);
        if (isFollowSuccess) {
            this.isFollowing = true;
            return;
        }
        this.deleteChasePlayer(targetPlayer.character.gameObjectId);
        this.chasePlayerNavigateToComplete_S(targetPlayer);
    }
    async directRandomAttack_S(targetPlayer) {
        await this.playIdleAni_S();
        this.getMonster.lookAt(targetPlayer.character.worldTransform.position);
        TimeUtil.delaySecond(this.randomFloat(0.5, 1)).then(() => { this.randomAttack_S(); });
    }
    async chasePlayerNavigateToComplete_S(targetPlayer) {
        Navigation.stopFollow(this.getMonster);
        this.isFollowing = false;
        await this.playIdleAni_S();
        this.getMonster.lookAt(targetPlayer.character.worldTransform.position);
        TimeUtil.delaySecond(this.randomFloat(0.5, 1)).then(() => { this.randomAttack_S(); });
    }
    getRandomTargetPoint_S() {
        let targetVector = this.pathVectors[this.randomInt(0, this.pathVectors.length - 1)];
        let targetPos = Navigation.getRandomReachablePointInRadius(targetVector, 100);
        return (!targetPos) ? targetVector : targetPos;
    }
    async randomAttack_S() {
        if (this.getMonsterState != MonsterState.Activate)
            return;
        this.attackIndex = this.randomInt(0, this.animationInfo.attacks.length - 1);
        let attackAni = await this.playAtkAni_S();
        let attackTime = attackAni.length;
        TimeUtil.delaySecond(this.attackInfo.attackTimePoints[this.attackIndex]).then(() => { this.randomAttackCheck_S(); });
        TimeUtil.delaySecond(attackTime).then(() => { this.playIdleAni_S(); });
        TimeUtil.delaySecond(attackTime + this.randomInt(1, 3)).then(() => this.startNavigateTo_S());
    }
    randomAttackCheck_S() {
        if (this.getMonsterState != MonsterState.Activate)
            return;
        this.attackEffect_S();
        let monsterPos = this.getMonster.worldTransform.position;
        let attackOffset = this.attackInfo.attackOffsets[this.attackIndex];
        let startForwardOffset = this.getMonster.worldTransform.getForwardVector().multiply(attackOffset.y);
        let start = new mw.Vector(monsterPos.x + startForwardOffset.x + attackOffset.x, monsterPos.y + startForwardOffset.y, monsterPos.z + startForwardOffset.z + attackOffset.z);
        let endForwardOffset = this.getMonster.worldTransform.getForwardVector().multiply(this.attackInfo.attackLengths[this.attackIndex]);
        let end = new mw.Vector(monsterPos.x + endForwardOffset.x, monsterPos.y + endForwardOffset.y, monsterPos.z + endForwardOffset.z);
        let hitResults = mw.PhysicsService.boxTraceMulti(start, end, this.attackInfo.attackSizes[this.attackIndex], mw.Rotation.zero, { objectsToIgnore: [this.getMonster] }, {});
        if (mw.SystemUtil.isPIE)
            Event.dispatchToAllClient("DrawDebug", start, end, this.attackInfo.attackSizes[this.attackIndex]);
        if (!hitResults || hitResults.length == 0)
            return;
        for (let i = 0; i < hitResults.length; ++i) {
            let hitGo = hitResults[i].gameObject;
            if (hitGo instanceof mw.Character && hitGo?.player) {
                let targetGameObjectId = hitGo?.gameObjectId;
                PrefabEvent.PrefabEvtFight.hit(null, targetGameObjectId, this.attackInfo.damages[this.attackIndex], hitGo.worldTransform.position);
            }
        }
    }
    attackEffect_S() {
        let monsterPos = this.getMonster.worldTransform.position;
        let effectOffset = this.attackEffectInfo.posOffsets[this.attackIndex];
        let monsterRot = this.getMonster.worldTransform.rotation;
        let effectLocalOffset = monsterRot.rotateVector(effectOffset);
        let effectPos = new mw.Vector(monsterPos.x + effectLocalOffset.x, monsterPos.y + effectLocalOffset.y, monsterPos.z + effectLocalOffset.z);
        let rotOffset = this.attackEffectInfo.rotOffsets[this.attackIndex];
        let constructorRot = new mw.Rotation(this.getMonster.worldTransform.getForwardVector(), mw.Vector.up);
        let effectRot = new mw.Rotation(constructorRot.x + rotOffset.x, constructorRot.y + rotOffset.y, constructorRot.z + rotOffset.z);
        EffectService.playAtPosition(this.attackEffectInfo.effectIds[this.attackIndex], effectPos, {
            loopCount: 1,
            rotation: effectRot,
            scale: this.attackEffectInfo.effectScales[this.attackIndex]
        });
    }
    onUpdate_S(dt) {
    }
    async playIdleAni_S() {
        let idle = this.animationInfo.idles[this.randomInt(0, this.animationInfo.idles.length - 1)];
        await this.asyncDownloadAsset(idle);
        if (this.getMonsterState != MonsterState.Activate)
            return;
        let idleAni = this.getMonster.loadAnimation(idle);
        idleAni.loop = 0;
        idleAni.play();
    }
    async playMoveAni_S() {
        let move = this.animationInfo.moves[this.randomInt(0, this.animationInfo.moves.length - 1)];
        await this.asyncDownloadAsset(move);
        if (this.getMonsterState != MonsterState.Activate)
            return;
        let moveAni = this.getMonster.loadAnimation(move);
        moveAni.loop = 0;
        moveAni.play();
    }
    async playAtkAni_S() {
        await this.asyncDownloadAsset(this.animationInfo.attacks[this.attackIndex]);
        if (this.getMonsterState != MonsterState.Activate)
            return null;
        let attackAni = this.getMonster.loadAnimation(this.animationInfo.attacks[this.attackIndex]);
        attackAni.play();
        return attackAni;
    }
    async playDieAni_S() {
        let die = this.animationInfo.die;
        if (die != "-1") {
            await this.asyncDownloadAsset(die);
            let dieAni = this.getMonster.loadAnimation(die);
            dieAni.play();
            return dieAni;
        }
        return null;
    }
    randomInt(min, max) {
        if (min > max) {
            let temp = min;
            min = max;
            max = temp;
        }
        return Math.floor(Math.random() * (max - min + 1) + min);
    }
    randomFloat(min, max) {
        if (min > max) {
            let temp = min;
            min = max;
            max = temp;
        }
        return Number((Math.random() * (max - min) + min).toFixed(1));
    }
    async asyncDownloadAsset(InAssetId) {
        if (!mw.AssetUtil.assetLoaded(InAssetId)) {
            await mw.AssetUtil.asyncDownloadAsset(InAssetId);
        }
    }
}
__decorate([
    mw.Property({ displayName: "monsterId", group: "Info", tooltip: "monsterId" })
], Monster.prototype, "monsterId", void 0);
__decorate([
    mw.Property({ displayName: "hp", group: "Info", tooltip: "hp", replicated: true, onChanged: "onHpChanged" })
], Monster.prototype, "hp", void 0);
__decorate([
    mw.Property({ displayName: "maxHp", group: "Info", tooltip: "maxHp", replicated: true, onChanged: "onHpChanged" })
], Monster.prototype, "maxHp", void 0);

var foreign81 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    AnimationInfo: AnimationInfo,
    AttackEffectInfo: AttackEffectInfo,
    AttackInfo: AttackInfo,
    get MonsterState () { return MonsterState; },
    default: Monster
});

let NPCBar = class NPCBar extends mw.Script {
    constructor() {
        super(...arguments);
        this.maxHp = 0;
        this.hp = 0;
        this._isInit = false;
    }
    /** 当脚本被实例后，会在第一帧更新前调用此函数 */
    onStart() {
        if (SystemUtil.isClient()) {
            Console.log("初始化血条UI");
            this.init();
        }
    }
    async init() {
        this._hpBarUI = mw.UIService.create(NPCBar_Generate$1);
        this._hpBarWidget = await SpawnManager.asyncSpawn({ guid: "UIWidget", replicates: false });
        this._hpBarWidget.setTargetUIWidget(this._hpBarUI.uiWidgetBase);
        this._hpBarWidget.widgetSpace = mw.WidgetSpaceMode.OverheadUI;
        let character = this.gameObject;
        this._hpBarWidget.parent = (character.overheadUI);
        this._hpBarWidget.localTransform.position = Vector.up.multiply(0);
        this._isInit = true;
        this.onHpChange();
    }
    onHpChange() {
        if (!this._isInit) {
            return;
        }
        this._hpBarUI.mProgressBar.percent = this.hp / this.maxHp;
        this._hpBarUI.mHpTextBlock.text = `${this.hp}/${this.maxHp}`;
    }
    onDestroy() {
        this._hpBarUI?.destroy();
        this._hpBarWidget?.destroy();
    }
};
__decorate([
    mw.Property({ replicated: true, onChanged: "onHpChange" })
], NPCBar.prototype, "maxHp", void 0);
__decorate([
    mw.Property({ replicated: true, onChanged: "onHpChange" })
], NPCBar.prototype, "hp", void 0);
__decorate([
    mw.Property({ replicated: true, onChanged: "onNameChange" })
], NPCBar.prototype, "_hpBarUI", void 0);
NPCBar = __decorate([
    Component
], NPCBar);
var NPCBar$1 = NPCBar;

var foreign82 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: NPCBar$1
});

let Boss = class Boss extends Script {
    constructor() {
        super(...arguments);
        this.bossScale = 1;
        this.maxHp = 100;
        this.curHp = 0;
        this.isOpenPath = false;
        this.pathVector = [mw.Vector.zero];
        this.moveSpeed = 100;
        this.explosionEffect = "27422";
        this.respawnTime = 5;
        this.respawnEffect = "142750";
        this.boss = null;
        /**--------------------------------【客户端】-------------------------------- */
        this.cubeLifebar = null;
        this.cubeLifebarWidget = null;
        this.isInitLifebar = false;
        this.preHp = 0;
        /**--------------------------------【客户端】-------------------------------- */
        /**--------------------------------【服务端】-------------------------------- */
        this.rankingModuleS = null;
        this.hudModuleS = null;
        this.frameCount = 0;
        this.maxFrameCount = 1;
        this.index = 0;
        this.pathFlag = true;
        this.curBossDir = mw.Vector.zero;
        this.targetPos = mw.Vector.zero;
        this.targetDistance = 0;
    }
    /** 当脚本被实例后，会在第一帧更新前调用此函数 */
    onStart() {
        this.onStartCS();
    }
    /**onStart */
    async onStartCS() {
        await ModuleService.ready();
        this.boss = this.gameObject;
        await this.boss.asyncReady();
        if (mw.SystemUtil.isClient()) {
            this.onStartC();
        }
        else if (mw.SystemUtil.isServer()) {
            this.onStartS();
        }
    }
    /**
     * 周期函数 每帧执行
     * 此函数执行需要将this.useUpdate赋值为true
     * @param dt 当前帧与上一帧的延迟 / 秒
     */
    onUpdate(dt) {
        if (mw.SystemUtil.isClient()) {
            this.onUpdateC(dt);
        }
        else if (mw.SystemUtil.isServer()) {
            this.onUpdateS(dt);
        }
    }
    /**客户端的onStart */
    onStartC() {
        this.useUpdate = false;
        this.initDataC();
    }
    initDataC() {
        this.preHp = Math.floor(this.maxHp);
        this.initLifebar();
        this.initGun();
    }
    async initLifebar() {
        this.cubeLifebar = UIService.create(NPCBar_Generate$1);
        this.cubeLifebarWidget = await mw.GameObject.asyncSpawn("UIWidget", {
            replicates: false
        });
        this.cubeLifebarWidget.setTargetUIWidget(this.cubeLifebar.uiWidgetBase);
        this.cubeLifebarWidget.widgetSpace = mw.WidgetSpaceMode.OverheadUI;
        let boss = this.gameObject;
        boss.attachToSlot(this.cubeLifebarWidget, mw.HumanoidSlotType.Rings);
        this.cubeLifebarWidget.occlusionEnable = false;
        this.cubeLifebarWidget.scaledByDistanceEnable = true;
        this.cubeLifebarWidget.hideByDistanceEnable = true;
        this.cubeLifebarWidget.headUIMaxVisibleDistance = 10000;
        this.isInitLifebar = true;
        this.onHpChanged();
    }
    async initGun() {
        let bossGun = await mw.GameObject.asyncSpawn(Utils.getWeapon());
        this.boss.attachToSlot(bossGun, mw.HumanoidSlotType.RightHand);
    }
    /**客户端的onUpdate */
    onUpdateC(dt) {
    }
    /**
     * 血量改变
     */
    onHpChanged() {
        if (!this.isInitLifebar)
            return;
        Console.error("onHpChanged = " + this.curHp);
        if (this.preHp <= 0)
            this.preHp = Math.floor(this.maxHp);
        let damage = this.preHp - this.curHp;
        if (damage > 0)
            this.preHp = this.curHp;
        this.cubeLifebar.mProgressBar.percent = this.curHp / this.maxHp;
        this.cubeLifebar.mHpTextBlock.text = `${Math.floor(this.curHp)}/${Math.floor(this.maxHp)}`;
        if (this.curHp <= 0) {
            if (this.cubeLifebarWidget.getVisibility()) {
                this.cubeLifebarWidget.setVisibility(false);
            }
        }
        else if (this.curHp >= this.maxHp) {
            if (!this.cubeLifebarWidget.getVisibility()) {
                this.cubeLifebarWidget.setVisibility(true);
            }
        }
    }
    get getRankingModuleS() {
        if (this.rankingModuleS == null) {
            this.rankingModuleS = ModuleService.getModule(RankingModuleS);
        }
        return this.rankingModuleS;
    }
    get getHudModuleS() {
        if (this.hudModuleS == null) {
            this.hudModuleS = ModuleService.getModule(HUDModuleS);
        }
        return this.hudModuleS;
    }
    /**服务端的onStart */
    onStartS() {
        this.useUpdate = true;
        this.initDataS();
        this.initMove();
        this.bindEventS();
    }
    initDataS() {
        this.maxHp = Math.floor(this.maxHp);
        this.curHp = this.maxHp;
        this.boss.displayName = "";
        this.boss.worldTransform.scale = mw.Vector.one.multiply(this.bossScale);
        this.boss.setDescription([Utils.getBoss()]);
    }
    /**
     * 绑定事件
     */
    bindEventS() {
        PrefabEvent.PrefabEvtFight.onHit(this.playerAtkEnemyS.bind(this));
    }
    /**
     * 玩家攻击敌人
     * @param senderGuid
     * @param targetGuid
     * @param damage
     * @param hitPoint
     * @returns
     */
    playerAtkEnemyS(senderGuid, targetGuid, damage, hitPoint) {
        Console.error("Enemy_Cube onHit this.gameObject.gameObjectId = " + this.gameObject.gameObjectId + "。targetGuid = " + targetGuid + "。damage = " + damage + "。");
        if (this.gameObject.gameObjectId != targetGuid)
            return;
        if (this.curHp <= 0)
            return;
        let tmpHp = this.curHp - damage;
        if (tmpHp >= 0) {
            this.curHp = tmpHp;
        }
        else {
            this.curHp = 0;
        }
        if (this.curHp <= 0) {
            this.dieS();
            if (senderGuid)
                this.getRankingModuleS.refreshKillCount(this.getHudModuleS.getPlayerbyGameObjectId(senderGuid), 1, true);
            TimeUtil.delaySecond(this.respawnTime).then(() => {
                this.curHp = this.maxHp;
                this.respawnS();
            });
        }
        Console.error("curHp = " + this.curHp);
        SoundService.play3DSound("47414", this.boss, 1, 10000);
        this.getHudModuleS.playerAtkEnemyFlyText(senderGuid, hitPoint, damage);
    }
    dieS() {
        this.setVisibilityS(false);
        EffectService.playAtPosition(this.explosionEffect, this.gameObject.worldTransform.position, {
            scale: mw.Vector.one.multiply(1)
        });
    }
    respawnS() {
        this.boss.setDescription([Utils.getBoss()]);
        this.setVisibilityS(true);
        EffectService.playAtPosition(this.respawnEffect, this.gameObject.worldTransform.position, {
            scale: mw.Vector.one.multiply(1)
        });
    }
    /**
     * 设置物体是否被显示
     * @param isVisibility
     */
    setVisibilityS(isVisibility) {
        // this.gameObject.setVisibility(isVisibility, true);
        // this.gameObject.setCollision(isVisibility ? mw.PropertyStatus.On : mw.PropertyStatus.Off);
        this.boss.ragdollEnabled = !isVisibility;
        this.useUpdate = isVisibility;
    }
    initMove() {
        this.targetPos = this.pathVector[this.index];
        this.boss.maxWalkSpeed = this.moveSpeed;
    }
    /**服务端的onUpdate */
    onUpdateS(dt) {
        this.frameCount++;
        if (this.frameCount < this.maxFrameCount)
            return;
        this.frameCount = 0;
        this.updateMove();
    }
    updateMove() {
        if (!this.isOpenPath)
            return;
        if (!this.pathVector || this.pathVector.length == 0)
            return;
        this.curBossDir = this.targetPos.clone().add(this.targetPos.clone().subtract(this.boss.worldTransform.position.clone()));
        this.boss.lookAt(this.curBossDir);
        this.boss.addMovement(mw.Vector.forward);
        this.targetDistance = Math.sqrt(Math.pow(this.boss.worldTransform.position.x - this.pathVector[this.index].x, 2) +
            Math.pow(this.boss.worldTransform.position.y - this.pathVector[this.index].y, 2));
        //到达寻路点
        if (this.targetDistance > 50)
            return;
        if (this.pathFlag && this.index < this.pathVector.length - 1) {
            this.index++;
            if (this.index == this.pathVector.length - 1)
                this.pathFlag = false;
        }
        else if (!this.pathFlag && this.index > 0) {
            this.index--;
            if (this.index == 0)
                this.pathFlag = true;
        }
        this.targetPos = this.pathVector[this.index];
    }
    /**--------------------------------【服务端】-------------------------------- */
    /** 脚本被销毁时最后一帧执行完调用此函数 */
    onDestroy() {
    }
};
__decorate([
    mw.Property({ displayName: "体型大小", group: "设置属性", range: { min: 1, max: 5, showSlider: true } })
], Boss.prototype, "bossScale", void 0);
__decorate([
    mw.Property({ displayName: "血量", group: "设置属性", tooltip: "血量", range: { min: 100, max: 100000, showSlider: true } })
], Boss.prototype, "maxHp", void 0);
__decorate([
    mw.Property({ displayName: "当前剩余血量", group: "设置属性", tooltip: "当前剩余血量", replicated: true, onChanged: "onHpChanged" })
], Boss.prototype, "curHp", void 0);
__decorate([
    mw.Property({ displayName: "是否开启寻路", group: "设置属性", tooltip: "是否开启寻路" })
], Boss.prototype, "isOpenPath", void 0);
__decorate([
    mw.Property({ displayName: "路径", group: "设置属性", tooltip: "路径" })
], Boss.prototype, "pathVector", void 0);
__decorate([
    mw.Property({ displayName: "移动速度", group: "设置属性", tooltip: "移动速度", range: { min: 100, max: 1000, showSlider: true } })
], Boss.prototype, "moveSpeed", void 0);
__decorate([
    mw.Property({ displayName: "爆炸特效", group: "设置属性", tooltip: "爆炸特效" })
], Boss.prototype, "explosionEffect", void 0);
__decorate([
    mw.Property({ displayName: "重生时间", group: "设置属性", tooltip: "重生时间", range: { min: 5, max: 60, showSlider: true } })
], Boss.prototype, "respawnTime", void 0);
__decorate([
    mw.Property({ displayName: "重生特效", group: "设置属性", tooltip: "重生特效" })
], Boss.prototype, "respawnEffect", void 0);
Boss = __decorate([
    Component
], Boss);
var Boss$1 = Boss;

var foreign86 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: Boss$1
});

/**
 * AUTO GENERATE BY UI EDITOR.
 * WARNING: DO NOT MODIFY THIS FILE,MAY CAUSE CODE LOST.
 * AUTHOR: 爱玩游戏的小胖子
 * UI: UI/module/PlayerModule/LevelPanel.ui
 * TIME: 2024.08.04-18.39.54
 */
let LevelPanel_Generate = class LevelPanel_Generate extends UIScript {
    get mTextBlock() {
        if (!this.mTextBlock_Internal && this.uiWidgetBase) {
            this.mTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mTextBlock');
        }
        return this.mTextBlock_Internal;
    }
    onAwake() {
        //设置能否每帧触发onUpdate
        this.canUpdate = false;
        this.layer = mw.UILayerBottom;
        this.initButtons();
    }
    initButtons() {
        //按钮添加点击
        //按钮添加点击
        //按钮多语言
        //文本多语言
        this.initLanguage(this.mTextBlock);
        //文本多语言
    }
    /*初始化多语言*/
    initLanguage(ui) {
        let call = mw.UIScript.getBehavior("lan");
        if (call && ui) {
            call(ui);
        }
    }
    onShow(...params) { }
    ;
    /*显示panel*/
    show(...param) {
        mw.UIService.showUI(this, this.layer, ...param);
    }
    /*隐藏panel*/
    hide() {
        mw.UIService.hideUI(this);
    }
};
LevelPanel_Generate = __decorate([
    UIBind('UI/module/PlayerModule/LevelPanel.ui')
], LevelPanel_Generate);
var LevelPanel_Generate$1 = LevelPanel_Generate;

var foreign136 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: LevelPanel_Generate$1
});

class PlayerLevelData extends Subdata {
    constructor() {
        super(...arguments);
        this.cleareds = [];
    }
    initDefaultData() {
        this.cleareds = [];
    }
    saveCleared(cleared) {
        if (this.cleareds.includes(cleared))
            return;
        this.cleareds.push(cleared);
    }
}
__decorate([
    Decorator.persistence()
], PlayerLevelData.prototype, "cleareds", void 0);
class PlayerModuleC extends ModuleC {
    constructor() {
        super(...arguments);
        this.shopModuleC = null;
        this.blockingVolumeElements = [];
        this.currentLv = 0;
        this.allTriggers = [];
        this.allBlockingVolumes = [];
        this.allLevelPanels = [];
        this.levelLoc = [
            new mw.Vector(198139, 37965, 64390),
            new mw.Vector(198139, -10699, 64390),
            new mw.Vector(198139, 3315, 64390),
            new mw.Vector(198139, 14030, 64390),
            new mw.Vector(198139, 23845, 64390)
        ];
        this.allLv = [];
    }
    onStart() {
        this.shopModuleC = ModuleService.getModule(ShopModuleC);
        this.shopModuleC.onPlayerLevelAction.add((lv) => {
            this.currentLv = lv;
            this.updateBlockingVolume();
        });
    }
    onEnterScene(sceneType) {
        if (!this.shopModuleC) {
            this.shopModuleC = ModuleService.getModule(ShopModuleC);
        }
        this.currentLv = this.shopModuleC.getLevel();
        this.initDatas();
    }
    async initDatas() {
        this.blockingVolumeElements = GameConfig.BlockingVolume.getAllElement();
        for (let i = 0; i < this.blockingVolumeElements.length; ++i) {
            let blockingVolumeElement = this.blockingVolumeElements[i];
            this.allLv.push(blockingVolumeElement.Lv);
            if (!blockingVolumeElement.TriggerGuid)
                continue;
            let trigger = await GameObject.asyncFindGameObjectById(blockingVolumeElement.TriggerGuid);
            if (trigger) {
                this.allTriggers.push(trigger);
                // if (this.currentLv < blockingVolumeElement.Lv) {
                trigger.onEnter.add(this.onEnterTrigger.bind(this, blockingVolumeElement.Lv, i));
                // } else {
                //     trigger.destroy();
                //     this.allTriggers[i] = null;
                // }
            }
            let blockingVolume = await GameObject.asyncFindGameObjectById(blockingVolumeElement.BlockingVolumeGuid);
            if (blockingVolume) {
                this.allBlockingVolumes.push(blockingVolume);
                if (this.currentLv >= blockingVolumeElement.Lv) {
                    blockingVolume.addPassableTarget(this.localPlayer.character);
                    // blockingVolume.destroy();
                    this.allBlockingVolumes[i] = null;
                }
                else {
                    blockingVolume.removePassableTarget(this.localPlayer.character);
                }
            }
            let levelPanel = mw.UIService.create(LevelPanel_Generate$1);
            let levelPanelWidget = await GameObject.asyncFindGameObjectById(blockingVolumeElement.WorldUIGuid);
            if (levelPanelWidget) {
                levelPanelWidget.setTargetUIWidget(levelPanel.uiWidgetBase);
                levelPanelWidget.widgetSpace = mw.WidgetSpaceMode.World;
                this.allLevelPanels.push(levelPanel);
                if (this.data.cleareds.includes(blockingVolumeElement.ID)) {
                    levelPanel.mTextBlock.text = "第" + (i + 1) + "已通关";
                }
                else {
                    if (this.currentLv >= blockingVolumeElement.Lv) {
                        levelPanel.mTextBlock.text = "第" + (i + 1) + "关已解锁";
                    }
                    else {
                        levelPanel.mTextBlock.text = blockingVolumeElement.Lv + "级解锁";
                    }
                }
            }
            Console.error("[hkz] - i = " + i);
        }
    }
    onEnterTrigger(lv, i, character) {
        if (character != Player.localPlayer.character)
            return;
        if (this.currentLv >= lv) {
            this.localPlayer.character.worldTransform.position = (this.levelLoc[i]);
        }
        else {
            FlyText.instance.showFlyText("等级不足", this.localPlayer.character.worldTransform.position);
        }
    }
    updateBlockingVolume() {
        for (let i = 0; i < this.allLv.length; ++i) {
            if (!this.allBlockingVolumes[i])
                continue;
            if (this.currentLv >= this.allLv[i]) {
                this.allBlockingVolumes[i].addPassableTarget(this.localPlayer.character);
                // this.allBlockingVolumes[i].destroy();
                this.allBlockingVolumes[i] = null;
                // this.allTriggers[i].onEnter.remove(this.onEnterTrigger.bind(this));
                // this.allTriggers[i].destroy();
                // this.allTriggers[i] = null;
                this.allLevelPanels[i].mTextBlock.text = "第" + (i + 1) + "关已解锁";
            }
        }
    }
    updateLevelPanel(id) {
        if (this.data.cleareds.includes(id))
            return;
        this.allLevelPanels[id - 1].mTextBlock.text = "第" + id + "关已通关";
        this.saveCleared(id);
    }
    saveCleared(cleared) {
        this.server.net_saveCleared(cleared);
    }
}
class PlayerModuleS extends ModuleS {
    onStart() {
    }
    net_saveCleared(cleared) {
        this.currentData.saveCleared(cleared);
    }
}
__decorate([
    Decorator.noReply()
], PlayerModuleS.prototype, "net_saveCleared", null);

var foreign87 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    PlayerLevelData: PlayerLevelData,
    PlayerModuleC: PlayerModuleC,
    PlayerModuleS: PlayerModuleS
});

let RotaryKnifeTrigger = class RotaryKnifeTrigger extends mw.Script {
    constructor() {
        super(...arguments);
        this.backImpulse = 1000;
        this.upImpulse = 1000;
        this.reborn = 5;
        this.tombstonePosZ = 110;
        /**墓碑的预制体的Guid */
        this.tombstoneGuid = "110950";
        /** 当预加载资源改动的时候自动调用此函数 */
        // public async onPreloadAssetsChangedInEditor() {
        //     for (let key in KnifeRescourse) {
        //         let keyToAny: any = key;
        //         if (isNaN(keyToAny)) {
        //             let knifeRescourse: any = KnifeRescourse[key];
        //             let knifeRescourseEnum: KnifeRescourse = knifeRescourse;
        //             await Utils.downloadAsset(knifeRescourseEnum);
        //         }
        //     }
        // }
        /**------------------------------------------- 客户端 ------------------------------------------------ */
        /**触发器 */
        this.triggers = [];
        /**当前客户端玩家 */
        this.player = null;
        this.rotaryKnifeTrigger = null;
        this.rotaryKnifeTriggerLen = 0;
        /**------------------------------------------- 客户端 ------------------------------------------------ */
        /**------------------------------------------- 服务端 ------------------------------------------------ */
        this.playerMapS = new Map();
        this.animationIdMapS = new Map();
        this.playerEffectMapId = new Map();
        /**资源下载 */
        // public async downloadRes(guid: string): Promise<boolean> {
        //     if (mw.AssetUtil.assetLoaded(guid)) {
        //         return true;
        //     }
        //     return await mw.AssetUtil.asyncDownloadAsset(guid);
        // }
        /**------------------------------------------- 通用 ------------------------------------------------ */
    }
    /** 当脚本被实例后，会在第一帧更新前调用此函数 */
    async onStart() {
        // await this.onPreloadAssetsChangedInEditor();
        if (mw.SystemUtil.isClient()) {
            this.initDataC();
            this.bindTriggerC();
            this.registerEventsC();
            this.useUpdate = false;
        }
        if (mw.SystemUtil.isServer()) {
            this.registerEventsS();
            this.initDataS();
            this.useUpdate = true;
        }
    }
    /**初始化数据(客户端) */
    async initDataC() {
        this.player = await Player.asyncGetLocalPlayer();
    }
    /**绑定触发器(客户端) */
    async bindTriggerC() {
        this.rotaryKnifeTrigger = GameConfig.RotaryKnifeTrigger;
        this.rotaryKnifeTriggerLen = this.rotaryKnifeTrigger.getAllElement().length;
        if (this.rotaryKnifeTriggerLen == 0)
            return;
        for (let i = 0; i < this.rotaryKnifeTriggerLen; ++i) {
            let trigger = (await GameObject.asyncFindGameObjectById(this.rotaryKnifeTrigger.getElement(i + 1).TriggerGuid));
            trigger.onEnter.add((char) => {
                this.onEnterTriggerC(char);
            });
        }
    }
    /**注册事件（客户端） */
    registerEventsC() {
    }
    /**进入触发器(客户端) */
    onEnterTriggerC(char) {
        if (char != Player.localPlayer.character)
            return;
        Console.error("[起飞喽]");
        Event.dispatchToLocal("dianji", 1);
        Event.dispatchToServer(ListenerEventsType$3.ClientToServer);
    }
    /**客户端的Update */
    onUpdateC(dt) {
        // this.isTouchDownS(this.player);
    }
    /**初始化数据 */
    initDataS() {
    }
    /**注册事件（服务端） */
    registerEventsS() {
        Event.addClientListener(ListenerEventsType$3.ClientToServer, this.takeOffS.bind(this));
        Player.onPlayerLeave.add((player) => {
            let playerId = player.playerId;
            if (this.playerMapS.has(playerId)) {
                this.playerMapS.delete(playerId);
            }
        });
    }
    /**开始起飞（服务端） */
    takeOffS(player) {
        let lookUp = player.character.worldTransform.getUpVector();
        lookUp = lookUp.multiply(this.upImpulse);
        let lookForward = player.character.worldTransform.getForwardVector();
        lookForward = lookForward.multiply(-this.backImpulse);
        let lookBack = new mw.Vector(lookForward.x + lookUp.x, lookForward.y + lookUp.y, lookForward.z + lookUp.z);
        Console.error("[lookBack--]" + lookBack);
        player.character.addImpulse(lookBack, true);
        mw.SoundService.play3DSound(KnifeRescourse.Knife, player.character.worldTransform.position, 1, 1);
        let playerId = player.playerId;
        let animationId = null;
        if (this.animationIdMapS.has(playerId)) {
            animationId = this.animationIdMapS.get(playerId);
            if (animationId) {
                animationId.stop();
            }
        }
        animationId = PlayerManagerExtesion.rpcPlayAnimation(player.character, KnifeRescourse.LieDown, 0, 1);
        this.animationIdMapS.set(player.playerId, animationId);
        if (this.playerEffectMapId.has(playerId)) {
            let effectId = this.playerEffectMapId.get(playerId);
            if (effectId) {
                EffectService.stop(effectId);
            }
        }
        let playerEffectId = GeneralManager.rpcPlayEffectOnPlayer(KnifeRescourse.TailEffect, player, mw.HumanoidSlotType.Root, 0, new mw.Vector(0, 0, 0), mw.Rotation.zero, new mw.Vector(2, 2, 2));
        this.playerEffectMapId.set(playerId, playerEffectId);
        setTimeout(() => {
            this.playerMapS.set(playerId, player);
        }, 500);
    }
    /**服务端的Update */
    onUpdateS(dt) {
        if (this.playerMapS.size > 0) {
            this.playerMapS.forEach((v) => {
                this.isTouchDownS(v);
            });
        }
    }
    /**判断玩家是否落地（服务端） */
    isTouchDownS(player) {
        if (player.character.isJumping)
            return;
        this.playerMapS.delete(player.playerId);
        let p = player;
        this.dieS(p);
    }
    /**玩家死亡（服务端） */
    dieS(player) {
        Console.error("[Die]--" + player.playerId);
        mw.SoundService.play3DSound(KnifeRescourse.Die, player.character.worldTransform.position, 1, 1);
        let playerId = player.playerId;
        if (this.animationIdMapS.has(playerId)) {
            let animationId = this.animationIdMapS.get(playerId);
            if (animationId) {
                animationId.stop();
                this.animationIdMapS.set(playerId, null);
            }
        }
        if (this.playerEffectMapId.has(playerId)) {
            let effectId = this.playerEffectMapId.get(playerId);
            if (effectId) {
                EffectService.stop(effectId);
                this.playerEffectMapId.set(playerId, null);
            }
        }
        player.character.ragdollEnabled = true;
        this.spawnTombstoneS(player);
    }
    /**生成墓碑（服务端） */
    spawnTombstoneS(player) {
        let tombstone = null;
        if (this.tombstoneGuid) {
            tombstone = SpawnManager.wornSpawn(this.tombstoneGuid);
            let pos = player.character.worldTransform.position;
            tombstone.worldTransform.position = (new mw.Vector(pos.x, pos.y, pos.z - this.tombstonePosZ));
        }
        setTimeout(() => {
            player.character.ragdollEnabled = false;
            if (this.tombstoneGuid) {
                tombstone.destroy();
            }
        }, this.reborn * 1000);
    }
    /**------------------------------------------- 服务端 ------------------------------------------------ */
    /**------------------------------------------- 通用 ------------------------------------------------ */
    onUpdate(dt) {
        if (mw.SystemUtil.isClient()) {
            this.onUpdateC(dt);
        }
        if (mw.SystemUtil.isServer()) {
            this.onUpdateS(dt);
        }
    }
};
__decorate([
    mw.Property({ displayName: "向后的冲量", group: "属性" })
], RotaryKnifeTrigger.prototype, "backImpulse", void 0);
__decorate([
    mw.Property({ displayName: "向上的冲量", group: "属性" })
], RotaryKnifeTrigger.prototype, "upImpulse", void 0);
__decorate([
    mw.Property({ displayName: "重生时间（s）", group: "属性" })
], RotaryKnifeTrigger.prototype, "reborn", void 0);
__decorate([
    mw.Property({ displayName: "墓碑的生成位置偏移", group: "属性" })
], RotaryKnifeTrigger.prototype, "tombstonePosZ", void 0);
RotaryKnifeTrigger = __decorate([
    Component
], RotaryKnifeTrigger);
var RotaryKnifeTrigger$1 = RotaryKnifeTrigger;
/**客户端&服务端发送的事件类型 */
var ListenerEventsType$3;
(function (ListenerEventsType) {
    /**客户端发给服务端 */
    ListenerEventsType["ClientToServer"] = "ClientToServer_Knife";
})(ListenerEventsType$3 || (ListenerEventsType$3 = {}));
/**优先加载资源 */
var KnifeRescourse;
(function (KnifeRescourse) {
    /**落地摔死叫 */
    KnifeRescourse["Die"] = "115263";
    /**闸刀触发 */
    KnifeRescourse["Knife"] = "19608";
    /**躺下耍赖 */
    KnifeRescourse["LieDown"] = "14562";
    /**拖尾特效 */
    KnifeRescourse["TailEffect"] = "27392";
    /**墓碑Guid */
    KnifeRescourse["TombstoneGuid"] = "110950";
})(KnifeRescourse || (KnifeRescourse = {}));

var foreign100 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    get KnifeRescourse () { return KnifeRescourse; },
    get ListenerEventsType () { return ListenerEventsType$3; },
    default: RotaryKnifeTrigger$1
});

/*
 * @Author: 侯凯召
 * @QQ邮箱: 3046916186@qq.com
 * @Date: 2023-01-17 09:53:58
 * @LastEditors: 穿迷彩服的鲨鱼
 * @LastEditTime: 2023-01-29 16:11:32
 * @Description: 可发射飞行交互物预制体
 * @FilePath: \Demo\JavaScripts\prefab\PlayerLauncher\PlayerLauncher.ts
 */
let PlayerLauncher = class PlayerLauncher extends mw.Script {
    constructor() {
        super(...arguments);
        this.reborn = 5;
        this.impulse = 2000;
        this.tombstonePosZ = 110;
        /**墓碑的预制体的Guid */
        this.tombstoneGuid = "110950";
        this.playerLauncher = null;
        this.playerLauncherLen = 0;
        /** 当预加载资源改动的时候自动调用此函数 */
        // public async onPreloadAssetsChangedInEditor() {
        //     for (let key in LauncherRescourse) {
        //         let keyToAny: any = key;
        //         if (isNaN(keyToAny)) {
        //             let launcherRescourse: any = LauncherRescourse[key];
        //             let launcherRescourseEnum: LauncherRescourse = launcherRescourse;
        //             await Utils.downloadAsset(launcherRescourseEnum);
        //         }
        //     }
        // }
        /**------------------------------------------- 客户端 ------------------------------------------------ */
        this.player = null;
        /**------------------------------------------- 客户端 ------------------------------------------------ */
        /**------------------------------------------- 服务端 ------------------------------------------------ */
        /**需要变化的模型 */
        this.barrelModels = [];
        /**交互物 */
        this.interactivitys = [];
        /**当前需要发射的玩家 */
        this.curPlayers = [];
        /**发射方向(每个交互物对应一个发射方向 */
        this.fireDirections = [];
        this.curPlayersMap = new Map();
        this.playerMapS = new Map();
        this.animationIdMapS = new Map();
        this.preAnimationIdMapS = new Map();
        this.playerEffectMapId = new Map();
        /**资源下载 */
        // public async downloadRes(guid: string): Promise<boolean> {
        //     if (mw.AssetUtil.assetLoaded(guid)) {
        //         return true;
        //     }
        //     return await mw.AssetUtil.asyncDownloadAsset(guid);
        // }
    }
    /** 当脚本被实例后，会在第一帧更新前调用此函数 */
    async onStart() {
        // await this.onPreloadAssetsChangedInEditor();
        this.playerLauncher = GameConfig.PlayerLauncher;
        this.playerLauncherLen = this.playerLauncher.getAllElement().length;
        if (mw.SystemUtil.isClient()) {
            this.initDataC();
            this.bindTriggerC();
            this.useUpdate = false;
        }
        if (mw.SystemUtil.isServer()) {
            this.initDataS();
            this.registerEventsS();
            this.useUpdate = true;
        }
    }
    /**初始化数据（客户端） */
    async initDataC() {
        this.player = await Player.asyncGetLocalPlayer();
    }
    /**绑定触发器（客户端） */
    async bindTriggerC() {
        if (this.playerLauncherLen == 0)
            return;
        for (let i = 0; i < this.playerLauncherLen; ++i) {
            let trigger = (await GameObject.asyncFindGameObjectById(this.playerLauncher.getElement(i + 1).TriggerGuid));
            trigger.onEnter.add((char) => {
                this.onEnterTriggerC(char, i);
            });
        }
    }
    /**进入触发器(客户端) */
    onEnterTriggerC(char, triggerIndex) {
        if (char != Player.localPlayer.character)
            return;
        this.igniteC(triggerIndex);
    }
    /**点火（客户端） */
    igniteC(triggerIndex) {
        Event.dispatchToLocal("dianji", 1);
        Event.dispatchToServer(ListenerEventsType$2.ClientToServer, triggerIndex);
    }
    /**初始化数据（服务端） */
    async initDataS() {
        this.findGameObjectsS();
    }
    /**根据object的guid find到它（服务端） */
    async findGameObjectsS() {
        if (this.playerLauncherLen > 0) {
            for (let i = 0; i < this.playerLauncherLen; ++i) {
                let playerLauncherElement = this.playerLauncher.getElement(i + 1);
                let barrelModel = await GameObject.asyncFindGameObjectById(playerLauncherElement.ModelGuid);
                barrelModel.setCollision(mw.PropertyStatus.Off);
                this.barrelModels.push(barrelModel);
                let fireDirection = barrelModel.worldTransform.getForwardVector();
                this.fireDirections.push(fireDirection);
                let interactivity = await GameObject.asyncFindGameObjectById(playerLauncherElement.InteractivityGuid);
                this.interactivitys.push(interactivity);
            }
        }
    }
    /**注册事件&监听事件（服务端） */
    registerEventsS() {
        Event.addClientListener(ListenerEventsType$2.ClientToServer, this.igniteS.bind(this));
        Player.onPlayerLeave.add((player) => {
            let playerId = player.playerId;
            if (this.curPlayersMap.has(playerId)) {
                this.curPlayers[this.curPlayersMap.get(playerId)] = null;
                this.curPlayersMap.delete(playerId);
            }
            if (this.playerMapS.has(playerId)) {
                this.playerMapS.delete(playerId);
            }
        });
    }
    /**点火（服务端） */
    async igniteS(player, triggerIndex) {
        Console.error("[player--] " + player.playerId + " -- " + triggerIndex);
        if (this.curPlayers[triggerIndex])
            return;
        this.curPlayers[triggerIndex] = player;
        this.curPlayersMap.set(player.playerId, triggerIndex);
        let isEnterSucceed = await this.interactivitys[triggerIndex].enter(this.curPlayers[triggerIndex].character);
        if (!isEnterSucceed)
            return;
        this.interactivitys[triggerIndex].localTransform.position = (new mw.Vector(250, 0, 0));
        new mw.Tween({ x: 250, z: 0 }).to({ x: 115, z: 230 }, 0.5 * 1000).onUpdate((v) => {
            this.interactivitys[triggerIndex].localTransform.position = (new mw.Vector(v.x, 0, v.z));
        }).start().onComplete(() => {
            let playerId = this.curPlayers[triggerIndex].playerId;
            this.playerAnimationS(playerId, this.preAnimationIdMapS, LauncherRescourse.LieDown);
            this.preLaunch(triggerIndex);
        });
    }
    /**预备发射（服务端） */
    preLaunch(triggerIndex) {
        let soundId = mw.SoundService.play3DSound(LauncherRescourse.StoragePowerSound, this.barrelModels[triggerIndex].worldTransform.position, 1, 1);
        GeneralManager.rpcPlayEffectOnGameObject(LauncherRescourse.StoragePowerEffect, this.barrelModels[triggerIndex], 1, new mw.Vector(250, 0, 0), new mw.Rotation(180, 85, 180), new mw.Vector(0.5, 0.5, 0.5));
        new mw.Tween({ x: 1.5, }).to({ x: 1, }, 0.6 * 1000).onUpdate((v) => {
            this.barrelModels[triggerIndex].localTransform.scale = (new mw.Vector(v.x, 1.5, 1.5));
        }).start().onComplete(() => {
            new mw.Tween({ x: 1, }).to({ x: 1.5, }, 0.3 * 1000).onUpdate((v) => {
                this.barrelModels[triggerIndex].localTransform.scale = (new mw.Vector(v.x, 1.5, 1.5));
            }).start().onComplete(() => {
                mw.SoundService.stop3DSound(soundId);
                if (!this.curPlayers[triggerIndex])
                    return;
                let playerId = this.curPlayers[triggerIndex].playerId;
                this.stopAnimationS(playerId, this.preAnimationIdMapS);
                this.startLaunch(triggerIndex);
            });
        });
    }
    /**开始发射（服务端） */
    async startLaunch(triggerIndex) {
        let isExitSuceed = await GeneralManager.modifyExitInteractiveState(this.interactivitys[triggerIndex], this.curPlayers[triggerIndex].character.worldTransform.position);
        if (!isExitSuceed)
            return;
        let lookForwardAndUp = new mw.Vector(this.fireDirections[triggerIndex].x, this.fireDirections[triggerIndex].y, this.fireDirections[triggerIndex].z);
        let lookForward = lookForwardAndUp.multiply(this.impulse);
        Console.error("[lookForward--]" + lookForward);
        this.curPlayers[triggerIndex].character.addImpulse(lookForward, true);
        mw.SoundService.play3DSound(LauncherRescourse.LauncherSound, this.barrelModels[triggerIndex].worldTransform.position, 1, 1);
        let playerId = this.curPlayers[triggerIndex].playerId;
        this.playerAnimationS(playerId, this.animationIdMapS, LauncherRescourse.LauncheringAnimation);
        this.playEffectS(playerId, this.playerEffectMapId, LauncherRescourse.TailEffect, new mw.Vector(0, 0, 0), mw.Rotation.zero, new mw.Vector(2, 2, 2));
        this.playerMapS.set(playerId, this.curPlayers[triggerIndex]);
        this.curPlayers[triggerIndex] = null;
        if (this.curPlayersMap.has(playerId)) {
            this.curPlayersMap.delete(playerId);
        }
    }
    /**服务端的Update */
    onUpdateS(dt) {
        if (this.playerMapS.size > 0) {
            this.playerMapS.forEach((v) => {
                this.isTouchDownS(v);
            });
        }
    }
    /**判断玩家是否落地（服务端） */
    isTouchDownS(player) {
        if (player.character.isJumping)
            return;
        this.playerMapS.delete(player.playerId);
        let p = player;
        this.dieS(p);
    }
    /**玩家死亡（服务端） */
    dieS(player) {
        Console.error("[Die]--" + player.playerId);
        mw.SoundService.play3DSound(LauncherRescourse.Die, player.character.worldTransform.position, 1, 1);
        let playerId = player.playerId;
        this.stopAnimationS(playerId, this.animationIdMapS);
        this.stopEffectS(playerId, this.playerEffectMapId);
        player.character.ragdollEnabled = true;
        this.spawnTombstoneS(player);
    }
    /**生成墓碑（服务端） */
    spawnTombstoneS(player) {
        let tombstone = null;
        if (this.tombstoneGuid) {
            tombstone = SpawnManager.wornSpawn(this.tombstoneGuid);
            let pos = player.character.worldTransform.position;
            tombstone.worldTransform.position = (new mw.Vector(pos.x, pos.y, pos.z - this.tombstonePosZ));
        }
        setTimeout(() => {
            player.character.ragdollEnabled = false;
            if (this.tombstoneGuid) {
                tombstone.destroy();
            }
        }, this.reborn * 1000);
    }
    /**播放动画（服务端） */
    playerAnimationS(playerId, animationMap, clip) {
        let player = Player.getPlayer(playerId);
        let animationId = null;
        if (animationMap.has(playerId)) {
            animationId = animationMap.get(playerId);
            if (animationId) {
                animationId.stop();
            }
        }
        animationId = PlayerManagerExtesion.rpcPlayAnimation(player.character, clip, 0, 1);
        animationMap.set(playerId, animationId);
    }
    /**停止播放动画（服务端） */
    stopAnimationS(playerId, animationMap) {
        if (animationMap.has(playerId)) {
            let animationId = animationMap.get(playerId);
            if (animationId) {
                animationId.stop();
                animationMap.set(playerId, null);
            }
        }
    }
    /**播放特效（服务端） */
    playEffectS(playerId, effectMap, effect, offset, rotation, scale) {
        let player = Player.getPlayer(playerId);
        if (effectMap.has(playerId)) {
            let effectId = effectMap.get(playerId);
            if (effectId) {
                EffectService.stop(effectId);
            }
        }
        let playerEffectId = GeneralManager.rpcPlayEffectOnPlayer(effect, player, mw.HumanoidSlotType.Root, 0, new mw.Vector(0, 0, 0), mw.Rotation.zero, new mw.Vector(2, 2, 2));
        effectMap.set(playerId, playerEffectId);
    }
    /**停止播放特效（服务端） */
    stopEffectS(playerId, effectMap) {
        if (effectMap.has(playerId)) {
            let effectId = effectMap.get(playerId);
            if (effectId) {
                EffectService.stop(effectId);
                effectMap.set(playerId, null);
            }
        }
    }
    /**------------------------------------------- 服务端 ------------------------------------------------ */
    /**------------------------------------------- 通用 ------------------------------------------------ */
    /**
     * 周期函数 每帧执行
     * 此函数执行需要将this.useUpdate赋值为true
     * @param dt 当前帧与上一帧的延迟 / 秒
     */
    onUpdate(dt) {
        if (mw.SystemUtil.isClient()) ;
        if (mw.SystemUtil.isServer()) {
            this.onUpdateS(dt);
        }
    }
};
__decorate([
    mw.Property({ displayName: "重生时间（s）", group: "脚本属性" })
], PlayerLauncher.prototype, "reborn", void 0);
__decorate([
    mw.Property({ displayName: "冲量大小", group: "脚本属性" })
], PlayerLauncher.prototype, "impulse", void 0);
__decorate([
    mw.Property({ displayName: "墓碑的生成位置偏移", group: "脚本属性" })
], PlayerLauncher.prototype, "tombstonePosZ", void 0);
PlayerLauncher = __decorate([
    Component
], PlayerLauncher);
var PlayerLauncher$1 = PlayerLauncher;
var LauncherRescourse;
(function (LauncherRescourse) {
    /**发射中动画 */
    LauncherRescourse["LauncheringAnimation"] = "122289";
    /**蓄力音效 */
    LauncherRescourse["StoragePowerSound"] = "129650";
    /**发射音效 */
    LauncherRescourse["LauncherSound"] = "20589";
    /**蓄力特效 */
    LauncherRescourse["StoragePowerEffect"] = "197884";
    /**拖尾特效 */
    LauncherRescourse["TailEffect"] = "27392";
    /**落地摔死叫音效 */
    LauncherRescourse["Die"] = "115263";
    /**躺下动画 */
    LauncherRescourse["LieDown"] = "14503";
    /**墓碑 */
    LauncherRescourse["TombstoneGuid"] = "110950";
})(LauncherRescourse || (LauncherRescourse = {}));
/**客户端&服务端发送的事件类型 */
var ListenerEventsType$2;
(function (ListenerEventsType) {
    /**客户端发给服务端 */
    ListenerEventsType["ClientToServer"] = "ClientToServer_Lanuncher";
})(ListenerEventsType$2 || (ListenerEventsType$2 = {}));

var foreign101 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    get LauncherRescourse () { return LauncherRescourse; },
    get ListenerEventsType () { return ListenerEventsType$2; },
    default: PlayerLauncher$1
});

/*
 * @Author: 侯凯召
 * @QQ邮箱: 3046916186@qq.com
 * @Date: 2023-01-29 16:42:08
 * @LastEditors: 穿迷彩服的鲨鱼
 * @LastEditTime: 2023-02-03 11:50:19
 * @Description: 蹦床
 * @FilePath: \Demo\JavaScripts\prefab\Trampoline\Trampoline.ts
 */
let Trampoline = class Trampoline extends mw.Script {
    constructor() {
        super(...arguments);
        this.baseFallMultiplyNum = 2000;
        this.baseMultiplyNum = 300;
        this.impactRadius = 100;
        this.trampoline = null;
        this.trampolineLen = 0;
        /**冲击时要显示的UI */
        this.impactUI = "6A16F210463EEA916B51EC9E36852260";
        /** 当预加载资源改动的时候自动调用此函数 */
        // public onPreloadAssetsChangedInEditor() {
        //     for (let key in TrampolineRescourse) {
        //         let keyToAny: any = key;
        //         if (isNaN(keyToAny)) {
        //             let trampolineRescourse: any = TrampolineRescourse[key];
        //             let trampolineRescourseEnum: TrampolineRescourse = trampolineRescourse;
        //             Utils.downloadAsset(trampolineRescourseEnum);
        //         }
        //     }
        // }
        /**------------------------------------------- 客户端 ------------------------------------------------ */
        this.playerC = null;
        /**需要变化的模型 */
        this.trampolineModelsC = [];
        this.ignoreAreaC = [];
        this.capsuleRadius = 30;
        /**玩家世界UIMap */
        this.playersRadiusUI = new Map();
        /**------------------------------------------- 客户端 ------------------------------------------------ */
        /**------------------------------------------- 服务端 ------------------------------------------------ */
        /**延迟触发（避免重复执行） */
        this.cantEnterPlayerIdS = new Set();
        /**触发器 */
        this.triggersS = [];
        /**玩家跳跃时间 */
        this.playersJumpTimeS = new Map();
        /**计算玩家是否触地面 */
        this.playerFlyAndFallMap = new Map();
        /**飞行玩家的掉落特效 */
        this.playerFallEffects = new Map();
        /**悬空玩家的拖尾特效 */
        this.playerTailEffectMap = new Map();
        this.playersImpactRadius = new Map();
        this.ignoreAreaS = [];
        /**资源下载 */
        // public async downloadRes(guid: string): Promise<boolean> {
        //     if (mw.AssetUtil.assetLoaded(guid)) {
        //         return true;
        //     }
        //     return await mw.AssetUtil.asyncDownloadAsset(guid);
        // }
    }
    /** 当脚本被实例后，会在第一帧更新前调用此函数 */
    async onStart() {
        // await this.onPreloadAssetsChangedInEditor();
        this.trampoline = GameConfig.Trampoline;
        this.trampolineLen = this.trampoline.getAllElement().length;
        if (mw.SystemUtil.isClient()) {
            this.onStartC();
        }
        if (mw.SystemUtil.isServer()) {
            this.onStartS();
        }
    }
    /**
     * 周期函数 每帧执行
     * 此函数执行需要将this.useUpdate赋值为true
     * @param dt 当前帧与上一帧的延迟 / 秒
     */
    onUpdate(dt) {
        if (mw.SystemUtil.isClient()) {
            this.onUpdateC(dt);
        }
        if (mw.SystemUtil.isServer()) {
            this.onUpdateS(dt);
        }
    }
    /**客户端的onStart */
    onStartC() {
        this.initDataC();
        this.registerEventsC();
        this.useUpdate = true;
    }
    /**初始化数据（客户端） */
    async initDataC() {
        // this.loadRescourseC();
        this.findGameObjectsC();
        this.playerC = await Player.asyncGetLocalPlayer();
        this.playerC.character.driftControl = 0.5;
        Console.error("[更新下落控制成功]");
    }
    /**加载资源（客户端） */
    // private async loadRescourseC(): Promise<void> {
    //     for (let key in TrampolineRescourse) {
    //         let keyToAny: any = key;
    //         if (isNaN(keyToAny)) {
    //             let launcherRescourse: any = TrampolineRescourse[key];
    //             let launcherRescourseEnum: TrampolineRescourse = launcherRescourse;
    //             await this.downloadRes(launcherRescourseEnum);
    //             Console.error("launcherRescourseEnum--" + launcherRescourseEnum);
    //         }
    //     }
    // }
    /**根据object的guid find到它（客户端） */
    async findGameObjectsC() {
        if (this.trampolineLen > 0) {
            for (let i = 0; i < this.trampolineLen; ++i) {
                let trampolineModel = await GameObject.asyncFindGameObjectById(this.trampoline.getElement(i + 1).ModelGuid);
                this.trampolineModelsC.push(trampolineModel);
                this.createShakeOBBC(trampolineModel, i);
            }
        }
    }
    /**创建蹦床中间区域判定(客户端) */
    createShakeOBBC(trampolineModel, index) {
        let PointX = trampolineModel.worldTransform.scale.x * 100 + this.capsuleRadius;
        let PointY = trampolineModel.worldTransform.scale.y / 1.5 * 100 + this.capsuleRadius;
        let center = new mw.Vector2(trampolineModel.worldTransform.position.x, trampolineModel.worldTransform.position.y);
        this.ignoreAreaC[index] = new OBB(center, trampolineModel.worldTransform.getForwardVector(), trampolineModel.worldTransform.getRightVector(), PointX, PointY);
    }
    /**注册事件&监听事件（客户端） */
    registerEventsC() {
        Event.addServerListener(ListenerEventsType$1.ServerToAllClient_Shake, this.modelShakeVFXAndSFXC.bind(this));
        Event.addServerListener(ListenerEventsType$1.ServerToAllClient_ShowRadiusUI, this.showRadiusUIC.bind(this));
        Event.addServerListener(ListenerEventsType$1.ServerToAllClient_HideRadiusUI, this.hideRadiusUIC.bind(this));
    }
    /**客户端的Update */
    onUpdateC(dt) {
        try {
            this.playersRadiusUI.forEach((value, key) => {
                let player = Player.getPlayer(key);
                if (!player || !player.character || player.character.velocity.z >= 0)
                    return;
                this.lineTraceCheck(player, value);
            });
        }
        catch (error) {
        }
    }
    /**射线检测更新世界UI位置(客户端) */
    lineTraceCheck(player, radiusUI) {
        const downVec = player.character.worldTransform.getUpVector().clone().multiply(-1);
        const loc = player.character.worldTransform.position;
        const goArr = QueryUtil.lineTrace(loc, loc.clone().add(downVec.multiply(500000)), true, false);
        for (let index = 0; index < goArr.length; index++) {
            const element = goArr[index];
            // Console.error("[element]:" + element.gameObject.name);
            if ((PlayerManagerExtesion.isCharacter(element.gameObject)))
                continue;
            if (element.gameObject.name == "BP_MWSysUIWidget")
                continue;
            if (element.gameObject.name == "世界UI")
                continue;
            if (element.gameObject.name == "蹦床") {
                if (radiusUI.getVisibility())
                    radiusUI.setVisibility(mw.PropertyStatus.Off);
                return;
            }
            if (!radiusUI.getVisibility())
                radiusUI.setVisibility(mw.PropertyStatus.On);
            radiusUI.worldTransform.position = element.position.clone().add(mw.Vector.up.multiply(10));
            return;
        }
    }
    /**模型震动时的视觉和听觉效果（客户端） */
    modelShakeVFXAndSFXC(playerId, triggerIndex) {
        this.playSoundAndEffectC(playerId, triggerIndex);
        this.modelShakeC(triggerIndex);
    }
    /**播放音效和特效（客户端） */
    playSoundAndEffectC(playerId, triggerIndex) {
        if (this.playerC.playerId == playerId) {
            mw.SoundService.playSound(TrampolineRescourse.TrampolineSound, 1, 100);
        }
        else {
            mw.SoundService.play3DSound(TrampolineRescourse.TrampolineSound, this.trampolineModelsC[triggerIndex].worldTransform.position, 1, 100);
        }
    }
    /**玩家进入触发器震动模型（客户端） */
    modelShakeC(triggerIndex) {
        let baseScale = this.trampolineModelsC[triggerIndex].worldTransform.scale;
        let curPlayerPos = this.playerC.character.worldTransform.position;
        let playerLoc2 = new mw.Vector2(curPlayerPos.x, curPlayerPos.y);
        if (this.ignoreAreaC[triggerIndex].containsPoint(playerLoc2)) {
            new mw.Tween({ time: 0 })
                .to({ time: 1 }, 1000)
                .onUpdate((obj) => {
                let z = this.shakeFunc(obj.time, 100, 6, 5) * 8;
                let worldScale = new mw.Vector(baseScale.x, baseScale.y, baseScale.z + z);
                this.trampolineModelsC[triggerIndex].worldTransform.scale = worldScale;
            })
                .start();
        }
        else {
            let curTrampolinePos = this.trampolineModelsC[triggerIndex];
            let modelLoc2 = new mw.Vector2(curTrampolinePos.worldTransform.position.x, curTrampolinePos.worldTransform.position.y);
            let loc = modelLoc2.subtract(playerLoc2);
            loc = loc.normalized;
            let changeRot = new mw.Rotation(new mw.Vector(loc.x, loc.y, 0));
            new mw.Tween({ time: 0 })
                .to({ time: 1 }, 1000)
                .onUpdate((obj) => {
                let x = this.shakeFunc(obj.time, 100, 6, 5) * 100 * changeRot.y;
                let y = this.shakeFunc(obj.time, 100, 6, 5) * 100 * changeRot.x;
                let rot = new mw.Rotation(x, y, changeRot.z);
                this.trampolineModelsC[triggerIndex].localTransform.rotation = (rot);
            })
                .start();
        }
    }
    /**显示冲击指示范围UI（客户端） */
    showRadiusUIC(playerId, number) {
        if (!this.playersRadiusUI.has(playerId))
            this.createRadiusUIC(playerId);
        let radiusUI = this.playersRadiusUI.get(playerId);
        radiusUI.worldTransform.scale = mw.Vector.one.multiply(number * 2 / 100);
        radiusUI.setVisibility(mw.PropertyStatus.Off);
    }
    /**Create世界UI并刷新（客户端） */
    createRadiusUIC(playerId) {
        let uiWidget = SpawnManager.modifyPoolSpawn("UIWidget");
        uiWidget.setUIbyID(this.impactUI);
        uiWidget.pivot = mw.Vector2.one.multiply(0.5);
        uiWidget.drawSize = mw.Vector2.one.multiply(100);
        uiWidget.localTransform.rotation = (new mw.Rotation(0, 90, 0));
        uiWidget.widgetSpace = mw.WidgetSpaceMode.World;
        uiWidget.setCollision(mw.PropertyStatus.Off);
        uiWidget.refresh();
        this.playersRadiusUI.set(playerId, uiWidget);
    }
    /**隐藏玩家身上的世界UI（客户端） */
    hideRadiusUIC(playerId) {
        let radiusUI = this.playersRadiusUI.get(playerId);
        if (!radiusUI)
            return;
        mwext.GameObjPool.despawn(radiusUI);
        this.playersRadiusUI.delete(playerId);
    }
    /**服务端的onStart */
    onStartS() {
        this.initDataS();
        this.registerEventsS();
        this.useUpdate = true;
    }
    /**初始化数据（服务端） */
    async initDataS() {
        await this.findGameObjectsS();
        this.bindTriggerS();
    }
    /**注册事件&监听事件（服务端） */
    registerEventsS() {
        Player.onPlayerLeave.add((player) => {
            let playerId = player.playerId;
            if (this.playerFlyAndFallMap.has(playerId)) {
                this.playerFlyAndFallMap.delete(playerId);
            }
            if (this.playersJumpTimeS.has(playerId)) {
                this.playersJumpTimeS.delete(playerId);
            }
            if (this.playersImpactRadius.has(playerId)) {
                this.playersImpactRadius.delete(playerId);
            }
        });
    }
    /**根据object的guid find到它（服务端） */
    async findGameObjectsS() {
        if (this.trampolineLen == 0)
            return;
        for (let i = 0; i < this.trampolineLen; ++i) {
            let trigger = (await GameObject.asyncFindGameObjectById(this.trampoline.getElement(i + 1).TriggerGuid));
            this.triggersS.push(trigger);
            this.createTouchOBBS(trigger, i);
        }
    }
    /**创建蹦床中间区域判定(客户端) */
    createTouchOBBS(trigger, index) {
        let PointX = trigger.worldTransform.scale.x * 50 + this.capsuleRadius;
        let PointY = trigger.worldTransform.scale.y * 50 + this.capsuleRadius;
        let center = new mw.Vector2(trigger.worldTransform.position.x, trigger.worldTransform.position.y);
        this.ignoreAreaS[index] = new OBB(center, trigger.worldTransform.getForwardVector(), trigger.worldTransform.getRightVector(), PointX, PointY);
    }
    /**绑定触发器（服务端） */
    bindTriggerS() {
        if (this.triggersS.length == 0)
            return;
        for (let i = 0; i < this.triggersS.length; ++i) {
            this.triggersS[i].onEnter.add((go) => {
                this.onEnterTriggerS(go, i);
            });
        }
    }
    /**进入触发器(服务端) */
    onEnterTriggerS(go, triggerIndex) {
        if (!(PlayerManagerExtesion.isCharacter(go)))
            return;
        let player = go.player;
        if (player.character.movementMode == mw.MovementMode.Fly)
            return;
        let playerId = player.playerId;
        if (this.cantEnterPlayerIdS.has(playerId))
            return;
        this.cantEnterPlayerIdS.add(playerId);
        mw.TimeUtil.delayExecute(() => {
            this.cantEnterPlayerIdS.delete(playerId);
        }, 20);
        Event.dispatchToClient(player, ListenerEventsType$1.ServerToAllClient_ShowJumpRecordUI, this.triggersS[triggerIndex].worldTransform.position.z);
        this.modelVisualEffectS(playerId, triggerIndex);
        this.playerFlyS(player);
        this.showRadiusUIS(playerId);
    }
    /**广播给房间内得客户端显示正在使用蹦床玩家得落点世界UI（服务端） */
    showRadiusUIS(playerId) {
        let num = this.impactRadius + 100 * this.playersJumpTimeS.get(playerId);
        this.playersImpactRadius.set(playerId, num);
        Event.dispatchToAllClient(ListenerEventsType$1.ServerToAllClient_ShowRadiusUI, playerId, num);
    }
    /**模型视觉效果（服务端） */
    modelVisualEffectS(playerId, triggerIndex) {
        Event.dispatchToAllClient(ListenerEventsType$1.ServerToAllClient_Shake, playerId, triggerIndex);
    }
    /**玩家进入触发器玩家原地起飞（服务端） */
    playerFlyS(player) {
        let playerId = player.playerId;
        let value = this.playersJumpTimeS.get(playerId);
        value = value ? value : 0;
        this.addPlayerImpulse(player, value);
        setTimeout(() => {
            this.playerFlyAndFallMap.set(playerId, false);
        }, 500);
        this.playersJumpTimeS.set(playerId, value + 1);
    }
    /**添加向上的冲量（服务端） */
    addPlayerImpulse(player, jumpTime) {
        let multiplyNum = this.baseFallMultiplyNum + 400 * jumpTime;
        multiplyNum = Math.min(multiplyNum, 13000);
        let velocityZ = (player.character.velocity.z * 1);
        multiplyNum = multiplyNum - velocityZ;
        player.character.addImpulse(mw.Vector.up.multiply(multiplyNum), true);
        // Console.error("[jumpTime]：" + jumpTime + "\n" + "[velocityZ]：" + velocityZ + "\n" + "[multiplyNum]：" + multiplyNum);
    }
    /**服务端的Update */
    onUpdateS(dt) {
        if (this.playerFlyAndFallMap.size > 0) {
            this.playerFlyAndFallMap.forEach((isFall, playerId) => {
                let player = Player.getPlayer(playerId);
                this.isTouchDownS(player);
                this.updatePlayerStateS(playerId, isFall);
            });
        }
    }
    /**判断玩家是否落地（服务端） */
    isTouchDownS(player) {
        if (player.character.isJumping)
            return;
        let playerPoint = new mw.Vector2(player.character.worldTransform.position.x, player.character.worldTransform.position.y);
        let isContainsPoint = false;
        for (let i = 0; i < this.ignoreAreaS.length; ++i) {
            if (this.ignoreAreaS[i].containsPoint(playerPoint)) {
                isContainsPoint = true;
                break;
            }
        }
        if (isContainsPoint)
            return;
        let playerId = player.playerId;
        this.playTouchDownVFSAndSFXS(playerId);
        this.spreadToOthersS(playerId);
        this.initPlayerDataS(playerId);
        Console.error("[落地]");
    }
    /**更新此时飞行玩家的行为（服务端） */
    updatePlayerStateS(playerId, isFall) {
        let player = Player.getPlayer(playerId);
        if (player.character.velocity.z <= 0 && isFall == true) {
            let animation = PlayerManagerExtesion.loadAnimationExtesion(player.character, TrampolineRescourse.Roll, true);
            animation.speed = animation.length / 0.4;
            animation.loop = 0;
            animation.play();
            this.playEffectS(playerId, this.playerFallEffects, TrampolineRescourse.SpinEffect, mw.HumanoidSlotType.Root, new mw.Vector(0, 0, 0), mw.Rotation.zero, new mw.Vector(2, 2, 2));
            this.playerFlyAndFallMap.set(playerId, false);
        }
        if (player.character.velocity.z > 0 && isFall == false) {
            let animation = PlayerManagerExtesion.loadAnimationExtesion(player.character, TrampolineRescourse.FlyUp, true);
            animation.speed = animation.length / 0.4;
            animation.loop = 0;
            animation.play();
            this.stopEffectS(playerId, this.playerFallEffects);
            this.playTailEffectS(playerId);
            this.playerFlyAndFallMap.set(playerId, true);
        }
    }
    /**播放触底音效和特效(服务端) */
    playTouchDownVFSAndSFXS(playerId) {
        let time = this.playersJumpTimeS.get(playerId);
        let effectId = time > 9 ? TrampolineRescourse.TrampolineN_bombFallsEffect : TrampolineRescourse.TrampolineStoneFallsEffect;
        let soundId = time > 9 ? TrampolineRescourse.TrampolineN_bombFallsSound : TrampolineRescourse.TrampolineStoneFallsSound;
        let scaleNum = Math.min(time * 0.2, 4);
        let effectScale = mw.Vector.one.multiply(scaleNum);
        let worldLocation = Player.getPlayer(playerId).character.worldTransform.position;
        GeneralManager.rpcPlayEffectAtLocation(effectId, worldLocation, 1, new mw.Rotation(0, 0, 0), effectScale);
        mw.SoundService.play3DSound(soundId, worldLocation, 1, 1000);
    }
    /**玩家触底时波及其他人（服务端） */
    spreadToOthersS(playerId) {
        let groundPlayer = Player.getPlayer(playerId);
        let time = this.playersJumpTimeS.get(playerId);
        let radius = this.playersImpactRadius.get(playerId);
        for (let player of Player.getAllPlayers()) {
            if (groundPlayer == player)
                continue;
            let dis = mw.Vector.distance(player.character.worldTransform.position, groundPlayer.character.worldTransform.position);
            if (dis > radius)
                continue;
            let vec = player.character.worldTransform.position.clone().subtract(groundPlayer.character.worldTransform.position).normalize();
            vec = vec.add(mw.Vector.up).normalize();
            let multiplyNum = (1 - (dis / radius)) * (Math.min(this.baseMultiplyNum + time * 200, 6000));
            player.character.addImpulse(vec.clone().multiply(multiplyNum), true);
        }
    }
    /**初始化数据 */
    initPlayerDataS(playerId) {
        this.playerFlyAndFallMap.delete(playerId);
        this.playersJumpTimeS.delete(playerId);
        this.playersImpactRadius.delete(playerId);
        this.stopEffectS(playerId, this.playerFallEffects);
        this.stopTailEffectS(playerId);
        let player = Player.getPlayer(playerId);
        PlayerManagerExtesion.rpcStopAnimation(player.character, TrampolineRescourse.Roll);
        Event.dispatchToAllClient(ListenerEventsType$1.ServerToAllClient_HideRadiusUI, playerId);
        Event.dispatchToClient(Player.getPlayer(playerId), ListenerEventsType$1.ServerToAllClient_HideJumpRecordUI);
    }
    /**播放特效（服务端） */
    playEffectS(playerId, effectMap, effect, slotType, offset, rotation, scale) {
        let player = Player.getPlayer(playerId);
        if (effectMap.has(playerId)) {
            let effectId = effectMap.get(playerId);
            if (effectId) {
                EffectService.stop(effectId);
            }
        }
        let playerEffectId = GeneralManager.rpcPlayEffectOnPlayer(effect, player, slotType, 0, new mw.Vector(0, 0, -60), new mw.Rotation(new mw.Vector(0, -90, 0)), mw.Vector.one.multiply(3));
        effectMap.set(playerId, playerEffectId);
    }
    /**停止播放特效（服务端） */
    stopEffectS(playerId, effectMap) {
        if (effectMap.has(playerId)) {
            let effectId = effectMap.get(playerId);
            if (effectId) {
                EffectService.stop(effectId);
                effectMap.set(playerId, null);
            }
        }
    }
    /**玩家悬空状态播放拖尾特效(服务端) */
    playTailEffectS(playerId) {
        if (this.playerTailEffectMap.has(playerId))
            return;
        let player = Player.getPlayer(playerId);
        let tailEffectLeftFoot = GeneralManager.rpcPlayEffectOnPlayer(TrampolineRescourse.TrampolineEffect, player, mw.HumanoidSlotType.LeftFoot, 0);
        let tailEffectRightFoot = GeneralManager.rpcPlayEffectOnPlayer(TrampolineRescourse.TrampolineEffect, player, mw.HumanoidSlotType.RightFoot, 0);
        this.playerTailEffectMap.set(playerId, [tailEffectLeftFoot, tailEffectRightFoot]);
    }
    /**玩家触底后停止播放拖尾特效（服务端） */
    stopTailEffectS(playerId) {
        if (!this.playerTailEffectMap.has(playerId))
            return;
        let tailEffect = this.playerTailEffectMap.get(playerId);
        for (let i = 0; i < tailEffect.length; ++i) {
            EffectService.stop(tailEffect[i]);
        }
        this.playerTailEffectMap.delete(playerId);
    }
    /**------------------------------------------- 服务端 ------------------------------------------------ */
    /**------------------------------------------- 通用 ------------------------------------------------ */
    /**
     * 震荡函数
     * @param x
     * @param speed 震荡衰减/增益的速度
     * @param frequency 震荡的频率
     * @param amplitude 震荡的幅度
     * @returns
     */
    shakeFunc(x, speed, frequency, amplitude) {
        return (Math.pow(speed, -x) * Math.sin(2 * frequency * Math.PI * x)) / amplitude;
    }
};
__decorate([
    mw.Property({ displayName: "基础跳跃冲量", group: "脚本属性" })
], Trampoline.prototype, "baseFallMultiplyNum", void 0);
__decorate([
    mw.Property({ displayName: "基础冲击数", group: "脚本属性" })
], Trampoline.prototype, "baseMultiplyNum", void 0);
__decorate([
    mw.Property({ displayName: "冲击半径", group: "脚本属性" })
], Trampoline.prototype, "impactRadius", void 0);
__decorate([
    RemoteFunction(mw.Client)
], Trampoline.prototype, "addPlayerImpulse", null);
Trampoline = __decorate([
    Component
], Trampoline);
var Trampoline$1 = Trampoline;
class OBB {
    constructor(center, axisX, axisY, extentsX, extentsY) {
        this.center = center;
        this.nx = axisX;
        this.ny = axisY;
        this.extents_x = extentsX;
        this.extents_y = extentsY;
    }
    containsPoint(point) {
        let c2p = point.clone().subtract(this.center);
        let xBenchmark = Math.abs(this.dotV2(this.nx, this.nx.clone().multiply(this.extents_x)));
        let xTentative = Math.abs(this.dotV2(c2p, this.nx));
        if (xTentative >= xBenchmark) {
            return false;
        }
        let yBenchmark = Math.abs(this.dotV2(this.ny, this.ny.clone().multiply(this.extents_y)));
        let yTentative = Math.abs(this.dotV2(c2p, this.ny));
        return yTentative < yBenchmark;
    }
    dotV2(a, b) {
        return a.x * b.x + a.y * b.y;
    }
}
/**客户端&服务端发送的事件类型 */
var ListenerEventsType$1;
(function (ListenerEventsType) {
    /**服务端发给所有客户端（模型震动） */
    ListenerEventsType["ServerToAllClient_Shake"] = "ServerToAllClient_Shake";
    /**服务端发给所有客户端（显示落点UI） */
    ListenerEventsType["ServerToAllClient_ShowRadiusUI"] = "ServerToAllClient_ShowRadiusUI";
    /**服务端发给所有客户端（隐藏落点UI） */
    ListenerEventsType["ServerToAllClient_HideRadiusUI"] = "ServerToAllClient_HideRadiusUI";
    /**服务端发给指定客户端（显示JumpRecordUI） */
    ListenerEventsType["ServerToAllClient_ShowJumpRecordUI"] = "ServerToAllClient_ShowJumpRecordUI";
    /**服务端发给所有客户端（隐藏JumpRecordUI） */
    ListenerEventsType["ServerToAllClient_HideJumpRecordUI"] = "ServerToAllClient_HideJumpRecordUI";
})(ListenerEventsType$1 || (ListenerEventsType$1 = {}));
var TrampolineRescourse;
(function (TrampolineRescourse) {
    /**蹦床拖尾特效 */
    TrampolineRescourse["TrampolineEffect"] = "27392";
    /**蹦床石头落地特效 */
    TrampolineRescourse["TrampolineStoneFallsEffect"] = "57200";
    /**蹦床核弹落地特效 */
    TrampolineRescourse["TrampolineN_bombFallsEffect"] = "85150";
    /**玩家空中降落漩涡特效 */
    TrampolineRescourse["SpinEffect"] = "197224";
    /**----------------------------------------- */
    /**蹦床音效 */
    TrampolineRescourse["TrampolineSound"] = "14182";
    /**蹦床石头落地音效 */
    TrampolineRescourse["TrampolineStoneFallsSound"] = "27862";
    /**蹦床核弹落地音效 */
    TrampolineRescourse["TrampolineN_bombFallsSound"] = "39343";
    /**----------------------------------------- */
    /**蹦床上升动画 */
    TrampolineRescourse["FlyUp"] = "35401";
    /**翻滚下落动画 */
    TrampolineRescourse["Roll"] = "14736";
})(TrampolineRescourse || (TrampolineRescourse = {}));

var foreign102 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    get ListenerEventsType () { return ListenerEventsType$1; },
    OBB: OBB,
    get TrampolineRescourse () { return TrampolineRescourse; },
    default: Trampoline$1
});

/*
 * @Author: 侯凯召
 * @QQ邮箱: 3046916186@qq.com
 * @Date: 2023-01-29 16:42:52
 * @LastEditors: 穿迷彩服的鲨鱼
 * @LastEditTime: 2023-01-29 16:43:29
 * @Description: 蹦床UI
 * @FilePath: \Demo\JavaScripts\prefab\Trampoline\ui\P_Game_Trampoline.ts
 */
class P_Game_Trampoline extends mw.UIScript {
    constructor() {
        super(...arguments);
        /**当前客户端玩家 */
        this.player = null;
        /**------------------ 【UI控件】 ------------------ */
        this.mRecordMaxHeightCanvas = null;
        this.mRecordMaxHeightText = null;
        this.mCurrentHeightCanvas = null;
        this.mCurrentHeightTxt = null;
        /**------------------ 【UI控件】 ------------------ */
        /**------------------ 【数据】 ------------------ */
        this.showUITween1 = null;
        this.showUITween2 = null;
        this.recordMaxHeightCanvasPos = new mw.Vector2(1900, 200);
        this.currentHeightCanvasPos = new mw.Vector2(1900, 350);
        /**记录的最大高度 */
        this.recordMaxHight = 0;
        /**起始高度 */
        this.planeHeight = 0;
        this.isStart = false;
        this.isChange = false;
    }
    /**------------------ 【数据】 ------------------ */
    async onStart() {
        //设置能否每帧触发onUpdate
        this.canUpdate = true;
        this.layer = mw.UILayerMiddle;
        await this.initData();
        this.initTween();
        this.getComponentUI();
        this.registerListener();
    }
    /**初始化数据 */
    async initData() {
        this.player = await Player.asyncGetLocalPlayer();
        Console.error("[player:]" + this.player.character);
    }
    initTween() {
        this.showUITween1 = new mw.Tween({ time: 0 })
            .to({ time: 1 }, 1000)
            .onStart(() => {
            this.mRecordMaxHeightCanvas.visibility = mw.SlateVisibility.SelfHitTestInvisible;
        })
            .onUpdate((obj) => {
            let pos = new mw.Vector2(this.recordMaxHeightCanvasPos.x - this.backEaseIn(obj.time) * 500, this.recordMaxHeightCanvasPos.y);
            this.mRecordMaxHeightCanvas.position = pos;
        });
        this.showUITween2 = new mw.Tween({ time: 0 })
            .to({ time: 1 }, 1000)
            .onStart(() => {
            this.mCurrentHeightCanvas.visibility = mw.SlateVisibility.SelfHitTestInvisible;
        })
            .onUpdate((obj) => {
            let pos = new mw.Vector2(this.currentHeightCanvasPos.x - this.backEaseIn(obj.time) * 500, this.currentHeightCanvasPos.y);
            this.mCurrentHeightCanvas.position = pos;
        })
            .delay(200);
    }
    /**获取UI组件 */
    getComponentUI() {
        let rootCanvas = this.uiObject;
        this.mRecordMaxHeightCanvas = rootCanvas.findChildByPath("RootCanvas/mRecordMaxHeightCanvas");
        this.mRecordMaxHeightText = rootCanvas.findChildByPath("RootCanvas/mRecordMaxHeightCanvas/mRecordMaxHeightText");
        this.mCurrentHeightCanvas = rootCanvas.findChildByPath("RootCanvas/mCurrentHeightCanvas");
        this.mCurrentHeightTxt = rootCanvas.findChildByPath("RootCanvas/mCurrentHeightCanvas/mCurrentHeightTxt");
    }
    /**注册监听 */
    registerListener() {
        Event.addServerListener(ListenerEventsType.ServerToAllClient_ShowJumpRecordUI, this.showUI.bind(this));
        Event.addServerListener(ListenerEventsType.ServerToAllClient_HideJumpRecordUI, this.hideUI.bind(this));
        Event.addLocalListener("SyncMaxHeight", (maxHeight) => {
            this.recordMaxHight = maxHeight;
        });
    }
    onUpdate(dt) {
        if (!this.isStart)
            return;
        let height = Math.ceil(this.player.character.worldTransform.position.z - this.planeHeight);
        height = Math.max(height, 0);
        this.refreshUI(height);
    }
    /**刷新数据 */
    refreshUI(height) {
        let t = Math.min(1 - (height / this.recordMaxHight), 1);
        this.mCurrentHeightTxt.contentColor = new mw.LinearColor(1, t, t);
        this.mCurrentHeightTxt.text = height + " M";
        if (height > this.recordMaxHight) {
            this.recordMaxHight = height;
            this.mRecordMaxHeightText.text = this.recordMaxHight + "M";
            if (!this.isChange)
                return;
            this.mCurrentHeightTxt.renderScale = (mw.Vector2.one.multiply(1.25));
            this.mRecordMaxHeightText.renderScale = (mw.Vector2.one.multiply(1.25));
            this.isChange = false;
        }
        else {
            if (this.isChange)
                return;
            Event.dispatchToServer("RefreshMaxHeight", this.recordMaxHight);
            Event.dispatchToLocal("achMaxHight", this.recordMaxHight);
            this.initNomalUI();
            this.isChange = true;
        }
    }
    /**显示UI */
    showUI(planeHeight) {
        if (this.mRecordMaxHeightCanvas.visible)
            return;
        this.planeHeight = Math.ceil(planeHeight);
        this.mRecordMaxHeightText.text = this.recordMaxHight + " M";
        this.initNomalUI();
        this.isStart = true;
        this.showUITween1.start();
        this.showUITween2.start();
        Event.dispatchToLocal("IsCanFly", false);
    }
    /**初始化UI */
    initNomalUI() {
        this.mCurrentHeightTxt.renderScale = mw.Vector2.one;
        this.mRecordMaxHeightText.renderScale = mw.Vector2.one;
        this.mRecordMaxHeightText.contentColor = mw.LinearColor.red;
    }
    /**隐藏UI */
    hideUI() {
        this.isStart = false;
        this.mCurrentHeightCanvas.visibility = mw.SlateVisibility.Collapsed;
        this.mRecordMaxHeightCanvas.visibility = mw.SlateVisibility.Collapsed;
        Event.dispatchToLocal("IsCanFly", true);
    }
    /**缓入 超过范围的三次方缓动 */
    backEaseIn(time) {
        return Math.pow(time, 5) + 1.7 * time * Math.sin(Math.PI * time);
    }
}
/**客户端&服务端发送的事件类型 */
var ListenerEventsType;
(function (ListenerEventsType) {
    /**服务端发给指定客户端（显示JumpRecordUI） */
    ListenerEventsType["ServerToAllClient_ShowJumpRecordUI"] = "ServerToAllClient_ShowJumpRecordUI";
    /**服务端发给所有客户端（隐藏JumpRecordUI） */
    ListenerEventsType["ServerToAllClient_HideJumpRecordUI"] = "ServerToAllClient_HideJumpRecordUI";
})(ListenerEventsType || (ListenerEventsType = {}));

var foreign103 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    get ListenerEventsType () { return ListenerEventsType; },
    default: P_Game_Trampoline
});

let TelegraphPole = class TelegraphPole extends mw.Script {
    constructor() {
        super(...arguments);
        /**-------------------- 可控数据 -------------------- */
        this.delayDieTime = 3;
        /**-------------------- 可控数据 -------------------- */
        /**-------------------- 属性 -------------------- */
        /**当前客户端玩家 */
        this.player = null;
        /**-------------------- 属性 -------------------- */
        /**-------------------- 数据 -------------------- */
        /**播放动画的唯一标识 */
        this.playerAnimationMap = new Map();
        /**播放音效的唯一标识 */
        this.playerAudioMapId = new Map();
        /**播放特效的唯一标识 */
        this.playerEffectMapId = new Map();
        /**延迟死亡的唯一标识 */
        this.delayDieTimeoutMap = new Map();
        /**延迟复活的唯一标识 */
        this.delayRebornTimeout = null;
        /** 当预加载资源改动的时候自动调用此函数 */
        // public async onPreloadAssetsChangedInEditor() {
        //     for (let key in TelegraphPoleResource) {
        //         let keyToAny: any = key;
        //         if (isNaN(keyToAny)) {
        //             let telegraphPoleResource: any = TelegraphPoleResource[key];
        //             let telegraphPoleResourceEnum: TelegraphPoleResource = telegraphPoleResource;
        //             await Utils.downloadAsset(telegraphPoleResourceEnum);
        //         }
        //     }
        // }
        /**------------------------------------------- 客户端 ------------------------------------------------ */
        this.telegraphPole = null;
        this.telegraphPoleLen = 0;
        /**------------------------------------------- 服务端 ------------------------------------------------ */
    }
    ;
    /**-------------------- 数据 -------------------- */
    /** 当脚本被实例后，会在第一帧更新前调用此函数 */
    async onStart() {
        // await this.onPreloadAssetsChangedInEditor();
        if (mw.SystemUtil.isClient()) {
            Console.error("TelegraphPole-onStart-isClient");
            this.initDataC();
            this.bindTriggerC();
            this.bindEventsC();
        }
        if (mw.SystemUtil.isServer()) {
            Console.error("TelegraphPole-onStart-isServer");
            this.bindEventsS();
        }
    }
    /**初始化数据 */
    async initDataC() {
        this.telegraphPole = GameConfig.TelegraphPole;
        this.telegraphPoleLen = this.telegraphPole.getAllElement().length;
        this.player = await Player.asyncGetLocalPlayer();
    }
    /**绑定触发器(客户端) */
    async bindTriggerC() {
        if (this.telegraphPoleLen == 0)
            return;
        for (let i = 0; i < this.telegraphPoleLen; ++i) {
            let trigger = (await GameObject.asyncFindGameObjectById(this.telegraphPole.getElement(i + 1).TriggerGuid));
            trigger.onEnter.add((char) => {
                this.onEnterTriggerC(char);
            });
        }
    }
    /**绑定事件(客户端) */
    bindEventsC() {
        Event.addServerListener(ListenerEventType.SendClient, this.endElectrocutedC.bind(this));
    }
    /**进入触发器（客户端） */
    onEnterTriggerC(char) {
        Console.error("[hkz]");
        if (char != Player.localPlayer.character)
            return;
        Console.error("[hkz1]");
        this.startElectrocutedC();
        Event.dispatchToLocal("dianji", 1);
    }
    /**开始电刑（客户端） */
    async startElectrocutedC() {
        this.setPlayerStateC(false);
        Event.dispatchToServer(ListenerEventType.SendServers);
    }
    /**结束电刑-开始死亡（客户端） */
    endElectrocutedC() {
        //开启布娃娃效果
        this.player.character.ragdollEnabled = true;
        if (this.delayRebornTimeout) {
            clearTimeout(this.delayRebornTimeout);
        }
        this.delayRebornTimeout = setTimeout(() => {
            clearTimeout(this.delayRebornTimeout);
            this.rebornC();
        }, this.delayDieTime / 2 * 1000);
    }
    /**复活（客户端） */
    rebornC() {
        let index = Utils.getRandomInteger(0, 3);
        this.player.character.worldTransform.position = GlobalData.homeLocs[index];
        this.player.character.worldTransform.rotation = GlobalData.homeRots[index];
        //关闭布娃娃效果
        this.player.character.ragdollEnabled = false;
        this.setPlayerStateC(true);
    }
    /**设置人物状态（客户端） */
    setPlayerStateC(v) {
        this.player.character.jumpEnabled = v;
        this.player.character.movementEnabled = v;
    }
    /**------------------------------------------- 客户端 ------------------------------------------------ */
    /**------------------------------------------- 服务端 ------------------------------------------------ */
    /**绑定事件（服务端） */
    bindEventsS() {
        Event.addClientListener(ListenerEventType.SendServers, this.startElectrocutedS.bind(this));
    }
    /**开始电刑（服务端） */
    async startElectrocutedS(player) {
        let playerid = player.playerId;
        if (this.playerAnimationMap.has(playerid)) {
            let animationId = this.playerAnimationMap.get(playerid);
            if (animationId) {
                animationId.stop();
            }
        }
        let playerAnimationId = PlayerManagerExtesion.rpcPlayAnimation(player.character, TelegraphPoleResource.Animation, 0, 2);
        this.playerAnimationMap.set(playerid, playerAnimationId);
        if (this.playerAudioMapId.has(playerid)) {
            let audioId = this.playerAudioMapId.get(playerid);
            if (audioId) {
                mw.SoundService.stop3DSound(audioId);
            }
        }
        let playerAudioId = mw.SoundService.play3DSound(TelegraphPoleResource.Audio, player.character.worldTransform.position, 0, 1);
        this.playerAudioMapId.set(playerid, playerAudioId);
        if (this.playerEffectMapId.has(playerid)) {
            let effectId = this.playerEffectMapId.get(playerid);
            if (effectId) {
                EffectService.stop(effectId);
            }
        }
        let playerEffectId = GeneralManager.rpcPlayEffectOnPlayer(TelegraphPoleResource.Hurt, player, mw.HumanoidSlotType.Root, 0, new mw.Vector(0, 0, 0), mw.Rotation.zero, new mw.Vector(1, 1, 0.35));
        this.playerEffectMapId.set(playerid, playerEffectId);
        if (this.delayDieTimeoutMap.has(playerid)) {
            let dieId = this.delayDieTimeoutMap.get(playerid);
            if (dieId) {
                clearTimeout(dieId);
            }
        }
        let delayDieTimeoutId = setTimeout(() => {
            if (this.delayDieTimeoutMap.has(playerid)) {
                let dieId = this.delayDieTimeoutMap.get(playerid);
                if (dieId) {
                    clearTimeout(dieId);
                }
                else {
                    clearTimeout(delayDieTimeoutId);
                }
            }
            else {
                clearTimeout(delayDieTimeoutId);
            }
            this.endElectrocutedS(playerid);
        }, this.delayDieTime * 1000);
        this.delayDieTimeoutMap.set(playerid, delayDieTimeoutId);
    }
    /**结束电刑-开始死亡（服务端） */
    endElectrocutedS(playerid) {
        if (this.playerAnimationMap.has(playerid)) {
            let animationId = this.playerAnimationMap.get(playerid);
            if (animationId) {
                animationId.stop();
                this.playerAnimationMap.set(playerid, null);
            }
        }
        if (this.playerAudioMapId.has(playerid)) {
            let audioId = this.playerAudioMapId.get(playerid);
            if (audioId) {
                mw.SoundService.stop3DSound(audioId);
                this.playerAudioMapId.set(playerid, null);
            }
        }
        if (this.playerEffectMapId.has(playerid)) {
            let effectId = this.playerEffectMapId.get(playerid);
            if (effectId) {
                EffectService.stop(effectId);
                this.playerEffectMapId.set(playerid, null);
            }
        }
        //开启布娃娃效果
        Event.dispatchToClient(Player.getPlayer(playerid), ListenerEventType.SendClient);
    }
};
__decorate([
    mw.Property({ displayName: "被电时间（s）", group: "电线杆属性" })
], TelegraphPole.prototype, "delayDieTime", void 0);
TelegraphPole = __decorate([
    Component
], TelegraphPole);
var TelegraphPole$1 = TelegraphPole;
var TelegraphPoleResource;
(function (TelegraphPoleResource) {
    /**触电动画 */
    TelegraphPoleResource["Animation"] = "14698";
    /**触电音效 */
    TelegraphPoleResource["Audio"] = "20464";
    /**被电特效 */
    TelegraphPoleResource["Hurt"] = "197173";
})(TelegraphPoleResource || (TelegraphPoleResource = {}));
/**监听事件的类型 */
var ListenerEventType;
(function (ListenerEventType) {
    /**客户端发给服务端同步玩家表现 */
    ListenerEventType["SendServers"] = "SendServers_TelegraphPole";
    /**服务端发给客户端同步玩家表现 */
    ListenerEventType["SendClient"] = "SendClient_TelegraphPole";
})(ListenerEventType || (ListenerEventType = {}));

var foreign104 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    get ListenerEventType () { return ListenerEventType; },
    get TelegraphPoleResource () { return TelegraphPoleResource; },
    default: TelegraphPole$1
});

/**
 * AUTO GENERATE BY UI EDITOR.
 * WARNING: DO NOT MODIFY THIS FILE,MAY CAUSE CODE LOST.
 * AUTHOR: 爱玩游戏的小胖子
 * UI: UI/common/ImpactRadiusWindow.ui
 * TIME: 2024.08.04-18.39.52
 */
let ImpactRadiusWindow_Generate = class ImpactRadiusWindow_Generate extends UIScript {
    get img() {
        if (!this.img_Internal && this.uiWidgetBase) {
            this.img_Internal = this.uiWidgetBase.findChildByPath('MWCanvas_2147482460/img');
        }
        return this.img_Internal;
    }
    onAwake() {
        //设置能否每帧触发onUpdate
        this.canUpdate = false;
        this.layer = mw.UILayerBottom;
        this.initButtons();
    }
    initButtons() {
        //按钮添加点击
        //按钮添加点击
        //按钮多语言
        //文本多语言
        //文本多语言
    }
    /*初始化多语言*/
    initLanguage(ui) {
        let call = mw.UIScript.getBehavior("lan");
        if (call && ui) {
            call(ui);
        }
    }
    onShow(...params) { }
    ;
    /*显示panel*/
    show(...param) {
        mw.UIService.showUI(this, this.layer, ...param);
    }
    /*隐藏panel*/
    hide() {
        mw.UIService.hideUI(this);
    }
};
ImpactRadiusWindow_Generate = __decorate([
    UIBind('UI/common/ImpactRadiusWindow.ui')
], ImpactRadiusWindow_Generate);
var ImpactRadiusWindow_Generate$1 = ImpactRadiusWindow_Generate;

var foreign112 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: ImpactRadiusWindow_Generate$1
});

/**
 * AUTO GENERATE BY UI EDITOR.
 * WARNING: DO NOT MODIFY THIS FILE,MAY CAUSE CODE LOST.
 * AUTHOR: 爱玩游戏的小胖子
 * UI: UI/common/JumpGameTips.ui
 * TIME: 2024.08.04-18.39.52
 */
let JumpGameTips_Generate = class JumpGameTips_Generate extends UIScript {
    onAwake() {
        //设置能否每帧触发onUpdate
        this.canUpdate = false;
        this.layer = mw.UILayerBottom;
        this.initButtons();
    }
    initButtons() {
        //按钮添加点击
        //按钮添加点击
        //按钮多语言
        //文本多语言
        //文本多语言
        this.initLanguage(this.uiWidgetBase.findChildByPath("RootCanvas/TextBlock"));
    }
    /*初始化多语言*/
    initLanguage(ui) {
        let call = mw.UIScript.getBehavior("lan");
        if (call && ui) {
            call(ui);
        }
    }
    onShow(...params) { }
    ;
    /*显示panel*/
    show(...param) {
        mw.UIService.showUI(this, this.layer, ...param);
    }
    /*隐藏panel*/
    hide() {
        mw.UIService.hideUI(this);
    }
};
JumpGameTips_Generate = __decorate([
    UIBind('UI/common/JumpGameTips.ui')
], JumpGameTips_Generate);
var JumpGameTips_Generate$1 = JumpGameTips_Generate;

var foreign113 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: JumpGameTips_Generate$1
});

/**
 * AUTO GENERATE BY UI EDITOR.
 * WARNING: DO NOT MODIFY THIS FILE,MAY CAUSE CODE LOST.
 * AUTHOR: 爱玩游戏的小胖子
 * UI: UI/common/notice/SecondNoticeItem.ui
 * TIME: 2024.08.04-18.39.52
 */
let SecondNoticeItem_Generate = class SecondNoticeItem_Generate extends UIScript {
    get txt_context() {
        if (!this.txt_context_Internal && this.uiWidgetBase) {
            this.txt_context_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/txt_context');
        }
        return this.txt_context_Internal;
    }
    get icon() {
        if (!this.icon_Internal && this.uiWidgetBase) {
            this.icon_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/icon');
        }
        return this.icon_Internal;
    }
    get effect() {
        if (!this.effect_Internal && this.uiWidgetBase) {
            this.effect_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/effect');
        }
        return this.effect_Internal;
    }
    onAwake() {
        //设置能否每帧触发onUpdate
        this.canUpdate = false;
        this.layer = mw.UILayerBottom;
        this.initButtons();
    }
    initButtons() {
        //按钮添加点击
        //按钮添加点击
        //按钮多语言
        //文本多语言
        this.initLanguage(this.txt_context);
        //文本多语言
    }
    /*初始化多语言*/
    initLanguage(ui) {
        let call = mw.UIScript.getBehavior("lan");
        if (call && ui) {
            call(ui);
        }
    }
    onShow(...params) { }
    ;
    /*显示panel*/
    show(...param) {
        mw.UIService.showUI(this, this.layer, ...param);
    }
    /*隐藏panel*/
    hide() {
        mw.UIService.hideUI(this);
    }
};
SecondNoticeItem_Generate = __decorate([
    UIBind('UI/common/notice/SecondNoticeItem.ui')
], SecondNoticeItem_Generate);
var SecondNoticeItem_Generate$1 = SecondNoticeItem_Generate;

var foreign115 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: SecondNoticeItem_Generate$1
});

/**
 * AUTO GENERATE BY UI EDITOR.
 * WARNING: DO NOT MODIFY THIS FILE,MAY CAUSE CODE LOST.
 * AUTHOR: 爱玩游戏的小胖子
 * UI: UI/common/world0.ui
 * TIME: 2024.08.04-18.39.52
 */
let world0_Generate = class world0_Generate extends UIScript {
    onAwake() {
        //设置能否每帧触发onUpdate
        this.canUpdate = false;
        this.layer = mw.UILayerBottom;
        this.initButtons();
    }
    initButtons() {
        //按钮添加点击
        //按钮添加点击
        //按钮多语言
        //文本多语言
        //文本多语言
        this.initLanguage(this.uiWidgetBase.findChildByPath("RootCanvas/TextBlock"));
    }
    /*初始化多语言*/
    initLanguage(ui) {
        let call = mw.UIScript.getBehavior("lan");
        if (call && ui) {
            call(ui);
        }
    }
    onShow(...params) { }
    ;
    /*显示panel*/
    show(...param) {
        mw.UIService.showUI(this, this.layer, ...param);
    }
    /*隐藏panel*/
    hide() {
        mw.UIService.hideUI(this);
    }
};
world0_Generate = __decorate([
    UIBind('UI/common/world0.ui')
], world0_Generate);
var world0_Generate$1 = world0_Generate;

var foreign119 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: world0_Generate$1
});

/**
 * AUTO GENERATE BY UI EDITOR.
 * WARNING: DO NOT MODIFY THIS FILE,MAY CAUSE CODE LOST.
 * AUTHOR: 爱玩游戏的小胖子
 * UI: UI/common/world0_副本1.ui
 * TIME: 2024.08.04-18.39.52
 */
let world0_副本1_Generate = class world0_副本1_Generate extends UIScript {
    onAwake() {
        //设置能否每帧触发onUpdate
        this.canUpdate = false;
        this.layer = mw.UILayerBottom;
        this.initButtons();
    }
    initButtons() {
        //按钮添加点击
        //按钮添加点击
        //按钮多语言
        //文本多语言
        //文本多语言
        this.initLanguage(this.uiWidgetBase.findChildByPath("RootCanvas/TextBlock"));
    }
    /*初始化多语言*/
    initLanguage(ui) {
        let call = mw.UIScript.getBehavior("lan");
        if (call && ui) {
            call(ui);
        }
    }
    onShow(...params) { }
    ;
    /*显示panel*/
    show(...param) {
        mw.UIService.showUI(this, this.layer, ...param);
    }
    /*隐藏panel*/
    hide() {
        mw.UIService.hideUI(this);
    }
};
world0_副本1_Generate = __decorate([
    UIBind('UI/common/world0_副本1.ui')
], world0_副本1_Generate);
var world0_副本1_Generate$1 = world0_副本1_Generate;

var foreign120 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: world0_副本1_Generate$1
});

/**
 * AUTO GENERATE BY UI EDITOR.
 * WARNING: DO NOT MODIFY THIS FILE,MAY CAUSE CODE LOST.
 * AUTHOR: 爱玩游戏的小胖子
 * UI: UI/module/Achievement/AchievementItem.ui
 * TIME: 2024.08.04-18.39.53
 */
let AchievementItem_Generate = class AchievementItem_Generate extends UIScript {
    get mBgImage_1() {
        if (!this.mBgImage_1_Internal && this.uiWidgetBase) {
            this.mBgImage_1_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/Canvas/DetailCanvas/mBgImage_1');
        }
        return this.mBgImage_1_Internal;
    }
    get mText_AMdetial() {
        if (!this.mText_AMdetial_Internal && this.uiWidgetBase) {
            this.mText_AMdetial_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/Canvas/DetailCanvas/mText_AMdetial');
        }
        return this.mText_AMdetial_Internal;
    }
    get mImage_GradeBG() {
        if (!this.mImage_GradeBG_Internal && this.uiWidgetBase) {
            this.mImage_GradeBG_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/Canvas/mImage_GradeBG');
        }
        return this.mImage_GradeBG_Internal;
    }
    get mProgressBar() {
        if (!this.mProgressBar_Internal && this.uiWidgetBase) {
            this.mProgressBar_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/Canvas/mProgressBar');
        }
        return this.mProgressBar_Internal;
    }
    get mText_Grade() {
        if (!this.mText_Grade_Internal && this.uiWidgetBase) {
            this.mText_Grade_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/Canvas/mText_Grade');
        }
        return this.mText_Grade_Internal;
    }
    get mText_AMname() {
        if (!this.mText_AMname_Internal && this.uiWidgetBase) {
            this.mText_AMname_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/Canvas/mText_AMname');
        }
        return this.mText_AMname_Internal;
    }
    get mCanvas_Pointto() {
        if (!this.mCanvas_Pointto_Internal && this.uiWidgetBase) {
            this.mCanvas_Pointto_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/Canvas/mCanvas_Pointto');
        }
        return this.mCanvas_Pointto_Internal;
    }
    get mText_NextLevel() {
        if (!this.mText_NextLevel_Internal && this.uiWidgetBase) {
            this.mText_NextLevel_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/Canvas/mCanvas_Pointto/mText_NextLevel');
        }
        return this.mText_NextLevel_Internal;
    }
    get mImage_Point() {
        if (!this.mImage_Point_Internal && this.uiWidgetBase) {
            this.mImage_Point_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/Canvas/mCanvas_Pointto/mImage_Point');
        }
        return this.mImage_Point_Internal;
    }
    get mText_lording() {
        if (!this.mText_lording_Internal && this.uiWidgetBase) {
            this.mText_lording_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/Canvas/mText_lording');
        }
        return this.mText_lording_Internal;
    }
    onAwake() {
        //设置能否每帧触发onUpdate
        this.canUpdate = false;
        this.layer = mw.UILayerBottom;
        this.initButtons();
    }
    initButtons() {
        //按钮添加点击
        //按钮添加点击
        //按钮多语言
        //文本多语言
        this.initLanguage(this.mText_AMdetial);
        this.initLanguage(this.mText_Grade);
        this.initLanguage(this.mText_AMname);
        this.initLanguage(this.mText_NextLevel);
        this.initLanguage(this.mText_lording);
        //文本多语言
    }
    /*初始化多语言*/
    initLanguage(ui) {
        let call = mw.UIScript.getBehavior("lan");
        if (call && ui) {
            call(ui);
        }
    }
    onShow(...params) { }
    ;
    /*显示panel*/
    show(...param) {
        mw.UIService.showUI(this, this.layer, ...param);
    }
    /*隐藏panel*/
    hide() {
        mw.UIService.hideUI(this);
    }
};
AchievementItem_Generate = __decorate([
    UIBind('UI/module/Achievement/AchievementItem.ui')
], AchievementItem_Generate);
var AchievementItem_Generate$1 = AchievementItem_Generate;

var foreign121 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: AchievementItem_Generate$1
});

/**
 * AUTO GENERATE BY UI EDITOR.
 * WARNING: DO NOT MODIFY THIS FILE,MAY CAUSE CODE LOST.
 * AUTHOR: 爱玩游戏的小胖子
 * UI: UI/module/CollectionUI/CollectItem.ui
 * TIME: 2024.08.04-18.39.53
 */
let CollectItem_Generate = class CollectItem_Generate extends UIScript {
    get mBgImage() {
        if (!this.mBgImage_Internal && this.uiWidgetBase) {
            this.mBgImage_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/Canvas/mBgImage');
        }
        return this.mBgImage_Internal;
    }
    get mIconBtn() {
        if (!this.mIconBtn_Internal && this.uiWidgetBase) {
            this.mIconBtn_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/Canvas/mIconBtn');
        }
        return this.mIconBtn_Internal;
    }
    get mAdsTipBtn() {
        if (!this.mAdsTipBtn_Internal && this.uiWidgetBase) {
            this.mAdsTipBtn_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/Canvas/mAdsTipCanvas/mAdsTipBtn');
        }
        return this.mAdsTipBtn_Internal;
    }
    get mAdsTipImg() {
        if (!this.mAdsTipImg_Internal && this.uiWidgetBase) {
            this.mAdsTipImg_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/Canvas/mAdsTipCanvas/mAdsTipImg');
        }
        return this.mAdsTipImg_Internal;
    }
    get mAdsTipCanvas() {
        if (!this.mAdsTipCanvas_Internal && this.uiWidgetBase) {
            this.mAdsTipCanvas_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/Canvas/mAdsTipCanvas');
        }
        return this.mAdsTipCanvas_Internal;
    }
    onAwake() {
        //设置能否每帧触发onUpdate
        this.canUpdate = false;
        this.layer = mw.UILayerBottom;
        this.initButtons();
    }
    initButtons() {
        //按钮添加点击
        //按钮添加点击
        this.mIconBtn.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick", "mIconBtn");
        });
        this.mIconBtn.touchMethod = (mw.ButtonTouchMethod.PreciseTap);
        this.mAdsTipBtn.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick", "mAdsTipBtn");
        });
        this.mAdsTipBtn.touchMethod = (mw.ButtonTouchMethod.PreciseTap);
        //按钮多语言
        //文本多语言
        //文本多语言
        this.initLanguage(this.uiWidgetBase.findChildByPath("RootCanvas/Canvas/mAdsTipCanvas/AdsTextBlock"));
    }
    /*初始化多语言*/
    initLanguage(ui) {
        let call = mw.UIScript.getBehavior("lan");
        if (call && ui) {
            call(ui);
        }
    }
    onShow(...params) { }
    ;
    /*显示panel*/
    show(...param) {
        mw.UIService.showUI(this, this.layer, ...param);
    }
    /*隐藏panel*/
    hide() {
        mw.UIService.hideUI(this);
    }
};
CollectItem_Generate = __decorate([
    UIBind('UI/module/CollectionUI/CollectItem.ui')
], CollectItem_Generate);
var CollectItem_Generate$1 = CollectItem_Generate;

var foreign127 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: CollectItem_Generate$1
});

/**
 * AUTO GENERATE BY UI EDITOR.
 * WARNING: DO NOT MODIFY THIS FILE,MAY CAUSE CODE LOST.
 * AUTHOR: 爱玩游戏的小胖子
 * UI: UI/module/PetUI/PetItem.ui
 * TIME: 2024.08.04-18.39.53
 */
let PetItem_Generate = class PetItem_Generate extends UIScript {
    get mIconButton() {
        if (!this.mIconButton_Internal && this.uiWidgetBase) {
            this.mIconButton_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/Canvas/mIconButton');
        }
        return this.mIconButton_Internal;
    }
    get mSelectImage() {
        if (!this.mSelectImage_Internal && this.uiWidgetBase) {
            this.mSelectImage_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/Canvas/mSelectImage');
        }
        return this.mSelectImage_Internal;
    }
    get mOwnTxt() {
        if (!this.mOwnTxt_Internal && this.uiWidgetBase) {
            this.mOwnTxt_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/Canvas/mOwnTxt');
        }
        return this.mOwnTxt_Internal;
    }
    onAwake() {
        //设置能否每帧触发onUpdate
        this.canUpdate = false;
        this.layer = mw.UILayerBottom;
        this.initButtons();
    }
    initButtons() {
        //按钮添加点击
        //按钮添加点击
        this.mIconButton.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick", "mIconButton");
        });
        this.mIconButton.touchMethod = (mw.ButtonTouchMethod.PreciseTap);
        //按钮多语言
        //文本多语言
        this.initLanguage(this.mOwnTxt);
        //文本多语言
    }
    /*初始化多语言*/
    initLanguage(ui) {
        let call = mw.UIScript.getBehavior("lan");
        if (call && ui) {
            call(ui);
        }
    }
    onShow(...params) { }
    ;
    /*显示panel*/
    show(...param) {
        mw.UIService.showUI(this, this.layer, ...param);
    }
    /*隐藏panel*/
    hide() {
        mw.UIService.hideUI(this);
    }
};
PetItem_Generate = __decorate([
    UIBind('UI/module/PetUI/PetItem.ui')
], PetItem_Generate);
var PetItem_Generate$1 = PetItem_Generate;

var foreign133 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: PetItem_Generate$1
});

/**
 * AUTO GENERATE BY UI EDITOR.
 * WARNING: DO NOT MODIFY THIS FILE,MAY CAUSE CODE LOST.
 * AUTHOR: 爱玩游戏的小胖子
 * UI: UI/module/RankingUI/RankingItem.ui
 * TIME: 2024.08.04-18.39.54
 */
let RankingItem_Generate = class RankingItem_Generate extends UIScript {
    get mRankingTxt() {
        if (!this.mRankingTxt_Internal && this.uiWidgetBase) {
            this.mRankingTxt_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mContainerCanvas/mRankingTxt');
        }
        return this.mRankingTxt_Internal;
    }
    get mSelfNameTxt() {
        if (!this.mSelfNameTxt_Internal && this.uiWidgetBase) {
            this.mSelfNameTxt_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mContainerCanvas/mSelfNameTxt');
        }
        return this.mSelfNameTxt_Internal;
    }
    get mMaxHeightTxt() {
        if (!this.mMaxHeightTxt_Internal && this.uiWidgetBase) {
            this.mMaxHeightTxt_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mContainerCanvas/mMaxHeightTxt');
        }
        return this.mMaxHeightTxt_Internal;
    }
    get mKillCountTxt() {
        if (!this.mKillCountTxt_Internal && this.uiWidgetBase) {
            this.mKillCountTxt_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mContainerCanvas/mKillCountTxt');
        }
        return this.mKillCountTxt_Internal;
    }
    get mScoreTxt() {
        if (!this.mScoreTxt_Internal && this.uiWidgetBase) {
            this.mScoreTxt_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mContainerCanvas/mScoreTxt');
        }
        return this.mScoreTxt_Internal;
    }
    get mContainerCanvas() {
        if (!this.mContainerCanvas_Internal && this.uiWidgetBase) {
            this.mContainerCanvas_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mContainerCanvas');
        }
        return this.mContainerCanvas_Internal;
    }
    onAwake() {
        //设置能否每帧触发onUpdate
        this.canUpdate = false;
        this.layer = mw.UILayerBottom;
        this.initButtons();
    }
    initButtons() {
        //按钮添加点击
        //按钮添加点击
        //按钮多语言
        //文本多语言
        this.initLanguage(this.mRankingTxt);
        this.initLanguage(this.mSelfNameTxt);
        this.initLanguage(this.mMaxHeightTxt);
        this.initLanguage(this.mKillCountTxt);
        this.initLanguage(this.mScoreTxt);
        //文本多语言
    }
    /*初始化多语言*/
    initLanguage(ui) {
        let call = mw.UIScript.getBehavior("lan");
        if (call && ui) {
            call(ui);
        }
    }
    onShow(...params) { }
    ;
    /*显示panel*/
    show(...param) {
        mw.UIService.showUI(this, this.layer, ...param);
    }
    /*隐藏panel*/
    hide() {
        mw.UIService.hideUI(this);
    }
};
RankingItem_Generate = __decorate([
    UIBind('UI/module/RankingUI/RankingItem.ui')
], RankingItem_Generate);
var RankingItem_Generate$1 = RankingItem_Generate;

var foreign137 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: RankingItem_Generate$1
});

/**
 * AUTO GENERATE BY UI EDITOR.
 * WARNING: DO NOT MODIFY THIS FILE,MAY CAUSE CODE LOST.
 * AUTHOR: 爱玩游戏的小胖子
 * UI: UI/module/ShopUI/ClothItem.ui
 * TIME: 2024.08.04-18.39.54
 */
let ClothItem_Generate = class ClothItem_Generate extends UIScript {
    get mCanvas() {
        if (!this.mCanvas_Internal && this.uiWidgetBase) {
            this.mCanvas_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mCanvas');
        }
        return this.mCanvas_Internal;
    }
    get mSelectImg() {
        if (!this.mSelectImg_Internal && this.uiWidgetBase) {
            this.mSelectImg_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mCanvas/mSelectImg');
        }
        return this.mSelectImg_Internal;
    }
    get mIAAImg() {
        if (!this.mIAAImg_Internal && this.uiWidgetBase) {
            this.mIAAImg_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mCanvas/mIAAImg');
        }
        return this.mIAAImg_Internal;
    }
    get mIconImage() {
        if (!this.mIconImage_Internal && this.uiWidgetBase) {
            this.mIconImage_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mCanvas/mIconImage');
        }
        return this.mIconImage_Internal;
    }
    get mIconBtn() {
        if (!this.mIconBtn_Internal && this.uiWidgetBase) {
            this.mIconBtn_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mCanvas/mIconBtn');
        }
        return this.mIconBtn_Internal;
    }
    onAwake() {
        //设置能否每帧触发onUpdate
        this.canUpdate = false;
        this.layer = mw.UILayerBottom;
        this.initButtons();
    }
    initButtons() {
        //按钮添加点击
        //按钮添加点击
        this.mIconBtn.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick", "mIconBtn");
        });
        this.mIconBtn.touchMethod = (mw.ButtonTouchMethod.PreciseTap);
        //按钮多语言
        //文本多语言
        //文本多语言
    }
    /*初始化多语言*/
    initLanguage(ui) {
        let call = mw.UIScript.getBehavior("lan");
        if (call && ui) {
            call(ui);
        }
    }
    onShow(...params) { }
    ;
    /*显示panel*/
    show(...param) {
        mw.UIService.showUI(this, this.layer, ...param);
    }
    /*隐藏panel*/
    hide() {
        mw.UIService.hideUI(this);
    }
};
ClothItem_Generate = __decorate([
    UIBind('UI/module/ShopUI/ClothItem.ui')
], ClothItem_Generate);
var ClothItem_Generate$1 = ClothItem_Generate;

var foreign139 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: ClothItem_Generate$1
});

/**
 * AUTO GENERATE BY UI EDITOR.
 * WARNING: DO NOT MODIFY THIS FILE,MAY CAUSE CODE LOST.
 * AUTHOR: 爱玩游戏的小胖子
 * UI: UI/module/ShopUI/TailItem.ui
 * TIME: 2024.08.04-18.39.54
 */
let TailItem_Generate = class TailItem_Generate extends UIScript {
    get mSelectImg() {
        if (!this.mSelectImg_Internal && this.uiWidgetBase) {
            this.mSelectImg_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mCanvas/mSelectImg');
        }
        return this.mSelectImg_Internal;
    }
    get mIAAImg() {
        if (!this.mIAAImg_Internal && this.uiWidgetBase) {
            this.mIAAImg_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mCanvas/mIAAImg');
        }
        return this.mIAAImg_Internal;
    }
    get mIconBtn() {
        if (!this.mIconBtn_Internal && this.uiWidgetBase) {
            this.mIconBtn_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mCanvas/mIconBtn');
        }
        return this.mIconBtn_Internal;
    }
    get mCanvas() {
        if (!this.mCanvas_Internal && this.uiWidgetBase) {
            this.mCanvas_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mCanvas');
        }
        return this.mCanvas_Internal;
    }
    onAwake() {
        //设置能否每帧触发onUpdate
        this.canUpdate = false;
        this.layer = mw.UILayerBottom;
        this.initButtons();
    }
    initButtons() {
        //按钮添加点击
        //按钮添加点击
        this.mIconBtn.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick", "mIconBtn");
        });
        this.mIconBtn.touchMethod = (mw.ButtonTouchMethod.PreciseTap);
        //按钮多语言
        //文本多语言
        //文本多语言
    }
    /*初始化多语言*/
    initLanguage(ui) {
        let call = mw.UIScript.getBehavior("lan");
        if (call && ui) {
            call(ui);
        }
    }
    onShow(...params) { }
    ;
    /*显示panel*/
    show(...param) {
        mw.UIService.showUI(this, this.layer, ...param);
    }
    /*隐藏panel*/
    hide() {
        mw.UIService.hideUI(this);
    }
};
TailItem_Generate = __decorate([
    UIBind('UI/module/ShopUI/TailItem.ui')
], TailItem_Generate);
var TailItem_Generate$1 = TailItem_Generate;

var foreign141 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: TailItem_Generate$1
});

/**
 * AUTO GENERATE BY UI EDITOR.
 * WARNING: DO NOT MODIFY THIS FILE,MAY CAUSE CODE LOST.
 * AUTHOR: 爱玩游戏的小胖子
 * UI: UI/module/ShopUI/WeaponItem.ui
 * TIME: 2024.08.04-18.39.54
 */
let WeaponItem_Generate = class WeaponItem_Generate extends UIScript {
    get mCanvas() {
        if (!this.mCanvas_Internal && this.uiWidgetBase) {
            this.mCanvas_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mCanvas');
        }
        return this.mCanvas_Internal;
    }
    get mSelectImg() {
        if (!this.mSelectImg_Internal && this.uiWidgetBase) {
            this.mSelectImg_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mCanvas/mSelectImg');
        }
        return this.mSelectImg_Internal;
    }
    get mIAAImg() {
        if (!this.mIAAImg_Internal && this.uiWidgetBase) {
            this.mIAAImg_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mCanvas/mIAAImg');
        }
        return this.mIAAImg_Internal;
    }
    get mIconImage() {
        if (!this.mIconImage_Internal && this.uiWidgetBase) {
            this.mIconImage_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mCanvas/mIconImage');
        }
        return this.mIconImage_Internal;
    }
    get mIconBtn() {
        if (!this.mIconBtn_Internal && this.uiWidgetBase) {
            this.mIconBtn_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mCanvas/mIconBtn');
        }
        return this.mIconBtn_Internal;
    }
    get mNameText() {
        if (!this.mNameText_Internal && this.uiWidgetBase) {
            this.mNameText_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mCanvas/mNameText');
        }
        return this.mNameText_Internal;
    }
    onAwake() {
        //设置能否每帧触发onUpdate
        this.canUpdate = false;
        this.layer = mw.UILayerBottom;
        this.initButtons();
    }
    initButtons() {
        //按钮添加点击
        //按钮添加点击
        this.mIconBtn.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick", "mIconBtn");
        });
        this.mIconBtn.touchMethod = (mw.ButtonTouchMethod.PreciseTap);
        //按钮多语言
        //文本多语言
        this.initLanguage(this.mNameText);
        //文本多语言
    }
    /*初始化多语言*/
    initLanguage(ui) {
        let call = mw.UIScript.getBehavior("lan");
        if (call && ui) {
            call(ui);
        }
    }
    onShow(...params) { }
    ;
    /*显示panel*/
    show(...param) {
        mw.UIService.showUI(this, this.layer, ...param);
    }
    /*隐藏panel*/
    hide() {
        mw.UIService.hideUI(this);
    }
};
WeaponItem_Generate = __decorate([
    UIBind('UI/module/ShopUI/WeaponItem.ui')
], WeaponItem_Generate);
var WeaponItem_Generate$1 = WeaponItem_Generate;

var foreign142 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: WeaponItem_Generate$1
});

/**
 * AUTO GENERATE BY UI EDITOR.
 * WARNING: DO NOT MODIFY THIS FILE,MAY CAUSE CODE LOST.
 * AUTHOR: 爱玩游戏的小胖子
 * UI: UI/module/ShopUI/WingItem.ui
 * TIME: 2024.08.04-18.39.54
 */
let WingItem_Generate = class WingItem_Generate extends UIScript {
    get mSelectImg() {
        if (!this.mSelectImg_Internal && this.uiWidgetBase) {
            this.mSelectImg_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mCanvas/mSelectImg');
        }
        return this.mSelectImg_Internal;
    }
    get mIAAImg() {
        if (!this.mIAAImg_Internal && this.uiWidgetBase) {
            this.mIAAImg_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mCanvas/mIAAImg');
        }
        return this.mIAAImg_Internal;
    }
    get mIconBtn() {
        if (!this.mIconBtn_Internal && this.uiWidgetBase) {
            this.mIconBtn_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mCanvas/mIconBtn');
        }
        return this.mIconBtn_Internal;
    }
    get mCanvas() {
        if (!this.mCanvas_Internal && this.uiWidgetBase) {
            this.mCanvas_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mCanvas');
        }
        return this.mCanvas_Internal;
    }
    onAwake() {
        //设置能否每帧触发onUpdate
        this.canUpdate = false;
        this.layer = mw.UILayerBottom;
        this.initButtons();
    }
    initButtons() {
        //按钮添加点击
        //按钮添加点击
        this.mIconBtn.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick", "mIconBtn");
        });
        this.mIconBtn.touchMethod = (mw.ButtonTouchMethod.PreciseTap);
        //按钮多语言
        //文本多语言
        //文本多语言
    }
    /*初始化多语言*/
    initLanguage(ui) {
        let call = mw.UIScript.getBehavior("lan");
        if (call && ui) {
            call(ui);
        }
    }
    onShow(...params) { }
    ;
    /*显示panel*/
    show(...param) {
        mw.UIService.showUI(this, this.layer, ...param);
    }
    /*隐藏panel*/
    hide() {
        mw.UIService.hideUI(this);
    }
};
WingItem_Generate = __decorate([
    UIBind('UI/module/ShopUI/WingItem.ui')
], WingItem_Generate);
var WingItem_Generate$1 = WingItem_Generate;

var foreign143 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: WingItem_Generate$1
});

/**
 * AUTO GENERATE BY UI EDITOR.
 * WARNING: DO NOT MODIFY THIS FILE,MAY CAUSE CODE LOST.
 * AUTHOR: 爱玩游戏的小胖子
 * UI: UI/Prefabs/可弹跳的交互物/UI/Prefab/Trampoline/JumpRecordUI.ui
 * TIME: 2024.08.04-18.39.54
 */
let JumpRecordUI_Generate = class JumpRecordUI_Generate extends UIScript {
    get mRecordMaxHeightText() {
        if (!this.mRecordMaxHeightText_Internal && this.uiWidgetBase) {
            this.mRecordMaxHeightText_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mRecordMaxHeightCanvas/mRecordMaxHeightText');
        }
        return this.mRecordMaxHeightText_Internal;
    }
    get mRecordMaxHeightCanvas() {
        if (!this.mRecordMaxHeightCanvas_Internal && this.uiWidgetBase) {
            this.mRecordMaxHeightCanvas_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mRecordMaxHeightCanvas');
        }
        return this.mRecordMaxHeightCanvas_Internal;
    }
    get mCurrentHeightTxt() {
        if (!this.mCurrentHeightTxt_Internal && this.uiWidgetBase) {
            this.mCurrentHeightTxt_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mCurrentHeightCanvas/mCurrentHeightTxt');
        }
        return this.mCurrentHeightTxt_Internal;
    }
    get mCurrentHeightCanvas() {
        if (!this.mCurrentHeightCanvas_Internal && this.uiWidgetBase) {
            this.mCurrentHeightCanvas_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mCurrentHeightCanvas');
        }
        return this.mCurrentHeightCanvas_Internal;
    }
    onAwake() {
        //设置能否每帧触发onUpdate
        this.canUpdate = false;
        this.layer = mw.UILayerBottom;
        this.initButtons();
    }
    initButtons() {
        //按钮添加点击
        //按钮添加点击
        //按钮多语言
        //文本多语言
        this.initLanguage(this.mRecordMaxHeightText);
        this.initLanguage(this.mCurrentHeightTxt);
        //文本多语言
    }
    /*初始化多语言*/
    initLanguage(ui) {
        let call = mw.UIScript.getBehavior("lan");
        if (call && ui) {
            call(ui);
        }
    }
    onShow(...params) { }
    ;
    /*显示panel*/
    show(...param) {
        mw.UIService.showUI(this, this.layer, ...param);
    }
    /*隐藏panel*/
    hide() {
        mw.UIService.hideUI(this);
    }
};
JumpRecordUI_Generate = __decorate([
    UIBind('UI/Prefabs/可弹跳的交互物/UI/Prefab/Trampoline/JumpRecordUI.ui')
], JumpRecordUI_Generate);
var JumpRecordUI_Generate$1 = JumpRecordUI_Generate;

var foreign145 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: JumpRecordUI_Generate$1
});

const MWModuleMap = { 
     '7ECCB6A64B78EA5423F9B9B8EB9A8AA3': foreign1,
     'D0C047774D0553DBFEDA47988B641D80': foreign2,
     '37F3E36F42C62AAC9D5820931EC227B3': foreign3,
     'D99E0C484254158895E26FBFF16CFAA5': foreign4,
     'C67CC3814AB68108A2112EA6CB2CCCEC': foreign5,
     'D879A1674F4CD5C0C4DAA9AF23667ACC': foreign6,
     '1EB82B9D4146CFF941BCD8BAF2FF3B2C': foreign7,
     '449123384A9556B02B9C90B5A834E4B8': foreign8,
     'F2F4506A436D3630E6315F90716A69AD': foreign9,
     '8DF07A104215E9DEF260A5A4372BE5E0': foreign10,
     '740BB31D48B3C30ED822209215CFEA59': foreign11,
     '7A19EAB641B24574842EF8B0D5D11161': foreign12,
     '8D505D9D47BCCBFBC25CACA016DD9447': foreign13,
     '553725DC427DF80EF2751CB8F2762514': foreign14,
     'C9FCF90C4738035BADDDA38C9677292D': foreign15,
     '5678A2A54D344DB920AA24B440EE82F5': foreign16,
     '989E79334DBF0E7C7A101A9405B52E87': foreign17,
     '2533CA9D466380D8941118B5FAC4AC8B': foreign18,
     'FB64B0AE4FF3375CC338DBA9451598AC': foreign19,
     'B3F1342D4E87D7EB00062E8E0DB6A10E': foreign20,
     'E494D96048B7DD3D66AE9C83808890CC': foreign21,
     '10BB2D474E07A327C01E05B6749F4E0F': foreign22,
     '4AA712EF4A9FBFFB6EB89797A46F9B36': foreign23,
     '04B0C3A545B7E2357E8524A95B562B09': foreign24,
     '8457B937421512A33DF04C985370B55D': foreign25,
     'E49CC67A421745C7A7240A82D4A4772C': foreign26,
     'A90D230045BA23B8FC0787BD521B5B27': foreign27,
     '3B55A2244CB173179CE2A7869004303B': foreign28,
     '94E49AA94CF2AC3D84FFC1A7E1343688': foreign29,
     'D60B0B544268DE5730D6488E9F67F52D': foreign30,
     'E9D24F394E2C74EDC92CF290BD2785CC': foreign31,
     '3556E4F44A713D43F9547BB9F56FCE40': foreign32,
     '3B5AAE7548E4E6E8479FF7A847AEBD59': foreign33,
     '1FA5248042E9E37A2FD5A1B33F4306AF': foreign34,
     'EEDB4B154C3198E61CDB869600E53391': foreign35,
     '954744EC4E16872D1DC207B1E12E05A4': foreign36,
     '5D49AE43441954A04032438861C72FD7': foreign37,
     '375FB9614C3CD278281E4B9F30840886': foreign38,
     '95A5A0C041A3CEB2DE4F34982FCD2240': foreign39,
     '092264C34BE2B45328996393B7389103': foreign40,
     '75128BAB45D5451ABBC708BE8DA602CE': foreign41,
     'F040459540011865EC0345922939F873': foreign42,
     'C125D9F5445B7E490124E08E822118B5': foreign43,
     '7DF77BCF49481CBFB09687890FAB335D': foreign44,
     '5B597A3444DEDE389F15BBB1B2A31AB9': foreign45,
     'DBDFB9F445B78F8C9D8B95B1C7F1BDE4': foreign46,
     '5C6E2B9D4E475A10F6E2CB97A478F3C1': foreign47,
     'C15DDFE44BC4B6C25DD111B130A5D197': foreign48,
     '6F88C40447DB24A8687D74A29C47E936': foreign49,
     'B259B7B84AD27881DCBCC0858BC7DA80': foreign50,
     '2415A9E546ADE8758DA36BBE5D8C5DDF': foreign51,
     '89DF92E6453F5B57EDE6728765FCDB83': foreign52,
     '826E84B741E807951D5AE4801FE0AC86': foreign53,
     '44B7B44C4B6CB0485CC64C9E7D787988': foreign54,
     '7FF491814A04888628E26280878DA4F2': foreign55,
     'BE1B900B40409473AC5A55A32D727078': foreign56,
     'D9483EA848DD67A5D6027A9834FA0087': foreign57,
     'D9A11684418D70557B4608ACE0003617': foreign58,
     'ED23BBF34B5F0FD622DB9E8B204BB63A': foreign59,
     '6C7F83344D08B83F8B1C4998A4C54AE8': foreign60,
     '2F56257244B48DB12232C3B29F558118': foreign61,
     '36199799473CBF1BB8E5E1BBA9126803': foreign62,
     '79EAB7A743FEAD2E7700419AFA2CCC57': foreign63,
     'DC73DACC42CFE2DE1E2BD8A5B3AB0161': foreign64,
     '7BB2CD8B48C4133E20706B9D8AEA7409': foreign65,
     'E46295934A372F28FCC0BD88997D4C9A': foreign66,
     '0C6DFB764F91F965C5215EBF3F2DA0CD': foreign67,
     '3265C4C945183AE28FF46B9E0B36612A': foreign68,
     'B274311A491689648BB2FFA4AB1EABD0': foreign69,
     'A82A0EBB469BEB10BC5E7F93616124A3': foreign70,
     '5451EC784F3474B27873F2B3AFDB95DE': foreign71,
     'A86CDD014B353BFAF7F18DBEC67B2EE5': foreign72,
     'AC4B614C4A13563DB038D9B78A6F2E80': foreign73,
     '830082A2486CEC863728F59B546080A1': foreign74,
     '6FCC85344595AD2B9E45F996A86B410B': foreign75,
     'DF0B2F144C243DD78D93B2A74DE02BDB': foreign76,
     'B03D76CA492BAA440E2D1780B5F642DE': foreign77,
     '56EBF5F244E68CD9BD9825AC39B10974': foreign78,
     '9BCDB33344AFBB8D7E1D3EBC073556A3': foreign79,
     '89DCEA7941528B3BD1A16DA8C5C88EE1': foreign80,
     '9E78FFA14882F31B5A3C549B39FEC218': foreign81,
     '50B02C1C44E8AD10F9760CBC3178F07F': foreign82,
     '72BA820E47B5DC06A25C0B9DE2A1ACC4': foreign83,
     'E52E26894457A63DEAEB1BA27209552D': foreign84,
     '90BD0B254690445621F522B7B3BC45E3': foreign85,
     '4849DA4C4CB85CC732BE458C18F6379E': foreign86,
     '923B76E6476954B0B0DA02BC98E3FAA4': foreign87,
     '21D4445D449C30E78652DA8FEBDB5B7C': foreign88,
     'A5B98FA7470902A28E5F9C9DF097BB1F': foreign89,
     '868B505D43ACE71DD8A57097D27E6B8B': foreign90,
     '297E48804EC2CE3BEC392F8A3CAC6CF5': foreign91,
     '6D157CC6469B8C9F3567A29FE650576C': foreign92,
     'FDA0DBA147650990118C55A0825BDFEE': foreign93,
     'C8F66A6843EBCCDA82E46DB41B04A24A': foreign94,
     'C03181D74635A49A6E944BA569B849DF': foreign95,
     '1CF4255D4558936736B0168910CB6E85': foreign96,
     'C983066745C7F20E269D83A032915A5A': foreign97,
     'F927107048D151F143B51F98CFFACCAE': foreign98,
     'CD82A2E448FA71DD00529A8B5261ED6C': foreign99,
     'A099C00749C364C9D60BBD885F36EDAB': foreign100,
     '8631500449380F926E4F61A89F4DDC38': foreign101,
     '214EADC64028F27CC65544956CE411F1': foreign102,
     '3B483A84480FD82E59AA5597E7C4D986': foreign103,
     '189DADBA40C525C5906BC7B220ACD8A8': foreign104,
     'E6EE5F054BE51F828EFA2E8E2B75BC22': foreign105,
     'B6D27EAC444C85D1D925F986D613D5B3': foreign106,
     'C21422064060FC0412F08EAAD527453E': foreign107,
     'E08DC42B45A65EE74232E6B7819467BF': foreign108,
     '94AC5EDC41970AA136CF54A0D283F564': foreign109,
     '5D91777D438033676E4112A36CC070B0': foreign110,
     '065127E9429137BDD37B65A8F02F1DF9': foreign111,
     'B717B8174F93B395FECBB1AD598AB7A7': foreign112,
     'AA1079D241B6BB30743EDA9F4A9C5412': foreign113,
     'EE52C023433809A455CD54B47AE547A4': foreign114,
     'BDE756FF454330E2C5881385290EF05C': foreign115,
     'CB21811D400FF71D719CE59F97622867': foreign116,
     '710687624B02A2E18DD152A097EB3160': foreign117,
     '370096C546122EE5DA0AE3BF1535FF5A': foreign118,
     'E3296951464D4AE99A231CABA9DFEB5D': foreign119,
     '344CCE0A4CCC3E3D40B9DAAF93F9A6BC': foreign120,
     '8DA9DF4F4EAC6D5635E6E291B56CA262': foreign121,
     'DBFA36A34F3399D56B1662BF1ED3CEF0': foreign122,
     '4364255442302B8A49B73E90991A9583': foreign123,
     'EA524BE3465EF000F605CE8C6B704D6B': foreign124,
     '7CEA1CB949085CA6E7C0F48C45700674': foreign125,
     '2528EAD243F6FB25EAB612B3D94EBDAC': foreign126,
     'B6BDFEB14D8838D358B3D28924C27CF3': foreign127,
     'A606984840804F6EFB25D0A4C7191DB5': foreign128,
     'A639488E4045BA40B1363285A8BC88C0': foreign129,
     '31DAEEA74B645DBF966BDBB71155357F': foreign130,
     '5B10F1794471BFE32E9CE085D3AE414F': foreign131,
     'CFD81FDF4E103BA3E77DC8ADE7B3466F': foreign132,
     'E0AB58B34AE7EB16305F529C6FA36BB3': foreign133,
     'EA1F9DDE412822BAA582B48AB647BBA6': foreign134,
     'C355104C46F120CA76B19698AB2233E6': foreign135,
     'BE07506F46A0EB91CA5E04BA797F06D9': foreign136,
     '4D4C6F124C1A7FAE19BA719FF4DE9E6F': foreign137,
     '256A668342053E3AF30DE5B8B94E07B8': foreign138,
     '1C83BDBF48A2400CE7912CB5DE86E7EC': foreign139,
     'D576481D44EE711294EAA6A7A7031590': foreign140,
     'EB6C431843573960FE4767BAAE016943': foreign141,
     '3FB5E7C2434EEDB3A28F5E8CDE22FBA6': foreign142,
     'DF2ED0244B24B75C285526ADF7F0EC9D': foreign143,
     'FCABE3234E35CFE468AEB79BEC6F2E72': foreign144,
     '62E6AAFB40905C05BF1A9C898D66F7CC': foreign145,
};
const MWFileMapping = new WeakMap([[foreign1 || {}, "JavaScripts/Common/AdTips"],
[foreign2 || {}, "JavaScripts/Common/Collections"],
[foreign3 || {}, "JavaScripts/Common/ConfirmPanel"],
[foreign4 || {}, "JavaScripts/Common/Dance"],
[foreign5 || {}, "JavaScripts/Common/ExplosiveCoins"],
[foreign6 || {}, "JavaScripts/Common/Flashlight"],
[foreign7 || {}, "JavaScripts/Common/FlyText"],
[foreign8 || {}, "JavaScripts/Common/JumpGame"],
[foreign9 || {}, "JavaScripts/Common/MyClearDayNight"],
[foreign10 || {}, "JavaScripts/Common/notice/Notice"],
[foreign11 || {}, "JavaScripts/Common/notice/Tween"],
[foreign12 || {}, "JavaScripts/Common/notice/UIPool"],
[foreign13 || {}, "JavaScripts/Common/notice/Updater"],
[foreign14 || {}, "JavaScripts/Common/NPCSitDance"],
[foreign15 || {}, "JavaScripts/Common/OnClickPanel"],
[foreign16 || {}, "JavaScripts/Common/Portal"],
[foreign17 || {}, "JavaScripts/Common/P_Tips"],
[foreign18 || {}, "JavaScripts/Common/Shakes"],
[foreign19 || {}, "JavaScripts/Common/Sit"],
[foreign20 || {}, "JavaScripts/Common/SkyWheel"],
[foreign21 || {}, "JavaScripts/Common/Test"],
[foreign22 || {}, "JavaScripts/config/Achievements"],
[foreign23 || {}, "JavaScripts/config/Assets"],
[foreign24 || {}, "JavaScripts/config/BlockingVolume"],
[foreign25 || {}, "JavaScripts/config/Clothes"],
[foreign26 || {}, "JavaScripts/config/ColdWeapon"],
[foreign27 || {}, "JavaScripts/config/Collection"],
[foreign28 || {}, "JavaScripts/config/ConfigBase"],
[foreign29 || {}, "JavaScripts/config/Dance"],
[foreign30 || {}, "JavaScripts/config/DressUp"],
[foreign31 || {}, "JavaScripts/config/Flashlight"],
[foreign32 || {}, "JavaScripts/config/GameConfig"],
[foreign33 || {}, "JavaScripts/config/MonsterInfo"],
[foreign34 || {}, "JavaScripts/config/Music"],
[foreign35 || {}, "JavaScripts/config/NPCSitDance"],
[foreign36 || {}, "JavaScripts/config/Pet"],
[foreign37 || {}, "JavaScripts/config/PlayerLauncher"],
[foreign38 || {}, "JavaScripts/config/Portal"],
[foreign39 || {}, "JavaScripts/config/RotaryKnifeTrigger"],
[foreign40 || {}, "JavaScripts/config/Shake"],
[foreign41 || {}, "JavaScripts/config/Sit"],
[foreign42 || {}, "JavaScripts/config/Tail"],
[foreign43 || {}, "JavaScripts/config/TelegraphPole"],
[foreign44 || {}, "JavaScripts/config/Trampoline"],
[foreign45 || {}, "JavaScripts/config/Weapon"],
[foreign46 || {}, "JavaScripts/config/Wing"],
[foreign47 || {}, "JavaScripts/const/Enum"],
[foreign48 || {}, "JavaScripts/const/GlobalData"],
[foreign49 || {}, "JavaScripts/GameLaunch"],
[foreign50 || {}, "JavaScripts/Modified027Editor/ModifiedCamera"],
[foreign51 || {}, "JavaScripts/Modified027Editor/ModifiedPlayer"],
[foreign52 || {}, "JavaScripts/Modified027Editor/ModifiedSpawn"],
[foreign53 || {}, "JavaScripts/Modified027Editor/ModifiedStaticAPI"],
[foreign54 || {}, "JavaScripts/module/AchievementModule/AchievementData"],
[foreign55 || {}, "JavaScripts/module/AchievementModule/AchievementModuleC"],
[foreign56 || {}, "JavaScripts/module/AchievementModule/AchievementModuleS"],
[foreign57 || {}, "JavaScripts/module/AchievementModule/ui/AchievementPanel"],
[foreign58 || {}, "JavaScripts/module/AchievementModule/ui/CompletedPanel"],
[foreign59 || {}, "JavaScripts/module/AdsModule/AdsModuleC"],
[foreign60 || {}, "JavaScripts/module/AdsModule/AdsModuleS"],
[foreign61 || {}, "JavaScripts/module/ColdWeapon/ColdWeapon"],
[foreign62 || {}, "JavaScripts/module/ColdWeapon/SkillRectCheck"],
[foreign63 || {}, "JavaScripts/module/ColdWeapon/Weapon"],
[foreign64 || {}, "JavaScripts/module/ColdWeapon/WeaponClient"],
[foreign65 || {}, "JavaScripts/module/ColdWeapon/WeaponDef"],
[foreign66 || {}, "JavaScripts/module/ColdWeapon/WeaponManager"],
[foreign67 || {}, "JavaScripts/module/ColdWeapon/WeaponServer"],
[foreign68 || {}, "JavaScripts/module/CollectionMOdule/CollectionData"],
[foreign69 || {}, "JavaScripts/module/CollectionMOdule/CollectionModuleC"],
[foreign70 || {}, "JavaScripts/module/CollectionMOdule/CollectionModuleS"],
[foreign71 || {}, "JavaScripts/module/CollectionMOdule/ui/CollectionItemPanel"],
[foreign72 || {}, "JavaScripts/module/CollectionMOdule/ui/CollectionPanel"],
[foreign73 || {}, "JavaScripts/module/CollectionMOdule/ui/CollectionTipPanel"],
[foreign74 || {}, "JavaScripts/module/DanceModule"],
[foreign75 || {}, "JavaScripts/module/HUDModule/HUDDate"],
[foreign76 || {}, "JavaScripts/module/HUDModule/HUDModuleC"],
[foreign77 || {}, "JavaScripts/module/HUDModule/HUDModuleS"],
[foreign78 || {}, "JavaScripts/module/HUDModule/ui/GuidePanel"],
[foreign79 || {}, "JavaScripts/module/HUDModule/ui/HUDPanel"],
[foreign80 || {}, "JavaScripts/module/HUDModule/ui/Lifebar"],
[foreign81 || {}, "JavaScripts/module/NPCModule/Monster"],
[foreign82 || {}, "JavaScripts/module/NPCModule/NPCBar"],
[foreign83 || {}, "JavaScripts/module/PetModule/PetModule"],
[foreign84 || {}, "JavaScripts/module/PetModule/ui/PetPanel"],
[foreign85 || {}, "JavaScripts/module/PetModule/ui/PetRafflePanel"],
[foreign86 || {}, "JavaScripts/module/PlayerModule/Boss"],
[foreign87 || {}, "JavaScripts/module/PlayerModule/PlayerModule"],
[foreign88 || {}, "JavaScripts/module/RankingModule/RankingModuleC"],
[foreign89 || {}, "JavaScripts/module/RankingModule/RankingModuleS"],
[foreign90 || {}, "JavaScripts/module/RankingModule/ui/RankingPanel"],
[foreign91 || {}, "JavaScripts/module/ShopModule/ShopData"],
[foreign92 || {}, "JavaScripts/module/ShopModule/ShopModuleC"],
[foreign93 || {}, "JavaScripts/module/ShopModule/ShopModuleS"],
[foreign94 || {}, "JavaScripts/module/ShopModule/ui/ShopPanel"],
[foreign95 || {}, "JavaScripts/module/SignInModule/SignInData"],
[foreign96 || {}, "JavaScripts/module/SignInModule/SignInModuleC"],
[foreign97 || {}, "JavaScripts/module/SignInModule/SignInModuleS"],
[foreign98 || {}, "JavaScripts/module/SignInModule/ui/SignInPanel"],
[foreign99 || {}, "JavaScripts/Prefabs/PrefabEvent"],
[foreign100 || {}, "JavaScripts/Prefabs/可击飞的交互物/Script/prefab/RotaryKnife/RotaryKnifeTrigger"],
[foreign101 || {}, "JavaScripts/Prefabs/可发射的交互物/Script/prefab/PlayerLauncher/PlayerLauncher"],
[foreign102 || {}, "JavaScripts/Prefabs/可弹跳的交互物/Script/prefab/Trampoline/Trampoline"],
[foreign103 || {}, "JavaScripts/Prefabs/可弹跳的交互物/Script/prefab/Trampoline/ui/P_Game_Trampoline"],
[foreign104 || {}, "JavaScripts/Prefabs/可电击的交互物/Script/prefab/TelegraphPole/TelegraphPole"],
[foreign105 || {}, "JavaScripts/Tools/Console"],
[foreign106 || {}, "JavaScripts/Tools/InputManager"],
[foreign107 || {}, "JavaScripts/Tools/ObjectPool"],
[foreign108 || {}, "JavaScripts/Tools/utils"],
[foreign109 || {}, "JavaScripts/ui-generate/common/AdTips_generate"],
[foreign110 || {}, "JavaScripts/ui-generate/common/ConfirmPanel_generate"],
[foreign111 || {}, "JavaScripts/ui-generate/common/FirstGamePanel_generate"],
[foreign112 || {}, "JavaScripts/ui-generate/common/ImpactRadiusWindow_generate"],
[foreign113 || {}, "JavaScripts/ui-generate/common/JumpGameTips_generate"],
[foreign114 || {}, "JavaScripts/ui-generate/common/notice/NoticeView_generate"],
[foreign115 || {}, "JavaScripts/ui-generate/common/notice/SecondNoticeItem_generate"],
[foreign116 || {}, "JavaScripts/ui-generate/common/notice/TopNoticeItem_generate"],
[foreign117 || {}, "JavaScripts/ui-generate/common/OnClickPanel_generate"],
[foreign118 || {}, "JavaScripts/ui-generate/common/Test_generate"],
[foreign119 || {}, "JavaScripts/ui-generate/common/world0_generate"],
[foreign120 || {}, "JavaScripts/ui-generate/common/world0_副本1_generate"],
[foreign121 || {}, "JavaScripts/ui-generate/module/Achievement/AchievementItem_generate"],
[foreign122 || {}, "JavaScripts/ui-generate/module/Achievement/AchievementMain_generate"],
[foreign123 || {}, "JavaScripts/ui-generate/module/Achievement/Completed_generate"],
[foreign124 || {}, "JavaScripts/ui-generate/module/CollectionUI/CollectionItemTip_generate"],
[foreign125 || {}, "JavaScripts/ui-generate/module/CollectionUI/CollectionPanel_generate"],
[foreign126 || {}, "JavaScripts/ui-generate/module/CollectionUI/CollectionTip_generate"],
[foreign127 || {}, "JavaScripts/ui-generate/module/CollectionUI/CollectItem_generate"],
[foreign128 || {}, "JavaScripts/ui-generate/module/HUDUI/GuidePanel_generate"],
[foreign129 || {}, "JavaScripts/ui-generate/module/HUDUI/HUDPanel_generate"],
[foreign130 || {}, "JavaScripts/ui-generate/module/HUDUI/KillTipItem_generate"],
[foreign131 || {}, "JavaScripts/ui-generate/module/HUDUI/Lifebar_generate"],
[foreign132 || {}, "JavaScripts/ui-generate/module/NPCModule/NPCBar_generate"],
[foreign133 || {}, "JavaScripts/ui-generate/module/PetUI/PetItem_generate"],
[foreign134 || {}, "JavaScripts/ui-generate/module/PetUI/PetPanel_generate"],
[foreign135 || {}, "JavaScripts/ui-generate/module/PetUI/PetRafflePanel_generate"],
[foreign136 || {}, "JavaScripts/ui-generate/module/PlayerModule/LevelPanel_generate"],
[foreign137 || {}, "JavaScripts/ui-generate/module/RankingUI/RankingItem_generate"],
[foreign138 || {}, "JavaScripts/ui-generate/module/RankingUI/RankingPanel_generate"],
[foreign139 || {}, "JavaScripts/ui-generate/module/ShopUI/ClothItem_generate"],
[foreign140 || {}, "JavaScripts/ui-generate/module/ShopUI/ShopPanel_generate"],
[foreign141 || {}, "JavaScripts/ui-generate/module/ShopUI/TailItem_generate"],
[foreign142 || {}, "JavaScripts/ui-generate/module/ShopUI/WeaponItem_generate"],
[foreign143 || {}, "JavaScripts/ui-generate/module/ShopUI/WingItem_generate"],
[foreign144 || {}, "JavaScripts/ui-generate/module/SignInUI/SignInPanel_generate"],
[foreign145 || {}, "JavaScripts/ui-generate/Prefabs/可弹跳的交互物/UI/Prefab/Trampoline/JumpRecordUI_generate"]]);

exports.MWFileMapping = MWFileMapping;
exports.MWModuleMap = MWModuleMap;
//# sourceMappingURL=game.js.map
